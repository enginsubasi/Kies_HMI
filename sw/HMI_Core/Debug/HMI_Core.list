
HMI_Core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000387c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039fc  080039fc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080039fc  080039fc  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039fc  080039fc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08003a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  2000017c  08003b80  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013f0  08003b80  000213f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6fd  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004593  00000000  00000000  0003a8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a6ba  00000000  00000000  0003ee35  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e30  00000000  00000000  000494f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001710  00000000  00000000  0004a320  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018575  00000000  00000000  0004ba30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012030  00000000  00000000  00063fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00078922  00000000  00000000  00075fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000ee8f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029f8  00000000  00000000  000ee974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003970 	.word	0x08003970

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08003970 	.word	0x08003970

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800014e:	2200      	movs	r2, #0
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000150:	f44f 2460 	mov.w	r4, #917504	; 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000154:	2101      	movs	r1, #1
  hadc1.Instance = ADC1;
 8000156:	4b11      	ldr	r3, [pc, #68]	; (800019c <MX_ADC1_Init+0x50>)
 8000158:	4d11      	ldr	r5, [pc, #68]	; (80001a0 <MX_ADC1_Init+0x54>)
{
 800015a:	b085      	sub	sp, #20
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800015c:	4618      	mov	r0, r3
  ADC_ChannelConfTypeDef sConfig = {0};
 800015e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8000162:	9203      	str	r2, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000164:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000166:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000168:	751a      	strb	r2, [r3, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800016a:	605a      	str	r2, [r3, #4]
  hadc1.Instance = ADC1;
 800016c:	601d      	str	r5, [r3, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800016e:	61dc      	str	r4, [r3, #28]
  hadc1.Init.NbrOfConversion = 1;
 8000170:	6119      	str	r1, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000172:	f000 fbe1 	bl	8000938 <HAL_ADC_Init>
 8000176:	b970      	cbnz	r0, 8000196 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000178:	2400      	movs	r4, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800017a:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800017c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800017e:	a901      	add	r1, sp, #4
 8000180:	4806      	ldr	r0, [pc, #24]	; (800019c <MX_ADC1_Init+0x50>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000182:	e9cd 4201 	strd	r4, r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000186:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000188:	f000 fb24 	bl	80007d4 <HAL_ADC_ConfigChannel>
 800018c:	b108      	cbz	r0, 8000192 <MX_ADC1_Init+0x46>
  {
    Error_Handler();
 800018e:	f000 f953 	bl	8000438 <Error_Handler>
  }

}
 8000192:	b005      	add	sp, #20
 8000194:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000196:	f000 f94f 	bl	8000438 <Error_Handler>
 800019a:	e7ed      	b.n	8000178 <MX_ADC1_Init+0x2c>
 800019c:	200003bc 	.word	0x200003bc
 80001a0:	40012400 	.word	0x40012400

080001a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a4:	2300      	movs	r3, #0
{
 80001a6:	b510      	push	{r4, lr}
  if(adcHandle->Instance==ADC1)
 80001a8:	6801      	ldr	r1, [r0, #0]
 80001aa:	4a1d      	ldr	r2, [pc, #116]	; (8000220 <HAL_ADC_MspInit+0x7c>)
{
 80001ac:	b088      	sub	sp, #32
  if(adcHandle->Instance==ADC1)
 80001ae:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80001b4:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(adcHandle->Instance==ADC1)
 80001b8:	d001      	beq.n	80001be <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80001ba:	b008      	add	sp, #32
 80001bc:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80001be:	2013      	movs	r0, #19
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001c0:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80001ca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001cc:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001d2:	619a      	str	r2, [r3, #24]
 80001d4:	699a      	ldr	r2, [r3, #24]
 80001d6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80001da:	9201      	str	r2, [sp, #4]
 80001dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001de:	699a      	ldr	r2, [r3, #24]
 80001e0:	f042 0204 	orr.w	r2, r2, #4
 80001e4:	619a      	str	r2, [r3, #24]
 80001e6:	699a      	ldr	r2, [r3, #24]
 80001e8:	f002 0204 	and.w	r2, r2, #4
 80001ec:	9202      	str	r2, [sp, #8]
 80001ee:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f0:	699a      	ldr	r2, [r3, #24]
 80001f2:	f042 0208 	orr.w	r2, r2, #8
 80001f6:	619a      	str	r2, [r3, #24]
 80001f8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80001fa:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fc:	f003 0308 	and.w	r3, r3, #8
 8000200:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000204:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000206:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000208:	f000 fe58 	bl	8000ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800020c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800020e:	a904      	add	r1, sp, #16
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000212:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f000 fe51 	bl	8000ebc <HAL_GPIO_Init>
}
 800021a:	b008      	add	sp, #32
 800021c:	bd10      	pop	{r4, pc}
 800021e:	bf00      	nop
 8000220:	40012400 	.word	0x40012400
 8000224:	40010800 	.word	0x40010800
 8000228:	40010c00 	.word	0x40010c00

0800022c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800022c:	b510      	push	{r4, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800022e:	2200      	movs	r2, #0
  hcan.Init.Prescaler = 16;
 8000230:	2410      	movs	r4, #16
  hcan.Instance = CAN1;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <MX_CAN_Init+0x34>)
 8000234:	490b      	ldr	r1, [pc, #44]	; (8000264 <MX_CAN_Init+0x38>)
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000236:	4618      	mov	r0, r3
  hcan.Instance = CAN1;
 8000238:	e9c3 1400 	strd	r1, r4, [r3]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800023c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000240:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000244:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000246:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000248:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800024a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800024c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800024e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000250:	f000 fc18 	bl	8000a84 <HAL_CAN_Init>
 8000254:	b900      	cbnz	r0, 8000258 <MX_CAN_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000256:	bd10      	pop	{r4, pc}
 8000258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800025c:	f000 b8ec 	b.w	8000438 <Error_Handler>
 8000260:	200003ec 	.word	0x200003ec
 8000264:	40006400 	.word	0x40006400

08000268 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000268:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN1)
 800026c:	6802      	ldr	r2, [r0, #0]
 800026e:	4b21      	ldr	r3, [pc, #132]	; (80002f4 <HAL_CAN_MspInit+0x8c>)
{
 8000270:	b087      	sub	sp, #28
  if(canHandle->Instance==CAN1)
 8000272:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000274:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000278:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(canHandle->Instance==CAN1)
 800027c:	d001      	beq.n	8000282 <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800027e:	b007      	add	sp, #28
 8000280:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000282:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000286:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800028a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028c:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 800028e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000292:	61da      	str	r2, [r3, #28]
 8000294:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000296:	f44f 7500 	mov.w	r5, #512	; 0x200
    __HAL_RCC_CAN1_CLK_ENABLE();
 800029a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800029e:	9200      	str	r2, [sp, #0]
 80002a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a2:	699a      	ldr	r2, [r3, #24]
 80002a4:	f042 0208 	orr.w	r2, r2, #8
 80002a8:	619a      	str	r2, [r3, #24]
 80002aa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002ac:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	f003 0308 	and.w	r3, r3, #8
 80002b2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b4:	4810      	ldr	r0, [pc, #64]	; (80002f8 <HAL_CAN_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b8:	f000 fe00 	bl	8000ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002bc:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002be:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c0:	a902      	add	r1, sp, #8
 80002c2:	480d      	ldr	r0, [pc, #52]	; (80002f8 <HAL_CAN_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002c4:	e9cd 5202 	strd	r5, r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ca:	f000 fdf7 	bl	8000ebc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_2();
 80002ce:	480b      	ldr	r0, [pc, #44]	; (80002fc <HAL_CAN_MspInit+0x94>)
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80002d0:	4622      	mov	r2, r4
    __HAL_AFIO_REMAP_CAN1_2();
 80002d2:	6843      	ldr	r3, [r0, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80002d4:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_CAN1_2();
 80002d6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80002da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80002de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002e2:	6043      	str	r3, [r0, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80002e4:	2014      	movs	r0, #20
 80002e6:	f000 fd8d 	bl	8000e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80002ea:	2014      	movs	r0, #20
 80002ec:	f000 fdc0 	bl	8000e70 <HAL_NVIC_EnableIRQ>
}
 80002f0:	b007      	add	sp, #28
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	40006400 	.word	0x40006400
 80002f8:	40010c00 	.word	0x40010c00
 80002fc:	40010000 	.word	0x40010000

08000300 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000304:	2400      	movs	r4, #0
{
 8000306:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000308:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800030c:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 8000312:	4e22      	ldr	r6, [pc, #136]	; (800039c <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	699a      	ldr	r2, [r3, #24]
                          |DB6_Pin|DB5_Pin|DB4_Pin|LED1_Pin 
                          |LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000316:	4d22      	ldr	r5, [pc, #136]	; (80003a0 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	f042 0220 	orr.w	r2, r2, #32
 800031c:	619a      	str	r2, [r3, #24]
 800031e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 8000320:	4630      	mov	r0, r6
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000322:	f002 0220 	and.w	r2, r2, #32
 8000326:	9201      	str	r2, [sp, #4]
 8000328:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	6999      	ldr	r1, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 800032c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	f041 0104 	orr.w	r1, r1, #4
 8000332:	6199      	str	r1, [r3, #24]
 8000334:	6999      	ldr	r1, [r3, #24]
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
                          |DB6_Pin|DB5_Pin|DB4_Pin|LED1_Pin 
                          |LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	f001 0104 	and.w	r1, r1, #4
 800033e:	9102      	str	r1, [sp, #8]
 8000340:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000342:	6999      	ldr	r1, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000346:	f041 0108 	orr.w	r1, r1, #8
 800034a:	6199      	str	r1, [r3, #24]
 800034c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 800034e:	f64f 41f9 	movw	r1, #64761	; 0xfcf9
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	f003 0308 	and.w	r3, r3, #8
 8000356:	9303      	str	r3, [sp, #12]
 8000358:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 800035a:	f000 fea9 	bl	80010b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800035e:	4622      	mov	r2, r4
 8000360:	4628      	mov	r0, r5
 8000362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000366:	f000 fea3 	bl	80010b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 800036a:	f64f 43f9 	movw	r3, #64761	; 0xfcf9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036e:	4630      	mov	r0, r6
 8000370:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037a:	f000 fd9f 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800037e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000382:	a904      	add	r1, sp, #16
 8000384:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	e9cd 8405 	strd	r8, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pin = DIR_Pin;
 800038c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800038e:	f000 fd95 	bl	8000ebc <HAL_GPIO_Init>

}
 8000392:	b008      	add	sp, #32
 8000394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010800 	.word	0x40010800

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003a6:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a8:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ae:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 80003b4:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003bc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003be:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c0:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c6:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c8:	940d      	str	r4, [sp, #52]	; 0x34
 80003ca:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ce:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80003d2:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80003da:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f001 fa7f 	bl	80018e0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e8:	4629      	mov	r1, r5
 80003ea:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ec:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ee:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f0:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f6:	f001 fca1 	bl	8001d3c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003fa:	2212      	movs	r2, #18
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000402:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000404:	9201      	str	r2, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000406:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000408:	f001 fd58 	bl	8001ebc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800040c:	b015      	add	sp, #84	; 0x54
 800040e:	bd30      	pop	{r4, r5, pc}

08000410 <main>:
{
 8000410:	b508      	push	{r3, lr}
  HAL_Init();
 8000412:	f000 f9bb 	bl	800078c <HAL_Init>
  SystemClock_Config();
 8000416:	f7ff ffc5 	bl	80003a4 <SystemClock_Config>
  MX_GPIO_Init();
 800041a:	f7ff ff71 	bl	8000300 <MX_GPIO_Init>
  MX_CAN_Init();
 800041e:	f7ff ff05 	bl	800022c <MX_CAN_Init>
  MX_SPI1_Init();
 8000422:	f000 f80b 	bl	800043c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000426:	f000 f8ed 	bl	8000604 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800042a:	f000 f8cf 	bl	80005cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800042e:	f7ff fe8d 	bl	800014c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000432:	f003 f877 	bl	8003524 <MX_USB_DEVICE_Init>
 8000436:	e7fe      	b.n	8000436 <main+0x26>

08000438 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800043c:	b570      	push	{r4, r5, r6, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043e:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000442:	2200      	movs	r2, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000444:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000448:	2438      	movs	r4, #56	; 0x38
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 800044a:	210a      	movs	r1, #10
  hspi1.Instance = SPI1;
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_SPI1_Init+0x40>)
 800044e:	480c      	ldr	r0, [pc, #48]	; (8000480 <MX_SPI1_Init+0x44>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000450:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi1.Instance = SPI1;
 8000454:	e9c3 0600 	strd	r0, r6, [r3]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000458:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 800045a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800045c:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000460:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000464:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800046a:	f001 fda9 	bl	8001fc0 <HAL_SPI_Init>
 800046e:	b900      	cbnz	r0, 8000472 <MX_SPI1_Init+0x36>
  {
    Error_Handler();
  }

}
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8000476:	f7ff bfdf 	b.w	8000438 <Error_Handler>
 800047a:	bf00      	nop
 800047c:	20000414 	.word	0x20000414
 8000480:	40013000 	.word	0x40013000

08000484 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000484:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8000488:	6802      	ldr	r2, [r0, #0]
 800048a:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <HAL_SPI_MspInit+0x6c>)
{
 800048c:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 800048e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000494:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(spiHandle->Instance==SPI1)
 8000498:	d001      	beq.n	800049e <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800049a:	b006      	add	sp, #24
 800049c:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800049e:	21a0      	movs	r1, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a2:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004a4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80004a8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	4812      	ldr	r0, [pc, #72]	; (80004f4 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80004b0:	619a      	str	r2, [r3, #24]
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80004b8:	9200      	str	r2, [sp, #0]
 80004ba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	f042 0204 	orr.w	r2, r2, #4
 80004c2:	619a      	str	r2, [r3, #24]
 80004c4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004c6:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ce:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d2:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	f000 fcf1 	bl	8000ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004da:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	a902      	add	r1, sp, #8
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004e4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f000 fce9 	bl	8000ebc <HAL_GPIO_Init>
}
 80004ea:	b006      	add	sp, #24
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
 80004ee:	bf00      	nop
 80004f0:	40013000 	.word	0x40013000
 80004f4:	40010800 	.word	0x40010800

080004f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_MspInit+0x3c>)
{
 80004fa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fc:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fe:	490e      	ldr	r1, [pc, #56]	; (8000538 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000500:	f042 0201 	orr.w	r2, r2, #1
 8000504:	619a      	str	r2, [r3, #24]
 8000506:	699a      	ldr	r2, [r3, #24]
 8000508:	f002 0201 	and.w	r2, r2, #1
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	69da      	ldr	r2, [r3, #28]
 8000512:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000516:	61da      	str	r2, [r3, #28]
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	684b      	ldr	r3, [r1, #4]
 8000524:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000528:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052c:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	b002      	add	sp, #8
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000

0800053c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000540:	e7fe      	b.n	8000540 <HardFault_Handler>
 8000542:	bf00      	nop

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	e7fe      	b.n	8000544 <MemManage_Handler>
 8000546:	bf00      	nop

08000548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000548:	e7fe      	b.n	8000548 <BusFault_Handler>
 800054a:	bf00      	nop

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler>
 800054e:	bf00      	nop

08000550 <SVC_Handler>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <DebugMon_Handler>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <PendSV_Handler>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 b928 	b.w	80007b0 <HAL_IncTick>

08000560 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000560:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8000564:	f000 fb2a 	bl	8000bbc <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 800056e:	f000 bee1 	b.w	8001334 <HAL_PCD_IRQHandler>
 8000572:	bf00      	nop
 8000574:	200003ec 	.word	0x200003ec
 8000578:	20001184 	.word	0x20001184

0800057c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800057c:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800057e:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000582:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 800058a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 800058e:	f041 0101 	orr.w	r1, r1, #1
 8000592:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	400a      	ands	r2, r1
 8000598:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005a4:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80005b4:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 80005b6:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005b8:	6084      	str	r4, [r0, #8]
#endif 
}
 80005ba:	bc30      	pop	{r4, r5}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	f8ff0000 	.word	0xf8ff0000
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 115200;
 80005d0:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d4:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_USART1_UART_Init+0x30>)
 80005d8:	4c09      	ldr	r4, [pc, #36]	; (8000600 <MX_USART1_UART_Init+0x34>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005da:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 80005dc:	e9c3 4500 	strd	r4, r5, [r3]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e2:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e6:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ec:	f001 fd68 	bl	80020c0 <HAL_UART_Init>
 80005f0:	b900      	cbnz	r0, 80005f4 <MX_USART1_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 80005f2:	bd38      	pop	{r3, r4, r5, pc}
 80005f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80005f8:	f7ff bf1e 	b.w	8000438 <Error_Handler>
 80005fc:	2000046c 	.word	0x2000046c
 8000600:	40013800 	.word	0x40013800

08000604 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000604:	b538      	push	{r3, r4, r5, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	2200      	movs	r2, #0
  huart2.Init.BaudRate = 115200;
 8000608:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USART2_UART_Init+0x30>)
 8000610:	4c09      	ldr	r4, [pc, #36]	; (8000638 <MX_USART2_UART_Init+0x34>)
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000612:	4618      	mov	r0, r3
  huart2.Instance = USART2;
 8000614:	e9c3 4500 	strd	r4, r5, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061a:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000624:	f001 fd4c 	bl	80020c0 <HAL_UART_Init>
 8000628:	b900      	cbnz	r0, 800062c <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
 800062c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8000630:	f7ff bf02 	b.w	8000438 <Error_Handler>
 8000634:	200004ac 	.word	0x200004ac
 8000638:	40004400 	.word	0x40004400

0800063c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800063c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8000640:	6803      	ldr	r3, [r0, #0]
 8000642:	4a29      	ldr	r2, [pc, #164]	; (80006e8 <HAL_UART_MspInit+0xac>)
{
 8000644:	b088      	sub	sp, #32
  if(uartHandle->Instance==USART1)
 8000646:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800064c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8000650:	d029      	beq.n	80006a6 <HAL_UART_MspInit+0x6a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8000652:	4a26      	ldr	r2, [pc, #152]	; (80006ec <HAL_UART_MspInit+0xb0>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d001      	beq.n	800065c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000658:	b008      	add	sp, #32
 800065a:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800065c:	2104      	movs	r1, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000660:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <HAL_UART_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800066c:	61da      	str	r2, [r3, #28]
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000674:	9202      	str	r2, [sp, #8]
 8000676:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	699a      	ldr	r2, [r3, #24]
 800067a:	430a      	orrs	r2, r1
 800067c:	619a      	str	r2, [r3, #24]
 800067e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000680:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	400b      	ands	r3, r1
 8000684:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f000 fc15 	bl	8000ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000692:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	a904      	add	r1, sp, #16
 8000696:	4817      	ldr	r0, [pc, #92]	; (80006f4 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800069c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f000 fc0d 	bl	8000ebc <HAL_GPIO_Init>
}
 80006a2:	b008      	add	sp, #32
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a6:	f44f 7100 	mov.w	r1, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <HAL_UART_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	4810      	ldr	r0, [pc, #64]	; (80006f4 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b2:	699a      	ldr	r2, [r3, #24]
 80006b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006b8:	619a      	str	r2, [r3, #24]
 80006ba:	699a      	ldr	r2, [r3, #24]
 80006bc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	699a      	ldr	r2, [r3, #24]
 80006c6:	f042 0204 	orr.w	r2, r2, #4
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ce:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f000 fbed 	bl	8000ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e6:	e7d5      	b.n	8000694 <HAL_UART_MspInit+0x58>
 80006e8:	40013800 	.word	0x40013800
 80006ec:	40004400 	.word	0x40004400
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010800 	.word	0x40010800

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006fa:	e003      	b.n	8000704 <LoopCopyDataInit>

080006fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000700:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000702:	3104      	adds	r1, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000708:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800070a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800070c:	d3f6      	bcc.n	80006fc <CopyDataInit>
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000710:	e002      	b.n	8000718 <LoopFillZerobss>

08000712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000714:	f842 3b04 	str.w	r3, [r2], #4

08000718 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800071a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800071c:	d3f9      	bcc.n	8000712 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071e:	f7ff ff2d 	bl	800057c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f003 f901 	bl	8003928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fe73 	bl	8000410 <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r3, =_sidata
 800072c:	08003a04 	.word	0x08003a04
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000734:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000738:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 800073c:	200013f0 	.word	0x200013f0

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	490d      	ldr	r1, [pc, #52]	; (8000780 <HAL_InitTick+0x3c>)
 800074c:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <HAL_InitTick+0x40>)
 800074e:	7809      	ldrb	r1, [r1, #0]
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000756:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	fbb2 f0f3 	udiv	r0, r2, r3
 800075c:	f000 fb96 	bl	8000e8c <HAL_SYSTICK_Config>
 8000760:	b908      	cbnz	r0, 8000766 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	2d0f      	cmp	r5, #15
 8000764:	d901      	bls.n	800076a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000766:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000768:	bd38      	pop	{r3, r4, r5, pc}
 800076a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800076c:	4602      	mov	r2, r0
 800076e:	4629      	mov	r1, r5
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f000 fb46 	bl	8000e04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_InitTick+0x44>)
 800077a:	4620      	mov	r0, r4
 800077c:	601d      	str	r5, [r3, #0]
}
 800077e:	bd38      	pop	{r3, r4, r5, pc}
 8000780:	20000004 	.word	0x20000004
 8000784:	20000000 	.word	0x20000000
 8000788:	20000008 	.word	0x20000008

0800078c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x20>)
{
 800078e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000792:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079a:	f000 fb21 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff ffd0 	bl	8000744 <HAL_InitTick>
  HAL_MspInit();
 80007a4:	f7ff fea8 	bl	80004f8 <HAL_MspInit>
}
 80007a8:	2000      	movs	r0, #0
 80007aa:	bd08      	pop	{r3, pc}
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x10>)
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_IncTick+0x14>)
 80007b4:	6811      	ldr	r1, [r2, #0]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	440b      	add	r3, r1
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	200004ec 	.word	0x200004ec
 80007c4:	20000004 	.word	0x20000004

080007c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007c8:	4b01      	ldr	r3, [pc, #4]	; (80007d0 <HAL_GetTick+0x8>)
 80007ca:	6818      	ldr	r0, [r3, #0]
}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200004ec 	.word	0x200004ec

080007d4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80007d4:	2200      	movs	r2, #0
{ 
 80007d6:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007d8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80007dc:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 80007de:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 80007e0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80007e2:	d05f      	beq.n	80008a4 <HAL_ADC_ConfigChannel+0xd0>
 80007e4:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007e6:	684d      	ldr	r5, [r1, #4]
 80007e8:	6804      	ldr	r4, [r0, #0]
 80007ea:	2d06      	cmp	r5, #6
  __HAL_LOCK(hadc);
 80007ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80007f0:	680a      	ldr	r2, [r1, #0]
 80007f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80007f6:	f04f 061f 	mov.w	r6, #31
  if (sConfig->Rank < 7U)
 80007fa:	d925      	bls.n	8000848 <HAL_ADC_ConfigChannel+0x74>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007fc:	2d0c      	cmp	r5, #12
 80007fe:	d847      	bhi.n	8000890 <HAL_ADC_ConfigChannel+0xbc>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000800:	3b23      	subs	r3, #35	; 0x23
 8000802:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000804:	409e      	lsls	r6, r3
 8000806:	ea25 0506 	bic.w	r5, r5, r6
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	432b      	orrs	r3, r5
 8000810:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000812:	2a09      	cmp	r2, #9
 8000814:	688b      	ldr	r3, [r1, #8]
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000816:	f04f 0607 	mov.w	r6, #7
 800081a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800081e:	d923      	bls.n	8000868 <HAL_ADC_ConfigChannel+0x94>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000820:	391e      	subs	r1, #30
 8000822:	68e5      	ldr	r5, [r4, #12]
 8000824:	408e      	lsls	r6, r1
 8000826:	408b      	lsls	r3, r1
 8000828:	ea25 0106 	bic.w	r1, r5, r6
 800082c:	430b      	orrs	r3, r1
 800082e:	60e3      	str	r3, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000830:	f1a2 0310 	sub.w	r3, r2, #16
 8000834:	2b01      	cmp	r3, #1
 8000836:	d922      	bls.n	800087e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000838:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800083a:	2200      	movs	r2, #0
 800083c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000840:	4618      	mov	r0, r3
 8000842:	b003      	add	sp, #12
 8000844:	bc70      	pop	{r4, r5, r6}
 8000846:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000848:	3b05      	subs	r3, #5
 800084a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800084c:	409e      	lsls	r6, r3
 800084e:	ea25 0506 	bic.w	r5, r5, r6
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000858:	2a09      	cmp	r2, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800085a:	6363      	str	r3, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800085c:	f04f 0607 	mov.w	r6, #7
 8000860:	688b      	ldr	r3, [r1, #8]
 8000862:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000866:	d8db      	bhi.n	8000820 <HAL_ADC_ConfigChannel+0x4c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000868:	6925      	ldr	r5, [r4, #16]
 800086a:	408e      	lsls	r6, r1
 800086c:	408b      	lsls	r3, r1
 800086e:	ea25 0106 	bic.w	r1, r5, r6
 8000872:	430b      	orrs	r3, r1
 8000874:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000876:	f1a2 0310 	sub.w	r3, r2, #16
 800087a:	2b01      	cmp	r3, #1
 800087c:	d8dc      	bhi.n	8000838 <HAL_ADC_ConfigChannel+0x64>
    if (hadc->Instance == ADC1)
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <HAL_ADC_ConfigChannel+0x114>)
 8000880:	429c      	cmp	r4, r3
 8000882:	d014      	beq.n	80008ae <HAL_ADC_ConfigChannel+0xda>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000884:	6a82      	ldr	r2, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000888:	f042 0220 	orr.w	r2, r2, #32
 800088c:	6282      	str	r2, [r0, #40]	; 0x28
 800088e:	e7d4      	b.n	800083a <HAL_ADC_ConfigChannel+0x66>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000890:	3b41      	subs	r3, #65	; 0x41
 8000892:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000894:	409e      	lsls	r6, r3
 8000896:	ea25 0506 	bic.w	r5, r5, r6
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	432b      	orrs	r3, r5
 80008a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008a2:	e7b6      	b.n	8000812 <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80008a4:	2302      	movs	r3, #2
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	b003      	add	sp, #12
 80008aa:	bc70      	pop	{r4, r5, r6}
 80008ac:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008ae:	68a3      	ldr	r3, [r4, #8]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	d4c1      	bmi.n	8000838 <HAL_ADC_ConfigChannel+0x64>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008b4:	68a3      	ldr	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008b6:	2a10      	cmp	r2, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008bc:	60a3      	str	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008be:	d1bb      	bne.n	8000838 <HAL_ADC_ConfigChannel+0x64>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_ADC_ConfigChannel+0x118>)
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <HAL_ADC_ConfigChannel+0x11c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	0c9b      	lsrs	r3, r3, #18
 80008cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80008d4:	9b01      	ldr	r3, [sp, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0ae      	beq.n	8000838 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 80008da:	9b01      	ldr	r3, [sp, #4]
 80008dc:	3b01      	subs	r3, #1
 80008de:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80008e0:	9b01      	ldr	r3, [sp, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f9      	bne.n	80008da <HAL_ADC_ConfigChannel+0x106>
 80008e6:	e7a7      	b.n	8000838 <HAL_ADC_ConfigChannel+0x64>
 80008e8:	40012400 	.word	0x40012400
 80008ec:	20000000 	.word	0x20000000
 80008f0:	431bde83 	.word	0x431bde83

080008f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80008f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80008f6:	6803      	ldr	r3, [r0, #0]
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	07d2      	lsls	r2, r2, #31
 80008fc:	d401      	bmi.n	8000902 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80008fe:	2000      	movs	r0, #0
}
 8000900:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	4604      	mov	r4, r0
 8000906:	f022 0201 	bic.w	r2, r2, #1
 800090a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800090c:	f7ff ff5c 	bl	80007c8 <HAL_GetTick>
 8000910:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000912:	6823      	ldr	r3, [r4, #0]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	07db      	lsls	r3, r3, #31
 8000918:	d5f1      	bpl.n	80008fe <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800091a:	f7ff ff55 	bl	80007c8 <HAL_GetTick>
 800091e:	1b40      	subs	r0, r0, r5
 8000920:	2802      	cmp	r0, #2
 8000922:	d9f6      	bls.n	8000912 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000924:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800092e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000930:	4303      	orrs	r3, r0
 8000932:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8000934:	bd38      	pop	{r3, r4, r5, pc}
 8000936:	bf00      	nop

08000938 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000938:	2800      	cmp	r0, #0
 800093a:	d057      	beq.n	80009ec <HAL_ADC_Init+0xb4>
{
 800093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 800093e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000940:	4604      	mov	r4, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d045      	beq.n	80009d2 <HAL_ADC_Init+0x9a>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000946:	4620      	mov	r0, r4
 8000948:	f7ff ffd4 	bl	80008f4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800094c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800094e:	f013 0310 	ands.w	r3, r3, #16
 8000952:	d138      	bne.n	80009c6 <HAL_ADC_Init+0x8e>
 8000954:	2800      	cmp	r0, #0
 8000956:	d136      	bne.n	80009c6 <HAL_ADC_Init+0x8e>
    ADC_STATE_CLR_SET(hadc->State,
 8000958:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800095a:	69e6      	ldr	r6, [r4, #28]
 800095c:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800095e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000962:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000964:	f022 0202 	bic.w	r2, r2, #2
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000968:	7b27      	ldrb	r7, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800096a:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800096e:	4331      	orrs	r1, r6
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000970:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    ADC_STATE_CLR_SET(hadc->State,
 8000974:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000976:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 800097a:	7d26      	ldrb	r6, [r4, #20]
 800097c:	6822      	ldr	r2, [r4, #0]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800097e:	d037      	beq.n	80009f0 <HAL_ADC_Init+0xb8>
 8000980:	2d01      	cmp	r5, #1
 8000982:	d04f      	beq.n	8000a24 <HAL_ADC_Init+0xec>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000984:	2e01      	cmp	r6, #1
 8000986:	d052      	beq.n	8000a2e <HAL_ADC_Init+0xf6>
      MODIFY_REG(hadc->Instance->CR1,
 8000988:	6855      	ldr	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800098a:	4b3c      	ldr	r3, [pc, #240]	; (8000a7c <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 800098c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000990:	6055      	str	r5, [r2, #4]
  uint32_t tmp_sqr1 = 0U;
 8000992:	4605      	mov	r5, r0
      MODIFY_REG(hadc->Instance->CR2,
 8000994:	6896      	ldr	r6, [r2, #8]
 8000996:	4033      	ands	r3, r6
 8000998:	430b      	orrs	r3, r1
 800099a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hadc->Instance->SQR1,
 800099c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800099e:	4e38      	ldr	r6, [pc, #224]	; (8000a80 <HAL_ADC_Init+0x148>)
    MODIFY_REG(hadc->Instance->SQR1,
 80009a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80009a4:	432b      	orrs	r3, r5
 80009a6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009a8:	6893      	ldr	r3, [r2, #8]
 80009aa:	401e      	ands	r6, r3
 80009ac:	42b1      	cmp	r1, r6
 80009ae:	d030      	beq.n	8000a12 <HAL_ADC_Init+0xda>
      tmp_hal_status = HAL_ERROR;
 80009b0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80009b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009b4:	f023 0312 	bic.w	r3, r3, #18
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009c0:	4303      	orrs	r3, r0
 80009c2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80009c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80009c8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80009d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80009d2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80009d4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80009d8:	f7ff fbe4 	bl	80001a4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009dc:	4620      	mov	r0, r4
 80009de:	f7ff ff89 	bl	80008f4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009e4:	f013 0310 	ands.w	r3, r3, #16
 80009e8:	d1ed      	bne.n	80009c6 <HAL_ADC_Init+0x8e>
 80009ea:	e7b3      	b.n	8000954 <HAL_ADC_Init+0x1c>
    return HAL_ERROR;
 80009ec:	2001      	movs	r0, #1
}
 80009ee:	4770      	bx	lr
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009f0:	2e01      	cmp	r6, #1
 80009f2:	d03f      	beq.n	8000a74 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->CR1,
 80009f4:	6855      	ldr	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 80009f8:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80009fc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8000a00:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a02:	6895      	ldr	r5, [r2, #8]
 8000a04:	402b      	ands	r3, r5
 8000a06:	430b      	orrs	r3, r1
 8000a08:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a0a:	6923      	ldr	r3, [r4, #16]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	051d      	lsls	r5, r3, #20
 8000a10:	e7c4      	b.n	800099c <HAL_ADC_Init+0x64>
      ADC_CLEAR_ERRORCODE(hadc);
 8000a12:	2300      	movs	r3, #0
 8000a14:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000a16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a18:	f023 0303 	bic.w	r3, r3, #3
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a24:	2e01      	cmp	r6, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a26:	bf08      	it	eq
 8000a28:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a2c:	d1e2      	bne.n	80009f4 <HAL_ADC_Init+0xbc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a2e:	b1d7      	cbz	r7, 8000a66 <HAL_ADC_Init+0x12e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a32:	f046 0620 	orr.w	r6, r6, #32
 8000a36:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a3a:	f046 0601 	orr.w	r6, r6, #1
 8000a3e:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8000a40:	6857      	ldr	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a42:	4e0e      	ldr	r6, [pc, #56]	; (8000a7c <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 8000a44:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8000a48:	433b      	orrs	r3, r7
 8000a4a:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a4c:	6893      	ldr	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a4e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 8000a52:	ea06 0603 	and.w	r6, r6, r3
 8000a56:	ea46 0601 	orr.w	r6, r6, r1
 8000a5a:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a5c:	d0d5      	beq.n	8000a0a <HAL_ADC_Init+0xd2>
 8000a5e:	2d01      	cmp	r5, #1
 8000a60:	d0d3      	beq.n	8000a0a <HAL_ADC_Init+0xd2>
  uint32_t tmp_sqr1 = 0U;
 8000a62:	2500      	movs	r5, #0
 8000a64:	e79a      	b.n	800099c <HAL_ADC_Init+0x64>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a66:	69a6      	ldr	r6, [r4, #24]
 8000a68:	3e01      	subs	r6, #1
 8000a6a:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8000a6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a72:	e7e5      	b.n	8000a40 <HAL_ADC_Init+0x108>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a74:	462b      	mov	r3, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a76:	2f00      	cmp	r7, #0
 8000a78:	d1da      	bne.n	8000a30 <HAL_ADC_Init+0xf8>
 8000a7a:	e7f4      	b.n	8000a66 <HAL_ADC_Init+0x12e>
 8000a7c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a80:	ff1f0efe 	.word	0xff1f0efe

08000a84 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d07d      	beq.n	8000b84 <HAL_CAN_Init+0x100>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a88:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d074      	beq.n	8000b7e <HAL_CAN_Init+0xfa>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a94:	6822      	ldr	r2, [r4, #0]
 8000a96:	6813      	ldr	r3, [r2, #0]
 8000a98:	f023 0302 	bic.w	r3, r3, #2
 8000a9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a9e:	f7ff fe93 	bl	80007c8 <HAL_GetTick>
 8000aa2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aa4:	e004      	b.n	8000ab0 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aa6:	f7ff fe8f 	bl	80007c8 <HAL_GetTick>
 8000aaa:	1b40      	subs	r0, r0, r5
 8000aac:	280a      	cmp	r0, #10
 8000aae:	d85d      	bhi.n	8000b6c <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	0791      	lsls	r1, r2, #30
 8000ab6:	d4f6      	bmi.n	8000aa6 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	f042 0201 	orr.w	r2, r2, #1
 8000abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac0:	f7ff fe82 	bl	80007c8 <HAL_GetTick>
 8000ac4:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ac6:	e004      	b.n	8000ad2 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ac8:	f7ff fe7e 	bl	80007c8 <HAL_GetTick>
 8000acc:	1b40      	subs	r0, r0, r5
 8000ace:	280a      	cmp	r0, #10
 8000ad0:	d84c      	bhi.n	8000b6c <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	07d2      	lsls	r2, r2, #31
 8000ad8:	d5f6      	bpl.n	8000ac8 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ada:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000adc:	2500      	movs	r5, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ade:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ae0:	681a      	ldr	r2, [r3, #0]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ae2:	f04f 0601 	mov.w	r6, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ae6:	bf0c      	ite	eq
 8000ae8:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aec:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000af0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000af2:	7e62      	ldrb	r2, [r4, #25]
 8000af4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	bf0c      	ite	eq
 8000afa:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000afe:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000b02:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b04:	7ea2      	ldrb	r2, [r4, #26]
 8000b06:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	bf0c      	ite	eq
 8000b0c:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b10:	f022 0220 	bicne.w	r2, r2, #32
 8000b14:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b16:	7ee2      	ldrb	r2, [r4, #27]
 8000b18:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	bf0c      	ite	eq
 8000b1e:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b22:	f042 0210 	orrne.w	r2, r2, #16
 8000b26:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b28:	7f22      	ldrb	r2, [r4, #28]
 8000b2a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	bf0c      	ite	eq
 8000b30:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b34:	f022 0208 	bicne.w	r2, r2, #8
 8000b38:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b3a:	7f62      	ldrb	r2, [r4, #29]
 8000b3c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	bf0c      	ite	eq
 8000b42:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b46:	f022 0204 	bicne.w	r2, r2, #4
 8000b4a:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b4c:	6921      	ldr	r1, [r4, #16]
 8000b4e:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8000b52:	4302      	orrs	r2, r0
 8000b54:	430a      	orrs	r2, r1
 8000b56:	6960      	ldr	r0, [r4, #20]
 8000b58:	6861      	ldr	r1, [r4, #4]
 8000b5a:	4302      	orrs	r2, r0
 8000b5c:	3901      	subs	r1, #1
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8000b62:	4628      	mov	r0, r5
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b64:	6265      	str	r5, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000b66:	f884 6020 	strb.w	r6, [r4, #32]
}
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b6c:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8000b70:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b76:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b78:	f884 2020 	strb.w	r2, [r4, #32]
}
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8000b7e:	f7ff fb73 	bl	8000268 <HAL_CAN_MspInit>
 8000b82:	e787      	b.n	8000a94 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8000b84:	2001      	movs	r0, #1
}
 8000b86:	4770      	bx	lr

08000b88 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <HAL_CAN_TxMailbox1CompleteCallback>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <HAL_CAN_TxMailbox0AbortCallback>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <HAL_CAN_TxMailbox1AbortCallback>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <HAL_CAN_TxMailbox2AbortCallback>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <HAL_CAN_RxFifo0FullCallback>:
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <HAL_CAN_RxFifo1FullCallback>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <HAL_CAN_SleepCallback>:
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <HAL_CAN_ErrorCallback>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000bc0:	6803      	ldr	r3, [r0, #0]
{
 8000bc2:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000bc4:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000bc6:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000bca:	f014 0601 	ands.w	r6, r4, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bce:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000bd0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000bd4:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000bd8:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000bdc:	d020      	beq.n	8000c20 <HAL_CAN_IRQHandler+0x64>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000bde:	f017 0601 	ands.w	r6, r7, #1
 8000be2:	d00d      	beq.n	8000c00 <HAL_CAN_IRQHandler+0x44>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000be4:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000be6:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000be8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000bea:	f100 80c7 	bmi.w	8000d7c <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000bee:	077a      	lsls	r2, r7, #29
 8000bf0:	f100 80c8 	bmi.w	8000d84 <HAL_CAN_IRQHandler+0x1c8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000bf4:	f017 0608 	ands.w	r6, r7, #8
 8000bf8:	f000 80de 	beq.w	8000db8 <HAL_CAN_IRQHandler+0x1fc>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000bfc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c00:	05fb      	lsls	r3, r7, #23
 8000c02:	d50b      	bpl.n	8000c1c <HAL_CAN_IRQHandler+0x60>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c08:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c0a:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c0c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c0e:	f100 80b1 	bmi.w	8000d74 <HAL_CAN_IRQHandler+0x1b8>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000c12:	0579      	lsls	r1, r7, #21
 8000c14:	f140 80be 	bpl.w	8000d94 <HAL_CAN_IRQHandler+0x1d8>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c18:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c1c:	03fb      	lsls	r3, r7, #15
 8000c1e:	d476      	bmi.n	8000d0e <HAL_CAN_IRQHandler+0x152>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c20:	0723      	lsls	r3, r4, #28
 8000c22:	d502      	bpl.n	8000c2a <HAL_CAN_IRQHandler+0x6e>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c24:	f01b 0f10 	tst.w	fp, #16
 8000c28:	d16b      	bne.n	8000d02 <HAL_CAN_IRQHandler+0x146>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c2a:	0767      	lsls	r7, r4, #29
 8000c2c:	d503      	bpl.n	8000c36 <HAL_CAN_IRQHandler+0x7a>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c2e:	f01b 0f08 	tst.w	fp, #8
 8000c32:	f040 8094 	bne.w	8000d5e <HAL_CAN_IRQHandler+0x1a2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c36:	07a0      	lsls	r0, r4, #30
 8000c38:	d503      	bpl.n	8000c42 <HAL_CAN_IRQHandler+0x86>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c3a:	682b      	ldr	r3, [r5, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	0799      	lsls	r1, r3, #30
 8000c40:	d177      	bne.n	8000d32 <HAL_CAN_IRQHandler+0x176>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c42:	0662      	lsls	r2, r4, #25
 8000c44:	d502      	bpl.n	8000c4c <HAL_CAN_IRQHandler+0x90>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c46:	f019 0f10 	tst.w	r9, #16
 8000c4a:	d154      	bne.n	8000cf6 <HAL_CAN_IRQHandler+0x13a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c4c:	06a3      	lsls	r3, r4, #26
 8000c4e:	d502      	bpl.n	8000c56 <HAL_CAN_IRQHandler+0x9a>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c50:	f019 0f08 	tst.w	r9, #8
 8000c54:	d166      	bne.n	8000d24 <HAL_CAN_IRQHandler+0x168>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000c56:	06e7      	lsls	r7, r4, #27
 8000c58:	d503      	bpl.n	8000c62 <HAL_CAN_IRQHandler+0xa6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	0798      	lsls	r0, r3, #30
 8000c60:	d16b      	bne.n	8000d3a <HAL_CAN_IRQHandler+0x17e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000c62:	03a1      	lsls	r1, r4, #14
 8000c64:	d502      	bpl.n	8000c6c <HAL_CAN_IRQHandler+0xb0>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000c66:	f018 0f10 	tst.w	r8, #16
 8000c6a:	d16a      	bne.n	8000d42 <HAL_CAN_IRQHandler+0x186>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000c6c:	03e2      	lsls	r2, r4, #15
 8000c6e:	d502      	bpl.n	8000c76 <HAL_CAN_IRQHandler+0xba>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000c70:	f018 0f08 	tst.w	r8, #8
 8000c74:	d16c      	bne.n	8000d50 <HAL_CAN_IRQHandler+0x194>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000c76:	0423      	lsls	r3, r4, #16
 8000c78:	d534      	bpl.n	8000ce4 <HAL_CAN_IRQHandler+0x128>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000c7a:	f018 0f04 	tst.w	r8, #4
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	d02e      	beq.n	8000ce0 <HAL_CAN_IRQHandler+0x124>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000c82:	05e7      	lsls	r7, r4, #23
 8000c84:	d504      	bpl.n	8000c90 <HAL_CAN_IRQHandler+0xd4>
 8000c86:	f01a 0f01 	tst.w	sl, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000c8a:	bf18      	it	ne
 8000c8c:	f046 0601 	orrne.w	r6, r6, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000c90:	05a0      	lsls	r0, r4, #22
 8000c92:	d504      	bpl.n	8000c9e <HAL_CAN_IRQHandler+0xe2>
 8000c94:	f01a 0f02 	tst.w	sl, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000c98:	bf18      	it	ne
 8000c9a:	f046 0602 	orrne.w	r6, r6, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c9e:	0561      	lsls	r1, r4, #21
 8000ca0:	d504      	bpl.n	8000cac <HAL_CAN_IRQHandler+0xf0>
 8000ca2:	f01a 0f04 	tst.w	sl, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ca6:	bf18      	it	ne
 8000ca8:	f046 0604 	orrne.w	r6, r6, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000cac:	0522      	lsls	r2, r4, #20
 8000cae:	d517      	bpl.n	8000ce0 <HAL_CAN_IRQHandler+0x124>
 8000cb0:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8000cb4:	d014      	beq.n	8000ce0 <HAL_CAN_IRQHandler+0x124>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000cb6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8000cba:	f000 8087 	beq.w	8000dcc <HAL_CAN_IRQHandler+0x210>
 8000cbe:	d96e      	bls.n	8000d9e <HAL_CAN_IRQHandler+0x1e2>
 8000cc0:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8000cc4:	d07f      	beq.n	8000dc6 <HAL_CAN_IRQHandler+0x20a>
 8000cc6:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000cca:	f000 8082 	beq.w	8000dd2 <HAL_CAN_IRQHandler+0x216>
 8000cce:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8000cd2:	d101      	bne.n	8000cd8 <HAL_CAN_IRQHandler+0x11c>
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
            break;
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 8000cd4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000cd8:	699a      	ldr	r2, [r3, #24]
 8000cda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000cde:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000ce4:	b12e      	cbz	r6, 8000cf2 <HAL_CAN_IRQHandler+0x136>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000ce8:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000cea:	431e      	orrs	r6, r3
 8000cec:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000cee:	f7ff ff63 	bl	8000bb8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000cf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	682b      	ldr	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000cfa:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	e7a4      	b.n	8000c4c <HAL_CAN_IRQHandler+0x90>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d02:	2210      	movs	r2, #16
 8000d04:	682b      	ldr	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000d06:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	e78d      	b.n	8000c2a <HAL_CAN_IRQHandler+0x6e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d12:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d14:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d16:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d18:	d428      	bmi.n	8000d6c <HAL_CAN_IRQHandler+0x1b0>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d1a:	0379      	lsls	r1, r7, #13
 8000d1c:	d535      	bpl.n	8000d8a <HAL_CAN_IRQHandler+0x1ce>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000d1e:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8000d22:	e77d      	b.n	8000c20 <HAL_CAN_IRQHandler+0x64>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d24:	2208      	movs	r2, #8
 8000d26:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d28:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d2a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d2c:	f7ff ff3e 	bl	8000bac <HAL_CAN_RxFifo1FullCallback>
 8000d30:	e791      	b.n	8000c56 <HAL_CAN_IRQHandler+0x9a>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d32:	4628      	mov	r0, r5
 8000d34:	f7ff ff34 	bl	8000ba0 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000d38:	e783      	b.n	8000c42 <HAL_CAN_IRQHandler+0x86>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f7ff ff34 	bl	8000ba8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000d40:	e78f      	b.n	8000c62 <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000d42:	2210      	movs	r2, #16
 8000d44:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8000d46:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000d48:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000d4a:	f7ff ff31 	bl	8000bb0 <HAL_CAN_SleepCallback>
 8000d4e:	e78d      	b.n	8000c6c <HAL_CAN_IRQHandler+0xb0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d50:	2208      	movs	r2, #8
 8000d52:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d54:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d56:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d58:	f7ff ff2c 	bl	8000bb4 <HAL_CAN_WakeUpFromRxMsgCallback>
 8000d5c:	e78b      	b.n	8000c76 <HAL_CAN_IRQHandler+0xba>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d5e:	2208      	movs	r2, #8
 8000d60:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d62:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d64:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d66:	f7ff ff1d 	bl	8000ba4 <HAL_CAN_RxFifo0FullCallback>
 8000d6a:	e764      	b.n	8000c36 <HAL_CAN_IRQHandler+0x7a>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	f7ff ff0f 	bl	8000b90 <HAL_CAN_TxMailbox2CompleteCallback>
 8000d72:	e755      	b.n	8000c20 <HAL_CAN_IRQHandler+0x64>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d74:	4628      	mov	r0, r5
 8000d76:	f7ff ff09 	bl	8000b8c <HAL_CAN_TxMailbox1CompleteCallback>
 8000d7a:	e74f      	b.n	8000c1c <HAL_CAN_IRQHandler+0x60>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d7c:	f7ff ff04 	bl	8000b88 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d80:	2600      	movs	r6, #0
 8000d82:	e73d      	b.n	8000c00 <HAL_CAN_IRQHandler+0x44>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d84:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8000d88:	e73a      	b.n	8000c00 <HAL_CAN_IRQHandler+0x44>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000d8a:	033a      	lsls	r2, r7, #12
 8000d8c:	d510      	bpl.n	8000db0 <HAL_CAN_IRQHandler+0x1f4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000d8e:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000d92:	e745      	b.n	8000c20 <HAL_CAN_IRQHandler+0x64>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d94:	053a      	lsls	r2, r7, #20
 8000d96:	d512      	bpl.n	8000dbe <HAL_CAN_IRQHandler+0x202>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d98:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000d9c:	e73e      	b.n	8000c1c <HAL_CAN_IRQHandler+0x60>
        switch (esrflags & CAN_ESR_LEC)
 8000d9e:	f1ba 0f10 	cmp.w	sl, #16
 8000da2:	d019      	beq.n	8000dd8 <HAL_CAN_IRQHandler+0x21c>
 8000da4:	f1ba 0f20 	cmp.w	sl, #32
 8000da8:	d196      	bne.n	8000cd8 <HAL_CAN_IRQHandler+0x11c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000daa:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000dae:	e793      	b.n	8000cd8 <HAL_CAN_IRQHandler+0x11c>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000db0:	4628      	mov	r0, r5
 8000db2:	f7ff fef3 	bl	8000b9c <HAL_CAN_TxMailbox2AbortCallback>
 8000db6:	e733      	b.n	8000c20 <HAL_CAN_IRQHandler+0x64>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000db8:	f7ff feec 	bl	8000b94 <HAL_CAN_TxMailbox0AbortCallback>
 8000dbc:	e720      	b.n	8000c00 <HAL_CAN_IRQHandler+0x44>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f7ff feea 	bl	8000b98 <HAL_CAN_TxMailbox1AbortCallback>
 8000dc4:	e72a      	b.n	8000c1c <HAL_CAN_IRQHandler+0x60>
            errorcode |= HAL_CAN_ERROR_BD;
 8000dc6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8000dca:	e785      	b.n	8000cd8 <HAL_CAN_IRQHandler+0x11c>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000dcc:	f046 0620 	orr.w	r6, r6, #32
            break;
 8000dd0:	e782      	b.n	8000cd8 <HAL_CAN_IRQHandler+0x11c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000dd2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8000dd6:	e77f      	b.n	8000cd8 <HAL_CAN_IRQHandler+0x11c>
            errorcode |= HAL_CAN_ERROR_STF;
 8000dd8:	f046 0608 	orr.w	r6, r6, #8
            break;
 8000ddc:	e77c      	b.n	8000cd8 <HAL_CAN_IRQHandler+0x11c>
 8000dde:	bf00      	nop

08000de0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	400b      	ands	r3, r1
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000df8:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dfa:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b430      	push	{r4, r5}
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0e:	f1c3 0507 	rsb	r5, r3, #7
 8000e12:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e14:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	bf28      	it	cs
 8000e1a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1c:	2c06      	cmp	r4, #6
 8000e1e:	d919      	bls.n	8000e54 <HAL_NVIC_SetPriority+0x50>
 8000e20:	f04f 34ff 	mov.w	r4, #4294967295
 8000e24:	3b03      	subs	r3, #3
 8000e26:	409c      	lsls	r4, r3
 8000e28:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	40aa      	lsls	r2, r5
 8000e32:	ea21 0102 	bic.w	r1, r1, r2
 8000e36:	fa01 f203 	lsl.w	r2, r1, r3
 8000e3a:	4322      	orrs	r2, r4
 8000e3c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	db0a      	blt.n	8000e5a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e48:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e4c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e50:	bc30      	pop	{r4, r5}
 8000e52:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e54:	2400      	movs	r4, #0
 8000e56:	4623      	mov	r3, r4
 8000e58:	e7e8      	b.n	8000e2c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <HAL_NVIC_SetPriority+0x68>)
 8000e5c:	f000 000f 	and.w	r0, r0, #15
 8000e60:	4403      	add	r3, r0
 8000e62:	761a      	strb	r2, [r3, #24]
 8000e64:	bc30      	pop	{r4, r5}
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	e000ecfc 	.word	0xe000ecfc

08000e70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e70:	2800      	cmp	r0, #0
 8000e72:	db07      	blt.n	8000e84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e74:	2301      	movs	r3, #1
 8000e76:	f000 011f 	and.w	r1, r0, #31
 8000e7a:	4a03      	ldr	r2, [pc, #12]	; (8000e88 <HAL_NVIC_EnableIRQ+0x18>)
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	0940      	lsrs	r0, r0, #5
 8000e80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e92:	d20d      	bcs.n	8000eb0 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e94:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	4c06      	ldr	r4, [pc, #24]	; (8000eb8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea6:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000ea8:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eaa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eac:	6019      	str	r1, [r3, #0]
 8000eae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e010 	.word	0xe000e010
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebc:	680a      	ldr	r2, [r1, #0]
 8000ebe:	2a00      	cmp	r2, #0
 8000ec0:	f000 80dc 	beq.w	800107c <HAL_GPIO_Init+0x1c0>
{
 8000ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8000ec8:	f04f 0a00 	mov.w	sl, #0
{
 8000ecc:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8000ece:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed0:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80010a4 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed4:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80010a8 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed8:	4f6d      	ldr	r7, [pc, #436]	; (8001090 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eda:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80010ac <HAL_GPIO_Init+0x1f0>
 8000ede:	e003      	b.n	8000ee8 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000ee0:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	fa32 f305 	lsrs.w	r3, r2, r5
 8000ee6:	d079      	beq.n	8000fdc <HAL_GPIO_Init+0x120>
    ioposition = (0x01uL << position);
 8000ee8:	2301      	movs	r3, #1
 8000eea:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eec:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8000ef0:	42a3      	cmp	r3, r4
 8000ef2:	d1f5      	bne.n	8000ee0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000ef4:	684a      	ldr	r2, [r1, #4]
 8000ef6:	2a12      	cmp	r2, #18
 8000ef8:	f000 809f 	beq.w	800103a <HAL_GPIO_Init+0x17e>
 8000efc:	f200 8088 	bhi.w	8001010 <HAL_GPIO_Init+0x154>
 8000f00:	2a02      	cmp	r2, #2
 8000f02:	f000 809e 	beq.w	8001042 <HAL_GPIO_Init+0x186>
 8000f06:	d97d      	bls.n	8001004 <HAL_GPIO_Init+0x148>
 8000f08:	2a03      	cmp	r2, #3
 8000f0a:	d06a      	beq.n	8000fe2 <HAL_GPIO_Init+0x126>
 8000f0c:	2a11      	cmp	r2, #17
 8000f0e:	d102      	bne.n	8000f16 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f10:	68cb      	ldr	r3, [r1, #12]
 8000f12:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f16:	2cff      	cmp	r4, #255	; 0xff
 8000f18:	d867      	bhi.n	8000fea <HAL_GPIO_Init+0x12e>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	6803      	ldr	r3, [r0, #0]
 8000f1e:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f20:	260f      	movs	r6, #15
 8000f22:	fa06 fb02 	lsl.w	fp, r6, r2
 8000f26:	ea23 030b 	bic.w	r3, r3, fp
 8000f2a:	fa0a f202 	lsl.w	r2, sl, r2
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f34:	684a      	ldr	r2, [r1, #4]
 8000f36:	00d3      	lsls	r3, r2, #3
 8000f38:	d562      	bpl.n	8001000 <HAL_GPIO_Init+0x144>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8000f3e:	f025 0303 	bic.w	r3, r5, #3
 8000f42:	f049 0901 	orr.w	r9, r9, #1
 8000f46:	f8cc 9018 	str.w	r9, [ip, #24]
 8000f4a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8000f4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f52:	f009 0901 	and.w	r9, r9, #1
 8000f56:	f8cd 900c 	str.w	r9, [sp, #12]
 8000f5a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f5e:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f62:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f66:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000f6a:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f6e:	fa06 f609 	lsl.w	r6, r6, r9
 8000f72:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f76:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f78:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f7a:	d011      	beq.n	8000fa0 <HAL_GPIO_Init+0xe4>
 8000f7c:	4540      	cmp	r0, r8
 8000f7e:	d064      	beq.n	800104a <HAL_GPIO_Init+0x18e>
 8000f80:	4e44      	ldr	r6, [pc, #272]	; (8001094 <HAL_GPIO_Init+0x1d8>)
 8000f82:	42b0      	cmp	r0, r6
 8000f84:	d07b      	beq.n	800107e <HAL_GPIO_Init+0x1c2>
 8000f86:	4e44      	ldr	r6, [pc, #272]	; (8001098 <HAL_GPIO_Init+0x1dc>)
 8000f88:	42b0      	cmp	r0, r6
 8000f8a:	bf0c      	ite	eq
 8000f8c:	f04f 0b03 	moveq.w	fp, #3
 8000f90:	f04f 0b04 	movne.w	fp, #4
 8000f94:	9e01      	ldr	r6, [sp, #4]
 8000f96:	fa0b f909 	lsl.w	r9, fp, r9
 8000f9a:	ea46 0609 	orr.w	r6, r6, r9
 8000f9e:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fa0:	9e01      	ldr	r6, [sp, #4]
 8000fa2:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa4:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa6:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa8:	bf4c      	ite	mi
 8000faa:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fac:	43a3      	bicpl	r3, r4
 8000fae:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb0:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb2:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb4:	bf4c      	ite	mi
 8000fb6:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb8:	43a3      	bicpl	r3, r4
 8000fba:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbe:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fc0:	bf4c      	ite	mi
 8000fc2:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fc4:	43a3      	bicpl	r3, r4
 8000fc6:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc8:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fcc:	d515      	bpl.n	8000ffa <HAL_GPIO_Init+0x13e>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fce:	431c      	orrs	r4, r3
 8000fd0:	60fc      	str	r4, [r7, #12]
 8000fd2:	680a      	ldr	r2, [r1, #0]
	position++;
 8000fd4:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd6:	fa32 f305 	lsrs.w	r3, r2, r5
 8000fda:	d185      	bne.n	8000ee8 <HAL_GPIO_Init+0x2c>
  }
}
 8000fdc:	b005      	add	sp, #20
 8000fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fe2:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fe4:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fe8:	d997      	bls.n	8000f1a <HAL_GPIO_Init+0x5e>
 8000fea:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8000fee:	3a08      	subs	r2, #8
 8000ff0:	6843      	ldr	r3, [r0, #4]
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	f100 0904 	add.w	r9, r0, #4
 8000ff8:	e792      	b.n	8000f20 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ffa:	ea23 0404 	bic.w	r4, r3, r4
 8000ffe:	60fc      	str	r4, [r7, #12]
 8001000:	680a      	ldr	r2, [r1, #0]
 8001002:	e76d      	b.n	8000ee0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001004:	b1a2      	cbz	r2, 8001030 <HAL_GPIO_Init+0x174>
 8001006:	2a01      	cmp	r2, #1
 8001008:	d185      	bne.n	8000f16 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800100a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800100e:	e782      	b.n	8000f16 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8001010:	4e22      	ldr	r6, [pc, #136]	; (800109c <HAL_GPIO_Init+0x1e0>)
 8001012:	42b2      	cmp	r2, r6
 8001014:	d00c      	beq.n	8001030 <HAL_GPIO_Init+0x174>
 8001016:	d920      	bls.n	800105a <HAL_GPIO_Init+0x19e>
 8001018:	4e21      	ldr	r6, [pc, #132]	; (80010a0 <HAL_GPIO_Init+0x1e4>)
 800101a:	42b2      	cmp	r2, r6
 800101c:	d008      	beq.n	8001030 <HAL_GPIO_Init+0x174>
 800101e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001022:	42b2      	cmp	r2, r6
 8001024:	d004      	beq.n	8001030 <HAL_GPIO_Init+0x174>
 8001026:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800102a:	42b2      	cmp	r2, r6
 800102c:	f47f af73 	bne.w	8000f16 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001030:	688a      	ldr	r2, [r1, #8]
 8001032:	b9e2      	cbnz	r2, 800106e <HAL_GPIO_Init+0x1b2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001034:	f04f 0a04 	mov.w	sl, #4
 8001038:	e76d      	b.n	8000f16 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800103a:	68cb      	ldr	r3, [r1, #12]
 800103c:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8001040:	e769      	b.n	8000f16 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001042:	68cb      	ldr	r3, [r1, #12]
 8001044:	f103 0a08 	add.w	sl, r3, #8
          break;
 8001048:	e765      	b.n	8000f16 <HAL_GPIO_Init+0x5a>
 800104a:	f04f 0b01 	mov.w	fp, #1
 800104e:	fa0b f909 	lsl.w	r9, fp, r9
 8001052:	ea46 0609 	orr.w	r6, r6, r9
 8001056:	9601      	str	r6, [sp, #4]
 8001058:	e7a2      	b.n	8000fa0 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 800105a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800105e:	42b2      	cmp	r2, r6
 8001060:	d0e6      	beq.n	8001030 <HAL_GPIO_Init+0x174>
 8001062:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001066:	42b2      	cmp	r2, r6
 8001068:	f47f af55 	bne.w	8000f16 <HAL_GPIO_Init+0x5a>
 800106c:	e7e0      	b.n	8001030 <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800106e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001070:	bf0c      	ite	eq
 8001072:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8001074:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001076:	f04f 0a08 	mov.w	sl, #8
 800107a:	e74c      	b.n	8000f16 <HAL_GPIO_Init+0x5a>
 800107c:	4770      	bx	lr
 800107e:	f04f 0b02 	mov.w	fp, #2
 8001082:	9e01      	ldr	r6, [sp, #4]
 8001084:	fa0b f909 	lsl.w	r9, fp, r9
 8001088:	ea46 0609 	orr.w	r6, r6, r9
 800108c:	9601      	str	r6, [sp, #4]
 800108e:	e787      	b.n	8000fa0 <HAL_GPIO_Init+0xe4>
 8001090:	40010400 	.word	0x40010400
 8001094:	40011000 	.word	0x40011000
 8001098:	40011400 	.word	0x40011400
 800109c:	10210000 	.word	0x10210000
 80010a0:	10310000 	.word	0x10310000
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010800 	.word	0x40010800
 80010ac:	40010c00 	.word	0x40010c00

080010b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b0:	b902      	cbnz	r2, 80010b4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010b2:	0409      	lsls	r1, r1, #16
 80010b4:	6101      	str	r1, [r0, #16]
  }
}
 80010b6:	4770      	bx	lr

080010b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010bc:	2800      	cmp	r0, #0
 80010be:	d074      	beq.n	80011aa <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010c0:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 80010c4:	4604      	mov	r4, r0
 80010c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d068      	beq.n	80011a0 <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010ce:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d0:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 80010d6:	6820      	ldr	r0, [r4, #0]
 80010d8:	f001 f834 	bl	8002144 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010dc:	f856 cb10 	ldr.w	ip, [r6], #16
 80010e0:	466d      	mov	r5, sp
 80010e2:	4637      	mov	r7, r6
 80010e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	1d27      	adds	r7, r4, #4
 80010ec:	602b      	str	r3, [r5, #0]
 80010ee:	4660      	mov	r0, ip
 80010f0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80010f4:	f001 f814 	bl	8002120 <USB_CoreInit>
 80010f8:	4605      	mov	r5, r0
 80010fa:	b130      	cbz	r0, 800110a <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010fc:	2302      	movs	r3, #2
    return HAL_ERROR;
 80010fe:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001100:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001104:	4628      	mov	r0, r5
 8001106:	b007      	add	sp, #28
 8001108:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800110a:	4601      	mov	r1, r0
 800110c:	6820      	ldr	r0, [r4, #0]
 800110e:	f001 f823 	bl	8002158 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001112:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001116:	f1bc 0f00 	cmp.w	ip, #0
 800111a:	d029      	beq.n	8001170 <HAL_PCD_Init+0xb8>
 800111c:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 800111e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001122:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 8001124:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001128:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 800112a:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800112e:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	b2e8      	uxtb	r0, r5
 8001132:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 8001134:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001138:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 800113c:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001140:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001142:	d3ef      	bcc.n	8001124 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001144:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8001146:	4619      	mov	r1, r3
 8001148:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114c:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 800114e:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 8001152:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001156:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001158:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115a:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 800115c:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001160:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001164:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001168:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800116c:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116e:	d3eb      	bcc.n	8001148 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001170:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001172:	466d      	mov	r5, sp
 8001174:	f8d4 c000 	ldr.w	ip, [r4]
 8001178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117a:	6833      	ldr	r3, [r6, #0]
 800117c:	4660      	mov	r0, ip
 800117e:	602b      	str	r3, [r5, #0]
 8001180:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001184:	f000 ffea 	bl	800215c <USB_DevInit>
 8001188:	4605      	mov	r5, r0
 800118a:	2800      	cmp	r0, #0
 800118c:	d1b6      	bne.n	80010fc <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 800118e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001190:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8001194:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8001196:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800119a:	f001 fc03 	bl	80029a4 <USB_DevDisconnect>
  return HAL_OK;
 800119e:	e7b1      	b.n	8001104 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 80011a0:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 80011a4:	f002 fa90 	bl	80036c8 <HAL_PCD_MspInit>
 80011a8:	e791      	b.n	80010ce <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80011aa:	2501      	movs	r5, #1
}
 80011ac:	4628      	mov	r0, r5
 80011ae:	b007      	add	sp, #28
 80011b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b2:	bf00      	nop

080011b4 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80011b4:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d010      	beq.n	80011de <HAL_PCD_Start+0x2a>
 80011bc:	2101      	movs	r1, #1
{
 80011be:	b510      	push	{r4, lr}
 80011c0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80011c2:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011c6:	f002 fbad 	bl	8003924 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80011ca:	6820      	ldr	r0, [r4, #0]
 80011cc:	f001 fbe8 	bl	80029a0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	f000 ffad 	bl	8002130 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80011dc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80011de:	2002      	movs	r0, #2
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80011e4:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 80011e8:	2a01      	cmp	r2, #1
 80011ea:	d00d      	beq.n	8001208 <HAL_PCD_SetAddress+0x24>
{
 80011ec:	b510      	push	{r4, lr}
 80011ee:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80011f0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80011f2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80011f6:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011fa:	6800      	ldr	r0, [r0, #0]
 80011fc:	f001 fbca 	bl	8002994 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001200:	2000      	movs	r0, #0
 8001202:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001206:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001208:	2002      	movs	r0, #2
}
 800120a:	4770      	bx	lr

0800120c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120e:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001212:	0609      	lsls	r1, r1, #24
 8001214:	ea4f 1445 	mov.w	r4, r5, lsl #5
 8001218:	d41f      	bmi.n	800125a <HAL_PCD_EP_Open+0x4e>
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 800121a:	2700      	movs	r7, #0
 800121c:	1906      	adds	r6, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800121e:	f504 7194 	add.w	r1, r4, #296	; 0x128
    ep->is_in = 0U;
 8001222:	f886 7129 	strb.w	r7, [r6, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001226:	4401      	add	r1, r0

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001228:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800122a:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 800122c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800122e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001230:	b104      	cbz	r4, 8001234 <HAL_PCD_EP_Open+0x28>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001232:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001234:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001236:	bf04      	itt	eq
 8001238:	2300      	moveq	r3, #0
 800123a:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 800123c:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001240:	2b01      	cmp	r3, #1
 8001242:	d012      	beq.n	800126a <HAL_PCD_EP_Open+0x5e>
 8001244:	2301      	movs	r3, #1
 8001246:	4604      	mov	r4, r0
 8001248:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800124c:	6800      	ldr	r0, [r0, #0]
 800124e:	f000 ff9f 	bl	8002190 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001252:	2000      	movs	r0, #0
 8001254:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8001258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 800125a:	2701      	movs	r7, #1
 800125c:	1906      	adds	r6, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800125e:	f104 0128 	add.w	r1, r4, #40	; 0x28
    ep->is_in = 1U;
 8001262:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001266:	4401      	add	r1, r0
 8001268:	e7de      	b.n	8001228 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800126a:	2002      	movs	r0, #2
}
 800126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800126e:	bf00      	nop

08001270 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001270:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001274:	0609      	lsls	r1, r1, #24
{
 8001276:	b510      	push	{r4, lr}
 8001278:	ea4f 1342 	mov.w	r3, r2, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 800127c:	d416      	bmi.n	80012ac <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 800127e:	2400      	movs	r4, #0
 8001280:	18c1      	adds	r1, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001282:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 8001286:	f881 4129 	strb.w	r4, [r1, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800128a:	18c1      	adds	r1, r0, r3
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800128c:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 800128e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001292:	2b01      	cmp	r3, #1
 8001294:	d015      	beq.n	80012c2 <HAL_PCD_EP_Close+0x52>
 8001296:	2301      	movs	r3, #1
 8001298:	4604      	mov	r4, r0
 800129a:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800129e:	6800      	ldr	r0, [r0, #0]
 80012a0:	f001 f8fe 	bl	80024a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80012aa:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 80012ac:	2401      	movs	r4, #1
 80012ae:	18c1      	adds	r1, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b0:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 80012b2:	f881 4029 	strb.w	r4, [r1, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b6:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012b8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80012ba:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d1e9      	bne.n	8001296 <HAL_PCD_EP_Close+0x26>
 80012c2:	2002      	movs	r0, #2
}
 80012c4:	bd10      	pop	{r4, pc}
 80012c6:	bf00      	nop

080012c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012c8:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80012ca:	2600      	movs	r6, #0
 80012cc:	f001 0107 	and.w	r1, r1, #7
 80012d0:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80012d2:	1944      	adds	r4, r0, r5
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012d4:	f505 7594 	add.w	r5, r5, #296	; 0x128
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d8:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep->xfer_buff = pBuf;
 80012dc:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012e0:	1941      	adds	r1, r0, r5
  ep->xfer_len = len;
 80012e2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012e6:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 80012e8:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80012ec:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012f0:	f001 f9ac 	bl	800264c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80012f4:	4630      	mov	r0, r6
 80012f6:	bd70      	pop	{r4, r5, r6, pc}

080012f8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80012f8:	f001 0107 	and.w	r1, r1, #7
 80012fc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001300:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop

08001308 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800130a:	2600      	movs	r6, #0
  ep->is_in = 1U;
 800130c:	2701      	movs	r7, #1
 800130e:	f001 0107 	and.w	r1, r1, #7
 8001312:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8001314:	1944      	adds	r4, r0, r5
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001316:	3528      	adds	r5, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 8001318:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_len = len;
 800131c:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001320:	1941      	adds	r1, r0, r5
 8001322:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 1U;
 8001324:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 8001328:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800132a:	f001 f98f 	bl	800264c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800132e:	4630      	mov	r0, r6
 8001330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001332:	bf00      	nop

08001334 <HAL_PCD_IRQHandler>:
{
 8001334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001338:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800133a:	6800      	ldr	r0, [r0, #0]
 800133c:	f001 fb34 	bl	80029a8 <USB_ReadInterrupts>
 8001340:	0401      	lsls	r1, r0, #16
 8001342:	6822      	ldr	r2, [r4, #0]
 8001344:	d443      	bmi.n	80013ce <HAL_PCD_IRQHandler+0x9a>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001346:	4610      	mov	r0, r2
 8001348:	f001 fb2e 	bl	80029a8 <USB_ReadInterrupts>
 800134c:	0546      	lsls	r6, r0, #21
 800134e:	f100 8171 	bmi.w	8001634 <HAL_PCD_IRQHandler+0x300>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001352:	6820      	ldr	r0, [r4, #0]
 8001354:	f001 fb28 	bl	80029a8 <USB_ReadInterrupts>
 8001358:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800135c:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800135e:	d007      	beq.n	8001370 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001360:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001368:	041b      	lsls	r3, r3, #16
 800136a:	0c1b      	lsrs	r3, r3, #16
 800136c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001370:	f001 fb1a 	bl	80029a8 <USB_ReadInterrupts>
 8001374:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001378:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800137a:	d007      	beq.n	800138c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800137c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001384:	041b      	lsls	r3, r3, #16
 8001386:	0c1b      	lsrs	r3, r3, #16
 8001388:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800138c:	f001 fb0c 	bl	80029a8 <USB_ReadInterrupts>
 8001390:	04c5      	lsls	r5, r0, #19
 8001392:	f100 8131 	bmi.w	80015f8 <HAL_PCD_IRQHandler+0x2c4>
 8001396:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001398:	f001 fb06 	bl	80029a8 <USB_ReadInterrupts>
 800139c:	0500      	lsls	r0, r0, #20
 800139e:	f100 8104 	bmi.w	80015aa <HAL_PCD_IRQHandler+0x276>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80013a2:	6820      	ldr	r0, [r4, #0]
 80013a4:	f001 fb00 	bl	80029a8 <USB_ReadInterrupts>
 80013a8:	0582      	lsls	r2, r0, #22
 80013aa:	f100 80f1 	bmi.w	8001590 <HAL_PCD_IRQHandler+0x25c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80013ae:	6820      	ldr	r0, [r4, #0]
 80013b0:	f001 fafa 	bl	80029a8 <USB_ReadInterrupts>
 80013b4:	05c3      	lsls	r3, r0, #23
 80013b6:	d508      	bpl.n	80013ca <HAL_PCD_IRQHandler+0x96>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80013be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013c2:	041b      	lsls	r3, r3, #16
 80013c4:	0c1b      	lsrs	r3, r3, #16
 80013c6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80013ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80013ce:	f8df a3e8 	ldr.w	sl, [pc, #1000]	; 80017b8 <HAL_PCD_IRQHandler+0x484>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80013d2:	f8df b3e8 	ldr.w	fp, [pc, #1000]	; 80017bc <HAL_PCD_IRQHandler+0x488>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80013da:	041f      	lsls	r7, r3, #16
 80013dc:	d5b3      	bpl.n	8001346 <HAL_PCD_IRQHandler+0x12>
    wIstr = hpcd->Instance->ISTR;
 80013de:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 80013e2:	b289      	uxth	r1, r1
    if (epindex == 0U)
 80013e4:	f011 050f 	ands.w	r5, r1, #15
 80013e8:	d157      	bne.n	800149a <HAL_PCD_IRQHandler+0x166>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013ea:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013ee:	8813      	ldrh	r3, [r2, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013f0:	f000 813e 	beq.w	8001670 <HAL_PCD_IRQHandler+0x33c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013f4:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80013f6:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80013fa:	f040 8166 	bne.w	80016ca <HAL_PCD_IRQHandler+0x396>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013fe:	041b      	lsls	r3, r3, #16
 8001400:	d5e9      	bpl.n	80013d6 <HAL_PCD_IRQHandler+0xa2>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001402:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001406:	8811      	ldrh	r1, [r2, #0]
 8001408:	400b      	ands	r3, r1
 800140a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140e:	8013      	strh	r3, [r2, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001410:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001414:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
 8001418:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800141c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001420:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001428:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800142c:	b19b      	cbz	r3, 8001456 <HAL_PCD_IRQHandler+0x122>
 800142e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001432:	b181      	cbz	r1, 8001456 <HAL_PCD_IRQHandler+0x122>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001434:	4610      	mov	r0, r2
 8001436:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800143a:	f001 fabb 	bl	80029b4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800143e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001442:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001446:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001448:	4413      	add	r3, r2
 800144a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800144e:	4620      	mov	r0, r4
 8001450:	f002 f960 	bl	8003714 <HAL_PCD_DataOutStageCallback>
 8001454:	6822      	ldr	r2, [r4, #0]
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001456:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800145a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800145e:	b29b      	uxth	r3, r3
 8001460:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8001464:	2900      	cmp	r1, #0
 8001466:	f040 8184 	bne.w	8001772 <HAL_PCD_IRQHandler+0x43e>
 800146a:	5ac1      	ldrh	r1, [r0, r3]
 800146c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8001470:	0409      	lsls	r1, r1, #16
 8001472:	0c09      	lsrs	r1, r1, #16
 8001474:	52c1      	strh	r1, [r0, r3]
 8001476:	5ac1      	ldrh	r1, [r0, r3]
 8001478:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800147c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001480:	b289      	uxth	r1, r1
 8001482:	52c1      	strh	r1, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001484:	8811      	ldrh	r1, [r2, #0]
 8001486:	4bca      	ldr	r3, [pc, #808]	; (80017b0 <HAL_PCD_IRQHandler+0x47c>)
 8001488:	400b      	ands	r3, r1
 800148a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800148e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001496:	8013      	strh	r3, [r2, #0]
 8001498:	e79d      	b.n	80013d6 <HAL_PCD_IRQHandler+0xa2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800149a:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
 800149e:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014a0:	0431      	lsls	r1, r6, #16
 80014a2:	d426      	bmi.n	80014f2 <HAL_PCD_IRQHandler+0x1be>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80014a4:	0633      	lsls	r3, r6, #24
 80014a6:	d596      	bpl.n	80013d6 <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014a8:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014ac:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014b0:	ea0a 0303 	and.w	r3, sl, r3
 80014b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b8:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014bc:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80014c0:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 80014c4:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014c6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80014ca:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80014ce:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	; 0x404

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80014d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014d4:	f3c0 0009 	ubfx	r0, r0, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80014d8:	182a      	adds	r2, r5, r0
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014da:	6448      	str	r0, [r1, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80014dc:	63ca      	str	r2, [r1, #60]	; 0x3c
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014de:	4620      	mov	r0, r4
 80014e0:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
        if (ep->xfer_len == 0U)
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f040 80ec 	bne.w	80016c2 <HAL_PCD_IRQHandler+0x38e>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80014ea:	f002 f91b 	bl	8003724 <HAL_PCD_DataInStageCallback>
 80014ee:	6822      	ldr	r2, [r4, #0]
 80014f0:	e771      	b.n	80013d6 <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014f6:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80014fa:	016f      	lsls	r7, r5, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80014fc:	400b      	ands	r3, r1
 80014fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001502:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001506:	eb04 0907 	add.w	r9, r4, r7
 800150a:	f899 3134 	ldrb.w	r3, [r9, #308]	; 0x134
 800150e:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80fb 	beq.w	800170e <HAL_PCD_IRQHandler+0x3da>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001518:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 800151c:	f832 c023 	ldrh.w	ip, [r2, r3, lsl #2]
 8001520:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8001524:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001528:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 800152c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001530:	4463      	add	r3, ip
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001532:	f000 8107 	beq.w	8001744 <HAL_PCD_IRQHandler+0x410>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001536:	3302      	adds	r3, #2
 8001538:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 800153c:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 8001540:	f1b8 0f00 	cmp.w	r8, #0
 8001544:	f040 812f 	bne.w	80017a6 <HAL_PCD_IRQHandler+0x472>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001548:	880b      	ldrh	r3, [r1, #0]
 800154a:	ea0b 0303 	and.w	r3, fp, r3
 800154e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001556:	800b      	strh	r3, [r1, #0]
 8001558:	4427      	add	r7, r4
        ep->xfer_count += count;
 800155a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 800155e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001562:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
        ep->xfer_count += count;
 8001566:	4441      	add	r1, r8
        ep->xfer_buff += count;
 8001568:	4442      	add	r2, r8
        ep->xfer_count += count;
 800156a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 800156e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80e3 	beq.w	800173e <HAL_PCD_IRQHandler+0x40a>
 8001578:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800157c:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8001580:	4580      	cmp	r8, r0
 8001582:	f080 8100 	bcs.w	8001786 <HAL_PCD_IRQHandler+0x452>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001586:	4620      	mov	r0, r4
 8001588:	f002 f8c4 	bl	8003714 <HAL_PCD_DataOutStageCallback>
 800158c:	6822      	ldr	r2, [r4, #0]
 800158e:	e789      	b.n	80014a4 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001590:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001592:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001594:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800159c:	041b      	lsls	r3, r3, #16
 800159e:	0c1b      	lsrs	r3, r3, #16
 80015a0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80015a4:	f002 f8c6 	bl	8003734 <HAL_PCD_SOFCallback>
 80015a8:	e701      	b.n	80013ae <HAL_PCD_IRQHandler+0x7a>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015b0:	4618      	mov	r0, r3
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80015b2:	f042 0208 	orr.w	r2, r2, #8
 80015b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015ba:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80015be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c2:	0412      	lsls	r2, r2, #16
 80015c4:	0c12      	lsrs	r2, r2, #16
 80015c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80015ca:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80015ce:	f042 0204 	orr.w	r2, r2, #4
 80015d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015d6:	f001 f9e7 	bl	80029a8 <USB_ReadInterrupts>
 80015da:	04c1      	lsls	r1, r0, #19
 80015dc:	d508      	bpl.n	80015f0 <HAL_PCD_IRQHandler+0x2bc>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80015e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	0c1b      	lsrs	r3, r3, #16
 80015ec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80015f0:	4620      	mov	r0, r4
 80015f2:	f002 f8b5 	bl	8003760 <HAL_PCD_SuspendCallback>
 80015f6:	e6d4      	b.n	80013a2 <HAL_PCD_IRQHandler+0x6e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015f8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80015fa:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015fc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	0c1b      	lsrs	r3, r3, #16
 8001608:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800160c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001610:	f023 0308 	bic.w	r3, r3, #8
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	0c1b      	lsrs	r3, r3, #16
 8001618:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800161c:	f002 f8b0 	bl	8003780 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001620:	6820      	ldr	r0, [r4, #0]
 8001622:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	0c1b      	lsrs	r3, r3, #16
 800162e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001632:	e6b1      	b.n	8001398 <HAL_PCD_IRQHandler+0x64>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001634:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001636:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001638:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800163c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	0c1b      	lsrs	r3, r3, #16
 8001644:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001648:	f002 f878 	bl	800373c <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 800164c:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001650:	2b01      	cmp	r3, #1
 8001652:	f43f ae7e 	beq.w	8001352 <HAL_PCD_IRQHandler+0x1e>
  hpcd->USB_Address = address;
 8001656:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8001658:	2301      	movs	r3, #1
  hpcd->USB_Address = address;
 800165a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800165e:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001662:	4629      	mov	r1, r5
 8001664:	6820      	ldr	r0, [r4, #0]
 8001666:	f001 f995 	bl	8002994 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800166a:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
 800166e:	e670      	b.n	8001352 <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001670:	ea0a 0303 	and.w	r3, sl, r3
 8001674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001678:	8013      	strh	r3, [r2, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800167a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800167e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8001682:	6be5      	ldr	r5, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001684:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001688:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800168c:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001690:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001692:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8001696:	441d      	add	r5, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001698:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800169a:	63e5      	str	r5, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800169c:	f002 f842 	bl	8003724 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016a0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80016a4:	b17b      	cbz	r3, 80016c6 <HAL_PCD_IRQHandler+0x392>
 80016a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016a8:	6822      	ldr	r2, [r4, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f ae93 	bne.w	80013d6 <HAL_PCD_IRQHandler+0xa2>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016b0:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80016b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80016b8:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016bc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80016c0:	e689      	b.n	80013d6 <HAL_PCD_IRQHandler+0xa2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80016c2:	f7ff fe21 	bl	8001308 <HAL_PCD_EP_Transmit>
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	e685      	b.n	80013d6 <HAL_PCD_IRQHandler+0xa2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ca:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80016ce:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016d2:	4610      	mov	r0, r2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016d4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80016d8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80016dc:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016e0:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80016e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016e8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ec:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016f0:	f001 f960 	bl	80029b4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016f8:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80016fa:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016fc:	8811      	ldrh	r1, [r2, #0]
 80016fe:	400b      	ands	r3, r1
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001706:	f001 ffff 	bl	8003708 <HAL_PCD_SetupStageCallback>
 800170a:	6822      	ldr	r2, [r4, #0]
 800170c:	e663      	b.n	80013d6 <HAL_PCD_IRQHandler+0xa2>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800170e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001712:	f899 1128 	ldrb.w	r1, [r9, #296]	; 0x128
 8001716:	3306      	adds	r3, #6
 8001718:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800171c:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8001720:	f3c8 0809 	ubfx	r8, r8, #0, #10
          if (count != 0U)
 8001724:	f1b8 0f00 	cmp.w	r8, #0
 8001728:	f43f af16 	beq.w	8001558 <HAL_PCD_IRQHandler+0x224>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800172c:	4610      	mov	r0, r2
 800172e:	4643      	mov	r3, r8
 8001730:	f8b9 212e 	ldrh.w	r2, [r9, #302]	; 0x12e
 8001734:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 8001738:	f001 f93c 	bl	80029b4 <USB_ReadPMA>
 800173c:	e70c      	b.n	8001558 <HAL_PCD_IRQHandler+0x224>
 800173e:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8001742:	e720      	b.n	8001586 <HAL_PCD_IRQHandler+0x252>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001744:	3306      	adds	r3, #6
 8001746:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 800174a:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 800174e:	f1b8 0f00 	cmp.w	r8, #0
 8001752:	f43f aef9 	beq.w	8001548 <HAL_PCD_IRQHandler+0x214>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001756:	4643      	mov	r3, r8
 8001758:	4610      	mov	r0, r2
 800175a:	f8b9 2132 	ldrh.w	r2, [r9, #306]	; 0x132
 800175e:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 8001762:	f001 f927 	bl	80029b4 <USB_ReadPMA>
 8001766:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 800176a:	6821      	ldr	r1, [r4, #0]
 800176c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001770:	e6ea      	b.n	8001548 <HAL_PCD_IRQHandler+0x214>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001772:	293e      	cmp	r1, #62	; 0x3e
 8001774:	d80c      	bhi.n	8001790 <HAL_PCD_IRQHandler+0x45c>
 8001776:	084d      	lsrs	r5, r1, #1
 8001778:	07cf      	lsls	r7, r1, #31
 800177a:	bf48      	it	mi
 800177c:	3501      	addmi	r5, #1
 800177e:	02ad      	lsls	r5, r5, #10
 8001780:	b2ad      	uxth	r5, r5
 8001782:	52c5      	strh	r5, [r0, r3]
 8001784:	e67e      	b.n	8001484 <HAL_PCD_IRQHandler+0x150>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001786:	4620      	mov	r0, r4
 8001788:	f7ff fd9e 	bl	80012c8 <HAL_PCD_EP_Receive>
 800178c:	6822      	ldr	r2, [r4, #0]
 800178e:	e689      	b.n	80014a4 <HAL_PCD_IRQHandler+0x170>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001790:	094d      	lsrs	r5, r1, #5
 8001792:	06ce      	lsls	r6, r1, #27
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <HAL_PCD_IRQHandler+0x480>)
 8001796:	bf08      	it	eq
 8001798:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800179c:	ea41 2585 	orr.w	r5, r1, r5, lsl #10
 80017a0:	b2ad      	uxth	r5, r5
 80017a2:	52c5      	strh	r5, [r0, r3]
 80017a4:	e66e      	b.n	8001484 <HAL_PCD_IRQHandler+0x150>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017a6:	4610      	mov	r0, r2
 80017a8:	4643      	mov	r3, r8
 80017aa:	f8b9 2130 	ldrh.w	r2, [r9, #304]	; 0x130
 80017ae:	e7d6      	b.n	800175e <HAL_PCD_IRQHandler+0x42a>
 80017b0:	ffffbf8f 	.word	0xffffbf8f
 80017b4:	ffff8000 	.word	0xffff8000
 80017b8:	ffff8f0f 	.word	0xffff8f0f
 80017bc:	ffff8f8f 	.word	0xffff8f8f

080017c0 <HAL_PCD_EP_SetStall>:
{
 80017c0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017c2:	6843      	ldr	r3, [r0, #4]
 80017c4:	f001 0507 	and.w	r5, r1, #7
 80017c8:	429d      	cmp	r5, r3
 80017ca:	d81b      	bhi.n	8001804 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 80017cc:	060b      	lsls	r3, r1, #24
 80017ce:	d41b      	bmi.n	8001808 <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 80017d0:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80017d2:	0149      	lsls	r1, r1, #5
    ep->is_in = 0U;
 80017d4:	1843      	adds	r3, r0, r1
 80017d6:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 80017da:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 80017dc:	f501 7294 	add.w	r2, r1, #296	; 0x128
 80017e0:	1881      	adds	r1, r0, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 80017e2:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80017e4:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80017e6:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d01b      	beq.n	8001826 <HAL_PCD_EP_SetStall+0x66>
 80017ee:	4604      	mov	r4, r0
 80017f0:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017f4:	6800      	ldr	r0, [r0, #0]
 80017f6:	f001 f857 	bl	80028a8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017fa:	b1b5      	cbz	r5, 800182a <HAL_PCD_EP_SetStall+0x6a>
  __HAL_UNLOCK(hpcd);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8001802:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
}
 8001806:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8001808:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800180a:	016b      	lsls	r3, r5, #5
 800180c:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8001810:	4403      	add	r3, r0
 8001812:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8001816:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001818:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 800181a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800181c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800181e:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8001822:	429a      	cmp	r2, r3
 8001824:	d1e3      	bne.n	80017ee <HAL_PCD_EP_SetStall+0x2e>
 8001826:	2002      	movs	r0, #2
}
 8001828:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800182a:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	f001 f8be 	bl	80029b0 <USB_EP0_OutStart>
 8001834:	e7e2      	b.n	80017fc <HAL_PCD_EP_SetStall+0x3c>
 8001836:	bf00      	nop

08001838 <HAL_PCD_EP_ClrStall>:
{
 8001838:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800183a:	6843      	ldr	r3, [r0, #4]
 800183c:	f001 020f 	and.w	r2, r1, #15
 8001840:	429a      	cmp	r2, r3
 8001842:	d81e      	bhi.n	8001882 <HAL_PCD_EP_ClrStall+0x4a>
 8001844:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8001848:	0609      	lsls	r1, r1, #24
 800184a:	ea4f 1342 	mov.w	r3, r2, lsl #5
 800184e:	d41a      	bmi.n	8001886 <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 0U;
 8001850:	2500      	movs	r5, #0
 8001852:	18c4      	adds	r4, r0, r3
 8001854:	f884 5129 	strb.w	r5, [r4, #297]	; 0x129
  ep->is_stall = 0U;
 8001858:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800185a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800185e:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001860:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001862:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001864:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8001868:	2b01      	cmp	r3, #1
 800186a:	d01a      	beq.n	80018a2 <HAL_PCD_EP_ClrStall+0x6a>
 800186c:	2301      	movs	r3, #1
 800186e:	4604      	mov	r4, r0
 8001870:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001874:	6800      	ldr	r0, [r0, #0]
 8001876:	f001 f839 	bl	80028ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800187a:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 800187e:	4628      	mov	r0, r5
}
 8001880:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
}
 8001884:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8001886:	2501      	movs	r5, #1
 8001888:	18c4      	adds	r4, r0, r3
 800188a:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  ep->is_stall = 0U;
 800188e:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001890:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001894:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001896:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8001898:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800189a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d1e4      	bne.n	800186c <HAL_PCD_EP_ClrStall+0x34>
 80018a2:	2002      	movs	r0, #2
}
 80018a4:	bd38      	pop	{r3, r4, r5, pc}
 80018a6:	bf00      	nop

080018a8 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80018a8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80018ac:	d00d      	beq.n	80018ca <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ae:	f001 0107 	and.w	r1, r1, #7
 80018b2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80018b6:	3028      	adds	r0, #40	; 0x28
 80018b8:	b299      	uxth	r1, r3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80018ba:	b16a      	cbz	r2, 80018d8 <HAL_PCDEx_PMAConfig+0x30>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80018bc:	2201      	movs	r2, #1
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	8143      	strh	r3, [r0, #10]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80018c2:	8101      	strh	r1, [r0, #8]
    ep->doublebuffer = 1U;
 80018c4:	7302      	strb	r2, [r0, #12]
  }

  return HAL_OK;
}
 80018c6:	2000      	movs	r0, #0
 80018c8:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80018ca:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80018ce:	f500 7094 	add.w	r0, r0, #296	; 0x128
 80018d2:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d1f1      	bne.n	80018bc <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 0U;
 80018d8:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80018da:	80c1      	strh	r1, [r0, #6]
}
 80018dc:	2000      	movs	r0, #0
 80018de:	4770      	bx	lr

080018e0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e0:	2800      	cmp	r0, #0
 80018e2:	f000 8155 	beq.w	8001b90 <HAL_RCC_OscConfig+0x2b0>
{
 80018e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	6803      	ldr	r3, [r0, #0]
{
 80018ec:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	07dd      	lsls	r5, r3, #31
 80018f0:	4604      	mov	r4, r0
 80018f2:	d535      	bpl.n	8001960 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f4:	49a8      	ldr	r1, [pc, #672]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 80018f6:	684a      	ldr	r2, [r1, #4]
 80018f8:	f002 020c 	and.w	r2, r2, #12
 80018fc:	2a04      	cmp	r2, #4
 80018fe:	f000 8105 	beq.w	8001b0c <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001902:	684a      	ldr	r2, [r1, #4]
 8001904:	f002 020c 	and.w	r2, r2, #12
 8001908:	2a08      	cmp	r2, #8
 800190a:	f000 80fb 	beq.w	8001b04 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	6863      	ldr	r3, [r4, #4]
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001914:	d010      	beq.n	8001938 <HAL_RCC_OscConfig+0x58>
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8120 	beq.w	8001b5c <HAL_RCC_OscConfig+0x27c>
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001920:	f000 8178 	beq.w	8001c14 <HAL_RCC_OscConfig+0x334>
 8001924:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e004      	b.n	8001942 <HAL_RCC_OscConfig+0x62>
 8001938:	4a97      	ldr	r2, [pc, #604]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 800193a:	6813      	ldr	r3, [r2, #0]
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7fe ff41 	bl	80007c8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4d94      	ldr	r5, [pc, #592]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8001948:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	e005      	b.n	8001958 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7fe ff3c 	bl	80007c8 <HAL_GetTick>
 8001950:	1b80      	subs	r0, r0, r6
 8001952:	2864      	cmp	r0, #100	; 0x64
 8001954:	f200 80f5 	bhi.w	8001b42 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	039a      	lsls	r2, r3, #14
 800195c:	d5f6      	bpl.n	800194c <HAL_RCC_OscConfig+0x6c>
 800195e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001960:	079f      	lsls	r7, r3, #30
 8001962:	d44d      	bmi.n	8001a00 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001964:	071a      	lsls	r2, r3, #28
 8001966:	d522      	bpl.n	80019ae <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001968:	69a3      	ldr	r3, [r4, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80ba 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001970:	2201      	movs	r2, #1
 8001972:	4b8a      	ldr	r3, [pc, #552]	; (8001b9c <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001974:	4d88      	ldr	r5, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8001976:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001978:	f7fe ff26 	bl	80007c8 <HAL_GetTick>
 800197c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197e:	e005      	b.n	800198c <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001980:	f7fe ff22 	bl	80007c8 <HAL_GetTick>
 8001984:	1b80      	subs	r0, r0, r6
 8001986:	2802      	cmp	r0, #2
 8001988:	f200 80db 	bhi.w	8001b42 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800198e:	079b      	lsls	r3, r3, #30
 8001990:	d5f6      	bpl.n	8001980 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001992:	4b83      	ldr	r3, [pc, #524]	; (8001ba0 <HAL_RCC_OscConfig+0x2c0>)
 8001994:	4a83      	ldr	r2, [pc, #524]	; (8001ba4 <HAL_RCC_OscConfig+0x2c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	0a5b      	lsrs	r3, r3, #9
 800199e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80019a0:	bf00      	nop
  }
  while (Delay --);
 80019a2:	9b01      	ldr	r3, [sp, #4]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	9201      	str	r2, [sp, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f9      	bne.n	80019a0 <HAL_RCC_OscConfig+0xc0>
 80019ac:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ae:	075d      	lsls	r5, r3, #29
 80019b0:	d569      	bpl.n	8001a86 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b79      	ldr	r3, [pc, #484]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	00d0      	lsls	r0, r2, #3
 80019b8:	f100 80ec 	bmi.w	8001b94 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 80019bc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c4:	61da      	str	r2, [r3, #28]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4b75      	ldr	r3, [pc, #468]	; (8001ba8 <HAL_RCC_OscConfig+0x2c8>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	05d1      	lsls	r1, r2, #23
 80019d6:	f140 80a3 	bpl.w	8001b20 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019da:	68e3      	ldr	r3, [r4, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d037      	beq.n	8001a50 <HAL_RCC_OscConfig+0x170>
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80e7 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x2d4>
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	4b6b      	ldr	r3, [pc, #428]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	f000 811f 	beq.w	8001c2e <HAL_RCC_OscConfig+0x34e>
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	621a      	str	r2, [r3, #32]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	f022 0204 	bic.w	r2, r2, #4
 80019fc:	621a      	str	r2, [r3, #32]
 80019fe:	e02c      	b.n	8001a5a <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a00:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001a02:	6851      	ldr	r1, [r2, #4]
 8001a04:	f011 0f0c 	tst.w	r1, #12
 8001a08:	d061      	beq.n	8001ace <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a0a:	6851      	ldr	r1, [r2, #4]
 8001a0c:	f001 010c 	and.w	r1, r1, #12
 8001a10:	2908      	cmp	r1, #8
 8001a12:	d059      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a14:	6923      	ldr	r3, [r4, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80eb 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	4d5d      	ldr	r5, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8001a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a24:	f7fe fed0 	bl	80007c8 <HAL_GetTick>
 8001a28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	e005      	b.n	8001a38 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7fe fecc 	bl	80007c8 <HAL_GetTick>
 8001a30:	1b80      	subs	r0, r0, r6
 8001a32:	2802      	cmp	r0, #2
 8001a34:	f200 8085 	bhi.w	8001b42 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	0798      	lsls	r0, r3, #30
 8001a3c:	d5f6      	bpl.n	8001a2c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	682b      	ldr	r3, [r5, #0]
 8001a40:	6962      	ldr	r2, [r4, #20]
 8001a42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a4a:	602b      	str	r3, [r5, #0]
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	e789      	b.n	8001964 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	4a51      	ldr	r2, [pc, #324]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001a52:	6a13      	ldr	r3, [r2, #32]
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001a5a:	f7fe feb5 	bl	80007c8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5e:	4e4e      	ldr	r6, [pc, #312]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8001a60:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a66:	e005      	b.n	8001a74 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7fe feae 	bl	80007c8 <HAL_GetTick>
 8001a6c:	eba0 0008 	sub.w	r0, r0, r8
 8001a70:	42b8      	cmp	r0, r7
 8001a72:	d866      	bhi.n	8001b42 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	6a33      	ldr	r3, [r6, #32]
 8001a76:	079b      	lsls	r3, r3, #30
 8001a78:	d5f6      	bpl.n	8001a68 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8001a7a:	b125      	cbz	r5, 8001a86 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7c:	4a46      	ldr	r2, [pc, #280]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001a7e:	69d3      	ldr	r3, [r2, #28]
 8001a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a86:	69e0      	ldr	r0, [r4, #28]
 8001a88:	b1d0      	cbz	r0, 8001ac0 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8a:	4d43      	ldr	r5, [pc, #268]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001a8c:	686a      	ldr	r2, [r5, #4]
 8001a8e:	f002 020c 	and.w	r2, r2, #12
 8001a92:	2a08      	cmp	r2, #8
 8001a94:	f000 80d3 	beq.w	8001c3e <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a98:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	4a44      	ldr	r2, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa0:	f000 80de 	beq.w	8001c60 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001aa6:	f7fe fe8f 	bl	80007c8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aaa:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001aac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aae:	e004      	b.n	8001aba <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7fe fe8a 	bl	80007c8 <HAL_GetTick>
 8001ab4:	1b40      	subs	r0, r0, r5
 8001ab6:	2802      	cmp	r0, #2
 8001ab8:	d843      	bhi.n	8001b42 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	019b      	lsls	r3, r3, #6
 8001abe:	d4f7      	bmi.n	8001ab0 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8001ac0:	2000      	movs	r0, #0
}
 8001ac2:	b002      	add	sp, #8
 8001ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac8:	6852      	ldr	r2, [r2, #4]
 8001aca:	03d6      	lsls	r6, r2, #15
 8001acc:	d4a2      	bmi.n	8001a14 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	0795      	lsls	r5, r2, #30
 8001ad4:	d539      	bpl.n	8001b4a <HAL_RCC_OscConfig+0x26a>
 8001ad6:	6922      	ldr	r2, [r4, #16]
 8001ad8:	2a01      	cmp	r2, #1
 8001ada:	d036      	beq.n	8001b4a <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8001adc:	2001      	movs	r0, #1
}
 8001ade:	b002      	add	sp, #8
 8001ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001ae4:	4a2d      	ldr	r2, [pc, #180]	; (8001b9c <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae6:	4d2c      	ldr	r5, [pc, #176]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8001ae8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001aea:	f7fe fe6d 	bl	80007c8 <HAL_GetTick>
 8001aee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	e004      	b.n	8001afc <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af2:	f7fe fe69 	bl	80007c8 <HAL_GetTick>
 8001af6:	1b80      	subs	r0, r0, r6
 8001af8:	2802      	cmp	r0, #2
 8001afa:	d822      	bhi.n	8001b42 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001afe:	079f      	lsls	r7, r3, #30
 8001b00:	d4f7      	bmi.n	8001af2 <HAL_RCC_OscConfig+0x212>
 8001b02:	e753      	b.n	80019ac <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b04:	684a      	ldr	r2, [r1, #4]
 8001b06:	03d0      	lsls	r0, r2, #15
 8001b08:	f57f af01 	bpl.w	800190e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	4a22      	ldr	r2, [pc, #136]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	0391      	lsls	r1, r2, #14
 8001b12:	f57f af25 	bpl.w	8001960 <HAL_RCC_OscConfig+0x80>
 8001b16:	6862      	ldr	r2, [r4, #4]
 8001b18:	2a00      	cmp	r2, #0
 8001b1a:	f47f af21 	bne.w	8001960 <HAL_RCC_OscConfig+0x80>
 8001b1e:	e7dd      	b.n	8001adc <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b20:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b2a:	f7fe fe4d 	bl	80007c8 <HAL_GetTick>
 8001b2e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	6833      	ldr	r3, [r6, #0]
 8001b32:	05da      	lsls	r2, r3, #23
 8001b34:	f53f af51 	bmi.w	80019da <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b38:	f7fe fe46 	bl	80007c8 <HAL_GetTick>
 8001b3c:	1bc0      	subs	r0, r0, r7
 8001b3e:	2864      	cmp	r0, #100	; 0x64
 8001b40:	d9f6      	bls.n	8001b30 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8001b42:	2003      	movs	r0, #3
}
 8001b44:	b002      	add	sp, #8
 8001b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4913      	ldr	r1, [pc, #76]	; (8001b98 <HAL_RCC_OscConfig+0x2b8>)
 8001b4c:	6960      	ldr	r0, [r4, #20]
 8001b4e:	680a      	ldr	r2, [r1, #0]
 8001b50:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b54:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001b58:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	e703      	b.n	8001964 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b60:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b64:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b76:	f7fe fe27 	bl	80007c8 <HAL_GetTick>
 8001b7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7c:	e004      	b.n	8001b88 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7e:	f7fe fe23 	bl	80007c8 <HAL_GetTick>
 8001b82:	1b80      	subs	r0, r0, r6
 8001b84:	2864      	cmp	r0, #100	; 0x64
 8001b86:	d8dc      	bhi.n	8001b42 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	039b      	lsls	r3, r3, #14
 8001b8c:	d4f7      	bmi.n	8001b7e <HAL_RCC_OscConfig+0x29e>
 8001b8e:	e6e6      	b.n	800195e <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
}
 8001b92:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001b94:	2500      	movs	r5, #0
 8001b96:	e71b      	b.n	80019d0 <HAL_RCC_OscConfig+0xf0>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	42420480 	.word	0x42420480
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	10624dd3 	.word	0x10624dd3
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42420000 	.word	0x42420000
 8001bb0:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bb8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	621a      	str	r2, [r3, #32]
 8001bc6:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	f022 0204 	bic.w	r2, r2, #4
 8001bd0:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8001bd2:	f7fe fdf9 	bl	80007c8 <HAL_GetTick>
 8001bd6:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	e004      	b.n	8001be4 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7fe fdf5 	bl	80007c8 <HAL_GetTick>
 8001bde:	1bc0      	subs	r0, r0, r7
 8001be0:	4540      	cmp	r0, r8
 8001be2:	d8ae      	bhi.n	8001b42 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	6a33      	ldr	r3, [r6, #32]
 8001be6:	0798      	lsls	r0, r3, #30
 8001be8:	d4f7      	bmi.n	8001bda <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8001bea:	2d00      	cmp	r5, #0
 8001bec:	f43f af4b 	beq.w	8001a86 <HAL_RCC_OscConfig+0x1a6>
 8001bf0:	e744      	b.n	8001a7c <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8001bf2:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf4:	4d34      	ldr	r5, [pc, #208]	; (8001cc8 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fde6 	bl	80007c8 <HAL_GetTick>
 8001bfc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfe:	e004      	b.n	8001c0a <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c00:	f7fe fde2 	bl	80007c8 <HAL_GetTick>
 8001c04:	1b80      	subs	r0, r0, r6
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d89b      	bhi.n	8001b42 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	682b      	ldr	r3, [r5, #0]
 8001c0c:	0799      	lsls	r1, r3, #30
 8001c0e:	d4f7      	bmi.n	8001c00 <HAL_RCC_OscConfig+0x320>
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	e6a7      	b.n	8001964 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c18:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e689      	b.n	8001942 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2e:	f042 0204 	orr.w	r2, r2, #4
 8001c32:	621a      	str	r2, [r3, #32]
 8001c34:	6a1a      	ldr	r2, [r3, #32]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	621a      	str	r2, [r3, #32]
 8001c3c:	e70d      	b.n	8001a5a <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3e:	2801      	cmp	r0, #1
 8001c40:	f43f af4d 	beq.w	8001ade <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8001c44:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	6a22      	ldr	r2, [r4, #32]
 8001c48:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001c4c:	4291      	cmp	r1, r2
 8001c4e:	f47f af45 	bne.w	8001adc <HAL_RCC_OscConfig+0x1fc>
 8001c52:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001c58:	1a18      	subs	r0, r3, r0
 8001c5a:	bf18      	it	ne
 8001c5c:	2001      	movne	r0, #1
 8001c5e:	e73e      	b.n	8001ade <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8001c60:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001c62:	f7fe fdb1 	bl	80007c8 <HAL_GetTick>
 8001c66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	e005      	b.n	8001c76 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe fdad 	bl	80007c8 <HAL_GetTick>
 8001c6e:	1b80      	subs	r0, r0, r6
 8001c70:	2802      	cmp	r0, #2
 8001c72:	f63f af66 	bhi.w	8001b42 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c76:	682b      	ldr	r3, [r5, #0]
 8001c78:	0199      	lsls	r1, r3, #6
 8001c7a:	d4f6      	bmi.n	8001c6a <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c7c:	6a22      	ldr	r2, [r4, #32]
 8001c7e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c84:	686b      	ldr	r3, [r5, #4]
 8001c86:	68a1      	ldr	r1, [r4, #8]
 8001c88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c90:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_OscConfig+0x3e8>)
 8001c94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	4302      	orrs	r2, r0
 8001c9a:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca6:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fd8e 	bl	80007c8 <HAL_GetTick>
 8001cac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7fe fd8a 	bl	80007c8 <HAL_GetTick>
 8001cb4:	1b40      	subs	r0, r0, r5
 8001cb6:	2802      	cmp	r0, #2
 8001cb8:	f63f af43 	bhi.w	8001b42 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	019a      	lsls	r2, r3, #6
 8001cc0:	d5f6      	bpl.n	8001cb0 <HAL_RCC_OscConfig+0x3d0>
 8001cc2:	e6fd      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1e0>
 8001cc4:	42420000 	.word	0x42420000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	42420060 	.word	0x42420060

08001cd0 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cd0:	f240 2201 	movw	r2, #513	; 0x201
{
 8001cd4:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001cd8:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cdc:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001ce6:	4912      	ldr	r1, [pc, #72]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x60>)
 8001ce8:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	2a08      	cmp	r2, #8
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001cf2:	4810      	ldr	r0, [pc, #64]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001cf4:	b006      	add	sp, #24
 8001cf6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cf8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001cfc:	4462      	add	r2, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfe:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d00:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d04:	d404      	bmi.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d06:	480c      	ldr	r0, [pc, #48]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x68>)
 8001d08:	fb00 f002 	mul.w	r0, r0, r2
}
 8001d0c:	b006      	add	sp, #24
 8001d0e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d10:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d12:	4808      	ldr	r0, [pc, #32]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d14:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d18:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d1c:	4463      	add	r3, ip
 8001d1e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d22:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d26:	b006      	add	sp, #24
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	08003988 	.word	0x08003988
 8001d30:	40021000 	.word	0x40021000
 8001d34:	007a1200 	.word	0x007a1200
 8001d38:	003d0900 	.word	0x003d0900

08001d3c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001d3c:	b178      	cbz	r0, 8001d5e <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3e:	4a4a      	ldr	r2, [pc, #296]	; (8001e68 <HAL_RCC_ClockConfig+0x12c>)
 8001d40:	6813      	ldr	r3, [r2, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	428b      	cmp	r3, r1
 8001d48:	d20b      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	f023 0307 	bic.w	r3, r3, #7
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d54:	6813      	ldr	r3, [r2, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	428b      	cmp	r3, r1
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001d5e:	2001      	movs	r0, #1
}
 8001d60:	4770      	bx	lr
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d62:	6803      	ldr	r3, [r0, #0]
{
 8001d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	079d      	lsls	r5, r3, #30
 8001d6a:	d514      	bpl.n	8001d96 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	075c      	lsls	r4, r3, #29
 8001d6e:	d504      	bpl.n	8001d7a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d70:	4c3e      	ldr	r4, [pc, #248]	; (8001e6c <HAL_RCC_ClockConfig+0x130>)
 8001d72:	6862      	ldr	r2, [r4, #4]
 8001d74:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d78:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	071a      	lsls	r2, r3, #28
 8001d7c:	d504      	bpl.n	8001d88 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7e:	4c3b      	ldr	r4, [pc, #236]	; (8001e6c <HAL_RCC_ClockConfig+0x130>)
 8001d80:	6862      	ldr	r2, [r4, #4]
 8001d82:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001d86:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4c38      	ldr	r4, [pc, #224]	; (8001e6c <HAL_RCC_ClockConfig+0x130>)
 8001d8a:	6885      	ldr	r5, [r0, #8]
 8001d8c:	6862      	ldr	r2, [r4, #4]
 8001d8e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d92:	432a      	orrs	r2, r5
 8001d94:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	07df      	lsls	r7, r3, #31
 8001d98:	4604      	mov	r4, r0
 8001d9a:	460d      	mov	r5, r1
 8001d9c:	d520      	bpl.n	8001de0 <HAL_RCC_ClockConfig+0xa4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da4:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	d056      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x11a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da8:	2a02      	cmp	r2, #2
 8001daa:	d059      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x124>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	0799      	lsls	r1, r3, #30
 8001dae:	d527      	bpl.n	8001e00 <HAL_RCC_ClockConfig+0xc4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db0:	4e2e      	ldr	r6, [pc, #184]	; (8001e6c <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	6873      	ldr	r3, [r6, #4]
 8001db8:	f023 0303 	bic.w	r3, r3, #3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001dc0:	f7fe fd02 	bl	80007c8 <HAL_GetTick>
 8001dc4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e004      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x96>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7fe fcfe 	bl	80007c8 <HAL_GetTick>
 8001dcc:	1bc0      	subs	r0, r0, r7
 8001dce:	4540      	cmp	r0, r8
 8001dd0:	d844      	bhi.n	8001e5c <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	6873      	ldr	r3, [r6, #4]
 8001dd4:	6862      	ldr	r2, [r4, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dde:	d1f3      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x8c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_RCC_ClockConfig+0x12c>)
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	42ab      	cmp	r3, r5
 8001dea:	d90c      	bls.n	8001e06 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dec:	6813      	ldr	r3, [r2, #0]
 8001dee:	f023 0307 	bic.w	r3, r3, #7
 8001df2:	432b      	orrs	r3, r5
 8001df4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	42ab      	cmp	r3, r5
 8001dfe:	d002      	beq.n	8001e06 <HAL_RCC_ClockConfig+0xca>
    return HAL_ERROR;
 8001e00:	2001      	movs	r0, #1
}
 8001e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	075a      	lsls	r2, r3, #29
 8001e0a:	d506      	bpl.n	8001e1a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4917      	ldr	r1, [pc, #92]	; (8001e6c <HAL_RCC_ClockConfig+0x130>)
 8001e0e:	68e0      	ldr	r0, [r4, #12]
 8001e10:	684a      	ldr	r2, [r1, #4]
 8001e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e16:	4302      	orrs	r2, r0
 8001e18:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	071b      	lsls	r3, r3, #28
 8001e1c:	d412      	bmi.n	8001e44 <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1e:	f7ff ff57 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x130>)
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <HAL_RCC_ClockConfig+0x134>)
 8001e26:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 8001e28:	4912      	ldr	r1, [pc, #72]	; (8001e74 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_RCC_ClockConfig+0x13c>)
 8001e32:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 8001e36:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e38:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001e3a:	f7fe fc83 	bl	8000744 <HAL_InitTick>
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
}
 8001e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e44:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_RCC_ClockConfig+0x130>)
 8001e46:	6921      	ldr	r1, [r4, #16]
 8001e48:	6853      	ldr	r3, [r2, #4]
 8001e4a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e52:	6053      	str	r3, [r2, #4]
 8001e54:	e7e3      	b.n	8001e1e <HAL_RCC_ClockConfig+0xe2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	039e      	lsls	r6, r3, #14
 8001e58:	d4aa      	bmi.n	8001db0 <HAL_RCC_ClockConfig+0x74>
 8001e5a:	e7d1      	b.n	8001e00 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	e7ef      	b.n	8001e40 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e60:	0198      	lsls	r0, r3, #6
 8001e62:	d4a5      	bmi.n	8001db0 <HAL_RCC_ClockConfig+0x74>
 8001e64:	e7cc      	b.n	8001e00 <HAL_RCC_ClockConfig+0xc4>
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08003998 	.word	0x08003998
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000000 	.word	0x20000000

08001e7c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e7e:	4905      	ldr	r1, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e80:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e84:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e88:	5ccb      	ldrb	r3, [r1, r3]
 8001e8a:	6810      	ldr	r0, [r2, #0]
}
 8001e8c:	40d8      	lsrs	r0, r3
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000
 8001e94:	080039a8 	.word	0x080039a8
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001e9e:	4905      	ldr	r1, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	6810      	ldr	r0, [r2, #0]
}
 8001eac:	40d8      	lsrs	r0, r3
 8001eae:	4770      	bx	lr
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	080039a8 	.word	0x080039a8
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec2:	6800      	ldr	r0, [r0, #0]
{
 8001ec4:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec6:	07c5      	lsls	r5, r0, #31
 8001ec8:	d52a      	bpl.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	00d1      	lsls	r1, r2, #3
 8001ed0:	d53d      	bpl.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 8001ed4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	05d2      	lsls	r2, r2, #23
 8001eda:	d546      	bpl.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001edc:	4935      	ldr	r1, [pc, #212]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001ede:	6860      	ldr	r0, [r4, #4]
 8001ee0:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee2:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001ee6:	d00f      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001ee8:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00b      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef0:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef2:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef4:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef6:	4a31      	ldr	r2, [pc, #196]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001efc:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001efe:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f00:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f02:	07d8      	lsls	r0, r3, #31
 8001f04:	d445      	bmi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001f06:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f08:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001f0a:	6a13      	ldr	r3, [r2, #32]
 8001f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f10:	4303      	orrs	r3, r0
 8001f12:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f14:	b11d      	cbz	r5, 8001f1e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f16:	69d3      	ldr	r3, [r2, #28]
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f20:	0783      	lsls	r3, r0, #30
 8001f22:	d506      	bpl.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f24:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001f26:	68a1      	ldr	r1, [r4, #8]
 8001f28:	6853      	ldr	r3, [r2, #4]
 8001f2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f32:	f010 0010 	ands.w	r0, r0, #16
 8001f36:	d007      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f38:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001f3c:	68e1      	ldr	r1, [r4, #12]
 8001f3e:	6853      	ldr	r3, [r2, #4]
 8001f40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6053      	str	r3, [r2, #4]
}
 8001f48:	b002      	add	sp, #8
 8001f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001f50:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f56:	61da      	str	r2, [r3, #28]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	05d2      	lsls	r2, r2, #23
 8001f68:	d4b8      	bmi.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f72:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f74:	f7fe fc28 	bl	80007c8 <HAL_GetTick>
 8001f78:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	6833      	ldr	r3, [r6, #0]
 8001f7c:	05db      	lsls	r3, r3, #23
 8001f7e:	d4ad      	bmi.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7fe fc22 	bl	80007c8 <HAL_GetTick>
 8001f84:	1bc0      	subs	r0, r0, r7
 8001f86:	2864      	cmp	r0, #100	; 0x64
 8001f88:	d9f7      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8001f8a:	2003      	movs	r0, #3
}
 8001f8c:	b002      	add	sp, #8
 8001f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 8001f94:	f7fe fc18 	bl	80007c8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f9c:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	6a33      	ldr	r3, [r6, #32]
 8001fa0:	079a      	lsls	r2, r3, #30
 8001fa2:	d4b0      	bmi.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fc10 	bl	80007c8 <HAL_GetTick>
 8001fa8:	eba0 0008 	sub.w	r0, r0, r8
 8001fac:	42b8      	cmp	r0, r7
 8001fae:	d9f6      	bls.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fb0:	e7eb      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42420440 	.word	0x42420440

08001fc0 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d03b      	beq.n	800203c <HAL_SPI_Init+0x7c>
{
 8001fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc6:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fc8:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8001fcc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fce:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fd0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001fd4:	b361      	cbz	r1, 8002030 <HAL_SPI_Init+0x70>
 8001fd6:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001fd8:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001fdc:	2702      	movs	r7, #2
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fde:	2100      	movs	r1, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001fe0:	2501      	movs	r5, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001fe2:	68e0      	ldr	r0, [r4, #12]
 8001fe4:	4333      	orrs	r3, r6
 8001fe6:	6926      	ldr	r6, [r4, #16]
 8001fe8:	4303      	orrs	r3, r0
 8001fea:	6960      	ldr	r0, [r4, #20]
 8001fec:	4333      	orrs	r3, r6
 8001fee:	69e6      	ldr	r6, [r4, #28]
 8001ff0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	6a20      	ldr	r0, [r4, #32]
 8001ff8:	4333      	orrs	r3, r6
  __HAL_SPI_DISABLE(hspi);
 8001ffa:	6826      	ldr	r6, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ffc:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002000:	4303      	orrs	r3, r0
 8002002:	f40c 7000 	and.w	r0, ip, #512	; 0x200
 8002006:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8002008:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800200a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800200e:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8002010:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002014:	f00c 0204 	and.w	r2, ip, #4
  __HAL_SPI_DISABLE(hspi);
 8002018:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800201a:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800201c:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800201e:	69f3      	ldr	r3, [r6, #28]

  return HAL_OK;
 8002020:	4608      	mov	r0, r1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002026:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002028:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800202a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 800202e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002030:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002034:	f7fe fa26 	bl	8000484 <HAL_SPI_MspInit>
 8002038:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800203a:	e7cd      	b.n	8001fd8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800203c:	2001      	movs	r0, #1
}
 800203e:	4770      	bx	lr

08002040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	68c0      	ldr	r0, [r0, #12]
 8002048:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800204a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800204c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002050:	4301      	orrs	r1, r0
 8002052:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002054:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002056:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 800205a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800205e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002060:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002064:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002066:	430a      	orrs	r2, r1
 8002068:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800206e:	4912      	ldr	r1, [pc, #72]	; (80020b8 <UART_SetConfig+0x78>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002070:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002074:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8002076:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002078:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800207a:	d01a      	beq.n	80020b2 <UART_SetConfig+0x72>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800207c:	f7ff fefe 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800208c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002090:	2364      	movs	r3, #100	; 0x64
 8002092:	490a      	ldr	r1, [pc, #40]	; (80020bc <UART_SetConfig+0x7c>)
 8002094:	6824      	ldr	r4, [r4, #0]
 8002096:	fba1 5200 	umull	r5, r2, r1, r0
 800209a:	0952      	lsrs	r2, r2, #5
 800209c:	fb03 0312 	mls	r3, r3, r2, r0
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	3332      	adds	r3, #50	; 0x32
 80020a4:	fba1 1303 	umull	r1, r3, r1, r3
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80020ae:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80020b2:	f7ff fef3 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 80020b6:	e7e3      	b.n	8002080 <UART_SetConfig+0x40>
 80020b8:	40013800 	.word	0x40013800
 80020bc:	51eb851f 	.word	0x51eb851f

080020c0 <HAL_UART_Init>:
  if (huart == NULL)
 80020c0:	b360      	cbz	r0, 800211c <HAL_UART_Init+0x5c>
{
 80020c2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80020c4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020c8:	4604      	mov	r4, r0
 80020ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020ce:	b303      	cbz	r3, 8002112 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80020d0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80020d2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020d8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80020da:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80020dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020e0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80020e2:	f7ff ffad 	bl	8002040 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80020e8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ea:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80020ec:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020fc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002104:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002106:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002108:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800210c:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002110:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8002112:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002116:	f7fe fa91 	bl	800063c <HAL_UART_MspInit>
 800211a:	e7d9      	b.n	80020d0 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800211c:	2001      	movs	r0, #1
}
 800211e:	4770      	bx	lr

08002120 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002120:	b084      	sub	sp, #16
 8002122:	a801      	add	r0, sp, #4
 8002124:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002128:	b004      	add	sp, #16
 800212a:	2000      	movs	r0, #0
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002130:	4602      	mov	r2, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002132:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002136:	2000      	movs	r0, #0
  USBx->CNTR |= winterruptmask;
 8002138:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800213c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop

08002144 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002144:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 8002148:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 800214a:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 800214e:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 8002150:	400b      	ands	r3, r1
 8002152:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8002156:	4770      	bx	lr

08002158 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002158:	2000      	movs	r0, #0
 800215a:	4770      	bx	lr

0800215c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800215c:	b084      	sub	sp, #16
 800215e:	b470      	push	{r4, r5, r6}
 8002160:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002162:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002164:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002166:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 800216a:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800216e:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002172:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002176:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 800217a:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 800217c:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 8002180:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 8002184:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002188:	bc70      	pop	{r4, r5, r6}
 800218a:	b004      	add	sp, #16
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop

08002190 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002190:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002192:	780d      	ldrb	r5, [r1, #0]
{
 8002194:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002196:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 800219a:	4abc      	ldr	r2, [pc, #752]	; (800248c <USB_ActivateEndpoint+0x2fc>)

  /* initialize Endpoint */
  switch (ep->type)
 800219c:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800219e:	4022      	ands	r2, r4
  switch (ep->type)
 80021a0:	2803      	cmp	r0, #3
 80021a2:	f200 8142 	bhi.w	800242a <USB_ActivateEndpoint+0x29a>
 80021a6:	e8df f000 	tbb	[pc, r0]
 80021aa:	464e      	.short	0x464e
 80021ac:	4a02      	.short	0x4a02
  HAL_StatusTypeDef ret = HAL_OK;
 80021ae:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80021b0:	f248 0480 	movw	r4, #32896	; 0x8080
 80021b4:	4322      	orrs	r2, r4
 80021b6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80021ba:	780d      	ldrb	r5, [r1, #0]
 80021bc:	4eb4      	ldr	r6, [pc, #720]	; (8002490 <USB_ActivateEndpoint+0x300>)
 80021be:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80021c2:	432c      	orrs	r4, r5
 80021c4:	4032      	ands	r2, r6
 80021c6:	4322      	orrs	r2, r4
 80021c8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 80021cc:	7b0a      	ldrb	r2, [r1, #12]
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d13d      	bne.n	800224e <USB_ActivateEndpoint+0xbe>
 80021d2:	88cc      	ldrh	r4, [r1, #6]
 80021d4:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 80021d6:	784d      	ldrb	r5, [r1, #1]
 80021d8:	0864      	lsrs	r4, r4, #1
 80021da:	0064      	lsls	r4, r4, #1
 80021dc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80021e0:	2d00      	cmp	r5, #0
 80021e2:	f000 80e8 	beq.w	80023b6 <USB_ActivateEndpoint+0x226>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80021e6:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80021ea:	442a      	add	r2, r5
 80021ec:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021f0:	780a      	ldrb	r2, [r1, #0]
 80021f2:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80021f6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80021fa:	066d      	lsls	r5, r5, #25
 80021fc:	d50b      	bpl.n	8002216 <USB_ActivateEndpoint+0x86>
 80021fe:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002202:	4026      	ands	r6, r4
 8002204:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8002208:	f046 06c0 	orr.w	r6, r6, #192	; 0xc0
 800220c:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8002210:	780c      	ldrb	r4, [r1, #0]
 8002212:	eb03 0484 	add.w	r4, r3, r4, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 8002216:	78cb      	ldrb	r3, [r1, #3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	f000 8120 	beq.w	800245e <USB_ActivateEndpoint+0x2ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800221e:	8822      	ldrh	r2, [r4, #0]
 8002220:	4b9c      	ldr	r3, [pc, #624]	; (8002494 <USB_ActivateEndpoint+0x304>)
 8002222:	4013      	ands	r3, r2
 8002224:	f083 0320 	eor.w	r3, r3, #32
 8002228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002230:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002232:	bc70      	pop	{r4, r5, r6}
 8002234:	4770      	bx	lr
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002236:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 800223a:	2000      	movs	r0, #0
      break;
 800223c:	e7b8      	b.n	80021b0 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_INTERRUPT;
 800223e:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002242:	2000      	movs	r0, #0
      break;
 8002244:	e7b4      	b.n	80021b0 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_CONTROL;
 8002246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 800224a:	2000      	movs	r0, #0
      break;
 800224c:	e7b0      	b.n	80021b0 <USB_ActivateEndpoint+0x20>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800224e:	780c      	ldrb	r4, [r1, #0]
 8002250:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002254:	4032      	ands	r2, r6
 8002256:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800225a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002262:	780a      	ldrb	r2, [r1, #0]
 8002264:	890c      	ldrh	r4, [r1, #8]
 8002266:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800226a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800226e:	0864      	lsrs	r4, r4, #1
 8002270:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002274:	0064      	lsls	r4, r4, #1
 8002276:	b2ad      	uxth	r5, r5
 8002278:	5354      	strh	r4, [r2, r5]
 800227a:	780a      	ldrb	r2, [r1, #0]
 800227c:	894c      	ldrh	r4, [r1, #10]
 800227e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002282:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002286:	0864      	lsrs	r4, r4, #1
 8002288:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800228c:	0064      	lsls	r4, r4, #1
 800228e:	b2ad      	uxth	r5, r5
 8002290:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 8002292:	784a      	ldrb	r2, [r1, #1]
 8002294:	2a00      	cmp	r2, #0
 8002296:	d142      	bne.n	800231e <USB_ActivateEndpoint+0x18e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002298:	780a      	ldrb	r2, [r1, #0]
 800229a:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 800229e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80022a2:	046d      	lsls	r5, r5, #17
 80022a4:	d50b      	bpl.n	80022be <USB_ActivateEndpoint+0x12e>
 80022a6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80022aa:	4026      	ands	r6, r4
 80022ac:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 80022b0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80022b4:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 80022b8:	780c      	ldrb	r4, [r1, #0]
 80022ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022be:	8822      	ldrh	r2, [r4, #0]
 80022c0:	0656      	lsls	r6, r2, #25
 80022c2:	d50c      	bpl.n	80022de <USB_ActivateEndpoint+0x14e>
 80022c4:	8822      	ldrh	r2, [r4, #0]
 80022c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022ca:	0512      	lsls	r2, r2, #20
 80022cc:	0d12      	lsrs	r2, r2, #20
 80022ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022d6:	8022      	strh	r2, [r4, #0]
 80022d8:	780c      	ldrb	r4, [r1, #0]
 80022da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022de:	f248 0680 	movw	r6, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80022e2:	8822      	ldrh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022e4:	4d6c      	ldr	r5, [pc, #432]	; (8002498 <USB_ActivateEndpoint+0x308>)
      PCD_TX_DTOG(USBx, ep->num);
 80022e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022ea:	0512      	lsls	r2, r2, #20
 80022ec:	0d12      	lsrs	r2, r2, #20
 80022ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022f6:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022f8:	780c      	ldrb	r4, [r1, #0]
 80022fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022fe:	402a      	ands	r2, r5
 8002300:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002304:	4332      	orrs	r2, r6
 8002306:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800230a:	7809      	ldrb	r1, [r1, #0]
 800230c:	4a61      	ldr	r2, [pc, #388]	; (8002494 <USB_ActivateEndpoint+0x304>)
 800230e:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
 8002312:	4022      	ands	r2, r4
 8002314:	4332      	orrs	r2, r6
 8002316:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 800231a:	bc70      	pop	{r4, r5, r6}
 800231c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800231e:	780a      	ldrb	r2, [r1, #0]
 8002320:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8002324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8002328:	046d      	lsls	r5, r5, #17
 800232a:	d50b      	bpl.n	8002344 <USB_ActivateEndpoint+0x1b4>
 800232c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002330:	4026      	ands	r6, r4
 8002332:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8002336:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 800233a:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 800233e:	780c      	ldrb	r4, [r1, #0]
 8002340:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002344:	8822      	ldrh	r2, [r4, #0]
 8002346:	0652      	lsls	r2, r2, #25
 8002348:	d50c      	bpl.n	8002364 <USB_ActivateEndpoint+0x1d4>
 800234a:	8822      	ldrh	r2, [r4, #0]
 800234c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002350:	0512      	lsls	r2, r2, #20
 8002352:	0d12      	lsrs	r2, r2, #20
 8002354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002358:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800235c:	8022      	strh	r2, [r4, #0]
 800235e:	780c      	ldrb	r4, [r1, #0]
 8002360:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_RX_DTOG(USBx, ep->num);
 8002364:	8822      	ldrh	r2, [r4, #0]
 8002366:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800236a:	0512      	lsls	r2, r2, #20
 800236c:	0d12      	lsrs	r2, r2, #20
 800236e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002376:	8022      	strh	r2, [r4, #0]
      if (ep->type != EP_TYPE_ISOC)
 8002378:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800237a:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 800237c:	2a01      	cmp	r2, #1
 800237e:	d061      	beq.n	8002444 <USB_ActivateEndpoint+0x2b4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002380:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002384:	4a43      	ldr	r2, [pc, #268]	; (8002494 <USB_ActivateEndpoint+0x304>)
 8002386:	402a      	ands	r2, r5
 8002388:	f082 0220 	eor.w	r2, r2, #32
 800238c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002390:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002394:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002398:	7809      	ldrb	r1, [r1, #0]
}
 800239a:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800239c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80023a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023a4:	0492      	lsls	r2, r2, #18
 80023a6:	0c92      	lsrs	r2, r2, #18
 80023a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023b0:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80023b4:	4770      	bx	lr
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80023b6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80023ba:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80023bc:	4432      	add	r2, r6
 80023be:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80023c2:	780a      	ldrb	r2, [r1, #0]
 80023c4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80023c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80023cc:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80023d0:	b2a4      	uxth	r4, r4
 80023d2:	b365      	cbz	r5, 800242e <USB_ActivateEndpoint+0x29e>
 80023d4:	2d3e      	cmp	r5, #62	; 0x3e
 80023d6:	d84d      	bhi.n	8002474 <USB_ActivateEndpoint+0x2e4>
 80023d8:	086e      	lsrs	r6, r5, #1
 80023da:	07ed      	lsls	r5, r5, #31
 80023dc:	bf48      	it	mi
 80023de:	3601      	addmi	r6, #1
 80023e0:	02b6      	lsls	r6, r6, #10
 80023e2:	b2b6      	uxth	r6, r6
 80023e4:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023e6:	780c      	ldrb	r4, [r1, #0]
 80023e8:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80023ec:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 80023f0:	046e      	lsls	r6, r5, #17
 80023f2:	d50e      	bpl.n	8002412 <USB_ActivateEndpoint+0x282>
 80023f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80023f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023fc:	0512      	lsls	r2, r2, #20
 80023fe:	0d12      	lsrs	r2, r2, #20
 8002400:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002408:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800240c:	780a      	ldrb	r2, [r1, #0]
 800240e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002412:	8811      	ldrh	r1, [r2, #0]
 8002414:	4b20      	ldr	r3, [pc, #128]	; (8002498 <USB_ActivateEndpoint+0x308>)
}
 8002416:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002418:	400b      	ands	r3, r1
 800241a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002426:	8013      	strh	r3, [r2, #0]
}
 8002428:	4770      	bx	lr
      ret = HAL_ERROR;
 800242a:	2001      	movs	r0, #1
 800242c:	e6c0      	b.n	80021b0 <USB_ActivateEndpoint+0x20>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800242e:	5b15      	ldrh	r5, [r2, r4]
 8002430:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8002434:	042d      	lsls	r5, r5, #16
 8002436:	0c2d      	lsrs	r5, r5, #16
 8002438:	5315      	strh	r5, [r2, r4]
 800243a:	5b15      	ldrh	r5, [r2, r4]
 800243c:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8002440:	5315      	strh	r5, [r2, r4]
 8002442:	e7d0      	b.n	80023e6 <USB_ActivateEndpoint+0x256>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002444:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002448:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800244c:	0512      	lsls	r2, r2, #20
 800244e:	0d12      	lsrs	r2, r2, #20
 8002450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002458:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 800245c:	e79c      	b.n	8002398 <USB_ActivateEndpoint+0x208>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800245e:	8823      	ldrh	r3, [r4, #0]
 8002460:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	0d1b      	lsrs	r3, r3, #20
 8002468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	8023      	strh	r3, [r4, #0]
 8002472:	e752      	b.n	800231a <USB_ActivateEndpoint+0x18a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002474:	096e      	lsrs	r6, r5, #5
 8002476:	06ed      	lsls	r5, r5, #27
 8002478:	4d08      	ldr	r5, [pc, #32]	; (800249c <USB_ActivateEndpoint+0x30c>)
 800247a:	bf08      	it	eq
 800247c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002480:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8002484:	b2ad      	uxth	r5, r5
 8002486:	5315      	strh	r5, [r2, r4]
 8002488:	e7ad      	b.n	80023e6 <USB_ActivateEndpoint+0x256>
 800248a:	bf00      	nop
 800248c:	ffff898f 	.word	0xffff898f
 8002490:	ffff8f8f 	.word	0xffff8f8f
 8002494:	ffff8fbf 	.word	0xffff8fbf
 8002498:	ffffbf8f 	.word	0xffffbf8f
 800249c:	ffff8000 	.word	0xffff8000

080024a0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80024a0:	b430      	push	{r4, r5}
 80024a2:	780a      	ldrb	r2, [r1, #0]
  if (ep->doublebuffer == 0U)
 80024a4:	7b0d      	ldrb	r5, [r1, #12]
 80024a6:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80024aa:	784c      	ldrb	r4, [r1, #1]
 80024ac:	bb15      	cbnz	r5, 80024f4 <USB_DeactivateEndpoint+0x54>
  {
    if (ep->is_in != 0U)
 80024ae:	2c00      	cmp	r4, #0
 80024b0:	f000 8099 	beq.w	80025e6 <USB_DeactivateEndpoint+0x146>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80024b4:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80024b8:	0664      	lsls	r4, r4, #25
 80024ba:	d50e      	bpl.n	80024da <USB_DeactivateEndpoint+0x3a>
 80024bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c4:	051b      	lsls	r3, r3, #20
 80024c6:	0d1b      	lsrs	r3, r3, #20
 80024c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80024d4:	780b      	ldrb	r3, [r1, #0]
 80024d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024da:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80024dc:	2000      	movs	r0, #0
 80024de:	bc30      	pop	{r4, r5}
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024e4:	0512      	lsls	r2, r2, #20
 80024e6:	0d12      	lsrs	r2, r2, #20
 80024e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024f0:	801a      	strh	r2, [r3, #0]
}
 80024f2:	4770      	bx	lr
    if (ep->is_in == 0U)
 80024f4:	2c00      	cmp	r4, #0
 80024f6:	d141      	bne.n	800257c <USB_DeactivateEndpoint+0xdc>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80024f8:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80024fc:	0464      	lsls	r4, r4, #17
 80024fe:	d50e      	bpl.n	800251e <USB_DeactivateEndpoint+0x7e>
 8002500:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002508:	051b      	lsls	r3, r3, #20
 800250a:	0d1b      	lsrs	r3, r3, #20
 800250c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002514:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002518:	780b      	ldrb	r3, [r1, #0]
 800251a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	0655      	lsls	r5, r2, #25
 8002522:	d50c      	bpl.n	800253e <USB_DeactivateEndpoint+0x9e>
 8002524:	881a      	ldrh	r2, [r3, #0]
 8002526:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800252a:	0512      	lsls	r2, r2, #20
 800252c:	0d12      	lsrs	r2, r2, #20
 800252e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002532:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002536:	801a      	strh	r2, [r3, #0]
 8002538:	780b      	ldrb	r3, [r1, #0]
 800253a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800253e:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8002542:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002544:	4c3f      	ldr	r4, [pc, #252]	; (8002644 <USB_DeactivateEndpoint+0x1a4>)
      PCD_TX_DTOG(USBx, ep->num);
 8002546:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800254a:	0512      	lsls	r2, r2, #20
 800254c:	0d12      	lsrs	r2, r2, #20
 800254e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002552:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002556:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002558:	780a      	ldrb	r2, [r1, #0]
 800255a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800255e:	4023      	ands	r3, r4
 8002560:	432b      	orrs	r3, r5
 8002562:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002566:	780a      	ldrb	r2, [r1, #0]
 8002568:	4b37      	ldr	r3, [pc, #220]	; (8002648 <USB_DeactivateEndpoint+0x1a8>)
 800256a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800256e:	400b      	ands	r3, r1
 8002570:	431d      	orrs	r5, r3
 8002572:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8002576:	2000      	movs	r0, #0
 8002578:	bc30      	pop	{r4, r5}
 800257a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800257c:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8002580:	0464      	lsls	r4, r4, #17
 8002582:	d50e      	bpl.n	80025a2 <USB_DeactivateEndpoint+0x102>
 8002584:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800258c:	051b      	lsls	r3, r3, #20
 800258e:	0d1b      	lsrs	r3, r3, #20
 8002590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002598:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800259c:	780b      	ldrb	r3, [r1, #0]
 800259e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	0652      	lsls	r2, r2, #25
 80025a6:	d43e      	bmi.n	8002626 <USB_DeactivateEndpoint+0x186>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025a8:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80025ac:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025ae:	4c26      	ldr	r4, [pc, #152]	; (8002648 <USB_DeactivateEndpoint+0x1a8>)
      PCD_RX_DTOG(USBx, ep->num);
 80025b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025b4:	0512      	lsls	r2, r2, #20
 80025b6:	0d12      	lsrs	r2, r2, #20
 80025b8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025c2:	780a      	ldrb	r2, [r1, #0]
 80025c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025c8:	4023      	ands	r3, r4
 80025ca:	432b      	orrs	r3, r5
 80025cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80025d0:	780a      	ldrb	r2, [r1, #0]
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <USB_DeactivateEndpoint+0x1a4>)
 80025d4:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80025d8:	400b      	ands	r3, r1
 80025da:	431d      	orrs	r5, r3
 80025dc:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 80025e0:	2000      	movs	r0, #0
 80025e2:	bc30      	pop	{r4, r5}
 80025e4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80025e6:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80025ea:	0465      	lsls	r5, r4, #17
 80025ec:	d50e      	bpl.n	800260c <USB_DeactivateEndpoint+0x16c>
 80025ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f6:	051b      	lsls	r3, r3, #20
 80025f8:	0d1b      	lsrs	r3, r3, #20
 80025fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002602:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002606:	780b      	ldrb	r3, [r1, #0]
 8002608:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800260c:	881a      	ldrh	r2, [r3, #0]
}
 800260e:	2000      	movs	r0, #0
 8002610:	bc30      	pop	{r4, r5}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002612:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002616:	0492      	lsls	r2, r2, #18
 8002618:	0c92      	lsrs	r2, r2, #18
 800261a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002622:	801a      	strh	r2, [r3, #0]
}
 8002624:	4770      	bx	lr
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002626:	881a      	ldrh	r2, [r3, #0]
 8002628:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800262c:	0512      	lsls	r2, r2, #20
 800262e:	0d12      	lsrs	r2, r2, #20
 8002630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002634:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	780b      	ldrb	r3, [r1, #0]
 800263c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002640:	e7b2      	b.n	80025a8 <USB_DeactivateEndpoint+0x108>
 8002642:	bf00      	nop
 8002644:	ffffbf8f 	.word	0xffffbf8f
 8002648:	ffff8fbf 	.word	0xffff8fbf

0800264c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800264c:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800264e:	784c      	ldrb	r4, [r1, #1]
 8002650:	698a      	ldr	r2, [r1, #24]
 8002652:	2c01      	cmp	r4, #1
 8002654:	690b      	ldr	r3, [r1, #16]
 8002656:	d05d      	beq.n	8002714 <USB_EPStartXfer+0xc8>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002658:	429a      	cmp	r2, r3
 800265a:	d828      	bhi.n	80026ae <USB_EPStartXfer+0x62>
      ep->xfer_len -= len;
    }
    else
    {
      len = ep->xfer_len;
      ep->xfer_len = 0U;
 800265c:	2500      	movs	r5, #0
 800265e:	618d      	str	r5, [r1, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8002660:	7b0d      	ldrb	r5, [r1, #12]
      ep->xfer_len = 0U;
 8002662:	4613      	mov	r3, r2
 8002664:	780a      	ldrb	r2, [r1, #0]
    if (ep->doublebuffer == 0U)
 8002666:	bb45      	cbnz	r5, 80026ba <USB_EPStartXfer+0x6e>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002668:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800266c:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	442c      	add	r4, r5
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8083 	beq.w	8002780 <USB_EPStartXfer+0x134>
 800267a:	2b3e      	cmp	r3, #62	; 0x3e
 800267c:	f200 80ea 	bhi.w	8002854 <USB_EPStartXfer+0x208>
 8002680:	085d      	lsrs	r5, r3, #1
 8002682:	07db      	lsls	r3, r3, #31
 8002684:	bf48      	it	mi
 8002686:	3501      	addmi	r5, #1
 8002688:	02ad      	lsls	r5, r5, #10
 800268a:	b2ad      	uxth	r5, r5
 800268c:	52a5      	strh	r5, [r4, r2]
 800268e:	780a      	ldrb	r2, [r1, #0]
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002690:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8002694:	4b81      	ldr	r3, [pc, #516]	; (800289c <USB_EPStartXfer+0x250>)
  }

  return HAL_OK;
}
 8002696:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002698:	400b      	ands	r3, r1
 800269a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80026aa:	2000      	movs	r0, #0
 80026ac:	4770      	bx	lr
    if (ep->doublebuffer == 0U)
 80026ae:	7b0d      	ldrb	r5, [r1, #12]
      ep->xfer_len -= len;
 80026b0:	1ad2      	subs	r2, r2, r3
 80026b2:	618a      	str	r2, [r1, #24]
 80026b4:	780a      	ldrb	r2, [r1, #0]
    if (ep->doublebuffer == 0U)
 80026b6:	2d00      	cmp	r5, #0
 80026b8:	d0d6      	beq.n	8002668 <USB_EPStartXfer+0x1c>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80026ba:	2c00      	cmp	r4, #0
 80026bc:	d1e8      	bne.n	8002690 <USB_EPStartXfer+0x44>
 80026be:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80026c2:	f200 4404 	addw	r4, r0, #1028	; 0x404
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	442c      	add	r4, r5
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 80a9 	bne.w	8002822 <USB_EPStartXfer+0x1d6>
 80026d0:	5aa5      	ldrh	r5, [r4, r2]
 80026d2:	4e73      	ldr	r6, [pc, #460]	; (80028a0 <USB_EPStartXfer+0x254>)
 80026d4:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80026d8:	042d      	lsls	r5, r5, #16
 80026da:	0c2d      	lsrs	r5, r5, #16
 80026dc:	52a5      	strh	r5, [r4, r2]
 80026de:	5aa5      	ldrh	r5, [r4, r2]
 80026e0:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80026e4:	52a5      	strh	r5, [r4, r2]
 80026e6:	784c      	ldrb	r4, [r1, #1]
 80026e8:	2c00      	cmp	r4, #0
 80026ea:	f040 80a5 	bne.w	8002838 <USB_EPStartXfer+0x1ec>
 80026ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80026f2:	780a      	ldrb	r2, [r1, #0]
 80026f4:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	441c      	add	r4, r3
 80026fc:	5aa3      	ldrh	r3, [r4, r2]
 80026fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	52a3      	strh	r3, [r4, r2]
 8002708:	5aa3      	ldrh	r3, [r4, r2]
 800270a:	4333      	orrs	r3, r6
 800270c:	b29b      	uxth	r3, r3
 800270e:	52a3      	strh	r3, [r4, r2]
 8002710:	780a      	ldrb	r2, [r1, #0]
 8002712:	e7bd      	b.n	8002690 <USB_EPStartXfer+0x44>
    if (ep->xfer_len > ep->maxpacket)
 8002714:	429a      	cmp	r2, r3
 8002716:	d830      	bhi.n	800277a <USB_EPStartXfer+0x12e>
      ep->xfer_len = 0U;
 8002718:	2400      	movs	r4, #0
 800271a:	4613      	mov	r3, r2
 800271c:	618c      	str	r4, [r1, #24]
 800271e:	b29a      	uxth	r2, r3
    if (ep->doublebuffer == 0U)
 8002720:	7b0d      	ldrb	r5, [r1, #12]
 8002722:	3201      	adds	r2, #1
 8002724:	0856      	lsrs	r6, r2, #1
 8002726:	b29b      	uxth	r3, r3
 8002728:	694a      	ldr	r2, [r1, #20]
 800272a:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 800272e:	2d00      	cmp	r5, #0
 8002730:	d132      	bne.n	8002798 <USB_EPStartXfer+0x14c>
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002732:	88cc      	ldrh	r4, [r1, #6]
 8002734:	eb07 0444 	add.w	r4, r7, r4, lsl #1

  for (i = n; i != 0U; i--)
 8002738:	b13e      	cbz	r6, 800274a <USB_EPStartXfer+0xfe>
 800273a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800273e:	f832 5b02 	ldrh.w	r5, [r2], #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8002742:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8002746:	42a6      	cmp	r6, r4
 8002748:	d1f9      	bne.n	800273e <USB_EPStartXfer+0xf2>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800274a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800274e:	780c      	ldrb	r4, [r1, #0]
 8002750:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002754:	442a      	add	r2, r5
 8002756:	0124      	lsls	r4, r4, #4
 8002758:	52a3      	strh	r3, [r4, r2]
 800275a:	780a      	ldrb	r2, [r1, #0]
 800275c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002760:	8811      	ldrh	r1, [r2, #0]
 8002762:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <USB_EPStartXfer+0x258>)
}
 8002764:	2000      	movs	r0, #0
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002768:	400b      	ands	r3, r1
 800276a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800276e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	8013      	strh	r3, [r2, #0]
}
 8002778:	4770      	bx	lr
      ep->xfer_len -= len;
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	618a      	str	r2, [r1, #24]
 800277e:	e7ce      	b.n	800271e <USB_EPStartXfer+0xd2>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002780:	5aa3      	ldrh	r3, [r4, r2]
 8002782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002786:	041b      	lsls	r3, r3, #16
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	52a3      	strh	r3, [r4, r2]
 800278c:	5aa3      	ldrh	r3, [r4, r2]
 800278e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002792:	52a3      	strh	r3, [r4, r2]
 8002794:	780a      	ldrb	r2, [r1, #0]
 8002796:	e77b      	b.n	8002690 <USB_EPStartXfer+0x44>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002798:	780d      	ldrb	r5, [r1, #0]
 800279a:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 800279e:	012d      	lsls	r5, r5, #4
 80027a0:	0664      	lsls	r4, r4, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027a2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027a6:	d524      	bpl.n	80027f2 <USB_EPStartXfer+0x1a6>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027a8:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80027ac:	4464      	add	r4, ip
 80027ae:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr1;
 80027b0:	894c      	ldrh	r4, [r1, #10]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80027b2:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 80027b6:	b13e      	cbz	r6, 80027c8 <USB_EPStartXfer+0x17c>
 80027b8:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 80027bc:	f832 5b02 	ldrh.w	r5, [r2], #2
 80027c0:	4293      	cmp	r3, r2
    *pdwVal = (uint16_t)temp2;
 80027c2:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 80027c6:	d1f9      	bne.n	80027bc <USB_EPStartXfer+0x170>
 80027c8:	780c      	ldrb	r4, [r1, #0]
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80027ca:	784b      	ldrb	r3, [r1, #1]
 80027cc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80027d0:	b9ab      	cbnz	r3, 80027fe <USB_EPStartXfer+0x1b2>
 80027d2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80027d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	0d1b      	lsrs	r3, r3, #20
 80027de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027e6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80027ea:	780a      	ldrb	r2, [r1, #0]
 80027ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80027f0:	e7b6      	b.n	8002760 <USB_EPStartXfer+0x114>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80027f2:	f200 4404 	addw	r4, r0, #1028	; 0x404
 80027f6:	4464      	add	r4, ip
 80027f8:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr0;
 80027fa:	890c      	ldrh	r4, [r1, #8]
 80027fc:	e7d9      	b.n	80027b2 <USB_EPStartXfer+0x166>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d1ae      	bne.n	8002760 <USB_EPStartXfer+0x114>
 8002802:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	0d1b      	lsrs	r3, r3, #20
 800280e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002816:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800281a:	780a      	ldrb	r2, [r1, #0]
 800281c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002820:	e79e      	b.n	8002760 <USB_EPStartXfer+0x114>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002822:	2b3e      	cmp	r3, #62	; 0x3e
 8002824:	d822      	bhi.n	800286c <USB_EPStartXfer+0x220>
 8002826:	085d      	lsrs	r5, r3, #1
 8002828:	07de      	lsls	r6, r3, #31
 800282a:	bf48      	it	mi
 800282c:	3501      	addmi	r5, #1
 800282e:	02ad      	lsls	r5, r5, #10
 8002830:	b2ad      	uxth	r5, r5
 8002832:	52a5      	strh	r5, [r4, r2]
 8002834:	784c      	ldrb	r4, [r1, #1]
 8002836:	b334      	cbz	r4, 8002886 <USB_EPStartXfer+0x23a>
 8002838:	2c01      	cmp	r4, #1
 800283a:	780a      	ldrb	r2, [r1, #0]
 800283c:	f47f af28 	bne.w	8002690 <USB_EPStartXfer+0x44>
 8002840:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8002844:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	b29b      	uxth	r3, r3
 800284c:	442c      	add	r4, r5
 800284e:	52a3      	strh	r3, [r4, r2]
 8002850:	780a      	ldrb	r2, [r1, #0]
 8002852:	e71d      	b.n	8002690 <USB_EPStartXfer+0x44>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002854:	095d      	lsrs	r5, r3, #5
 8002856:	06df      	lsls	r7, r3, #27
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <USB_EPStartXfer+0x254>)
 800285a:	bf08      	it	eq
 800285c:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8002860:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 8002864:	b29b      	uxth	r3, r3
 8002866:	52a3      	strh	r3, [r4, r2]
 8002868:	780a      	ldrb	r2, [r1, #0]
 800286a:	e711      	b.n	8002690 <USB_EPStartXfer+0x44>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800286c:	095e      	lsrs	r6, r3, #5
 800286e:	06dd      	lsls	r5, r3, #27
 8002870:	4d0b      	ldr	r5, [pc, #44]	; (80028a0 <USB_EPStartXfer+0x254>)
 8002872:	bf08      	it	eq
 8002874:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002878:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 800287c:	b2ad      	uxth	r5, r5
 800287e:	52a5      	strh	r5, [r4, r2]
 8002880:	784c      	ldrb	r4, [r1, #1]
 8002882:	2c00      	cmp	r4, #0
 8002884:	d1d8      	bne.n	8002838 <USB_EPStartXfer+0x1ec>
 8002886:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 800288a:	780b      	ldrb	r3, [r1, #0]
 800288c:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002890:	4422      	add	r2, r4
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	52d5      	strh	r5, [r2, r3]
 8002896:	780a      	ldrb	r2, [r1, #0]
 8002898:	e6fa      	b.n	8002690 <USB_EPStartXfer+0x44>
 800289a:	bf00      	nop
 800289c:	ffffbf8f 	.word	0xffffbf8f
 80028a0:	ffff8000 	.word	0xffff8000
 80028a4:	ffff8fbf 	.word	0xffff8fbf

080028a8 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 80028a8:	784b      	ldrb	r3, [r1, #1]
 80028aa:	780a      	ldrb	r2, [r1, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80028ac:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
  if (ep->is_in != 0U)
 80028b0:	b95b      	cbnz	r3, 80028ca <USB_EPSetStall+0x22>
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <USB_EPSetStall+0x3c>)
 80028b4:	400b      	ands	r3, r1
 80028b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80028ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80028c6:	2000      	movs	r0, #0
 80028c8:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <USB_EPSetStall+0x40>)
 80028cc:	400b      	ands	r3, r1
 80028ce:	f083 0310 	eor.w	r3, r3, #16
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80028de:	2000      	movs	r0, #0
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	ffffbf8f 	.word	0xffffbf8f
 80028e8:	ffff8fbf 	.word	0xffff8fbf

080028ec <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 80028ec:	7b0b      	ldrb	r3, [r1, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d139      	bne.n	8002966 <USB_EPClearStall+0x7a>
{
 80028f2:	b410      	push	{r4}
 80028f4:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 80028f6:	784c      	ldrb	r4, [r1, #1]
 80028f8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80028fc:	b314      	cbz	r4, 8002944 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002902:	0652      	lsls	r2, r2, #25
 8002904:	d50b      	bpl.n	800291e <USB_EPClearStall+0x32>
 8002906:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800290a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800290e:	0512      	lsls	r2, r2, #20
 8002910:	0d12      	lsrs	r2, r2, #20
 8002912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002916:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800291a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800291e:	78cb      	ldrb	r3, [r1, #3]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d01d      	beq.n	8002960 <USB_EPClearStall+0x74>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002924:	780a      	ldrb	r2, [r1, #0]
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <USB_EPClearStall+0xa0>)
 8002928:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
}
 800292c:	bc10      	pop	{r4}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800292e:	400b      	ands	r3, r1
 8002930:	f083 0320 	eor.w	r3, r3, #32
 8002934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8002940:	2000      	movs	r0, #0
 8002942:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002944:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8002948:	0464      	lsls	r4, r4, #17
 800294a:	d40e      	bmi.n	800296a <USB_EPClearStall+0x7e>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800294c:	8811      	ldrh	r1, [r2, #0]
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <USB_EPClearStall+0xa4>)
 8002950:	400b      	ands	r3, r1
 8002952:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	8013      	strh	r3, [r2, #0]
}
 8002960:	2000      	movs	r0, #0
 8002962:	bc10      	pop	{r4}
 8002964:	4770      	bx	lr
 8002966:	2000      	movs	r0, #0
 8002968:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800296a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800296e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002972:	0512      	lsls	r2, r2, #20
 8002974:	0d12      	lsrs	r2, r2, #20
 8002976:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800297a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800297e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8002982:	780a      	ldrb	r2, [r1, #0]
 8002984:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002988:	e7e0      	b.n	800294c <USB_EPClearStall+0x60>
 800298a:	bf00      	nop
 800298c:	ffff8fbf 	.word	0xffff8fbf
 8002990:	ffffbf8f 	.word	0xffffbf8f

08002994 <USB_SetDevAddress>:
  if (address == 0U)
 8002994:	b911      	cbnz	r1, 800299c <USB_SetDevAddress+0x8>
    USBx->DADDR = USB_DADDR_EF;
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800299c:	2000      	movs	r0, #0
 800299e:	4770      	bx	lr

080029a0 <USB_DevConnect>:
 80029a0:	2000      	movs	r0, #0
 80029a2:	4770      	bx	lr

080029a4 <USB_DevDisconnect>:
 80029a4:	2000      	movs	r0, #0
 80029a6:	4770      	bx	lr

080029a8 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 80029a8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop

080029b0 <USB_EP0_OutStart>:
}
 80029b0:	2000      	movs	r0, #0
 80029b2:	4770      	bx	lr

080029b4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80029b4:	eb00 0242 	add.w	r2, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 80029b8:	0858      	lsrs	r0, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80029ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80029be:	d01a      	beq.n	80029f6 <USB_ReadPMA+0x42>
{
 80029c0:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80029c2:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 80029c4:	4606      	mov	r6, r0
 80029c6:	1c8d      	adds	r5, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 80029c8:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 80029cc:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 80029ce:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80029d0:	ea4f 2c14 	mov.w	ip, r4, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80029d4:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80029d8:	f805 cc01 	strb.w	ip, [r5, #-1]
 80029dc:	f105 0502 	add.w	r5, r5, #2
  for (i = n; i != 0U; i--)
 80029e0:	d1f2      	bne.n	80029c8 <USB_ReadPMA+0x14>
  if ((wNBytes % 2U) != 0U)
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 80029e2:	bcf0      	pop	{r4, r5, r6, r7}
 80029e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80029e8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  if ((wNBytes % 2U) != 0U)
 80029ec:	07d8      	lsls	r0, r3, #31
    temp = *pdwVal;
 80029ee:	bf44      	itt	mi
 80029f0:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80029f2:	700b      	strbmi	r3, [r1, #0]
}
 80029f4:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 80029f6:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 80029f8:	bf44      	itt	mi
 80029fa:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80029fc:	700b      	strbmi	r3, [r1, #0]
 80029fe:	4770      	bx	lr

08002a00 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002a00:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002a04:	b183      	cbz	r3, 8002a28 <USBD_CDC_EP0_RxReady+0x28>
{
 8002a06:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002a08:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002a0c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002a10:	28ff      	cmp	r0, #255	; 0xff
 8002a12:	d007      	beq.n	8002a24 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002a1e:	23ff      	movs	r3, #255	; 0xff
 8002a20:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8002a24:	2000      	movs	r0, #0
 8002a26:	bd10      	pop	{r4, pc}
 8002a28:	2000      	movs	r0, #0
 8002a2a:	4770      	bx	lr

08002a2c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8002a2c:	2343      	movs	r3, #67	; 0x43
 8002a2e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002a30:	4800      	ldr	r0, [pc, #0]	; (8002a34 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002a32:	4770      	bx	lr
 8002a34:	20000044 	.word	0x20000044

08002a38 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8002a38:	2343      	movs	r3, #67	; 0x43
 8002a3a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002a3c:	4800      	ldr	r0, [pc, #0]	; (8002a40 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002a3e:	4770      	bx	lr
 8002a40:	20000088 	.word	0x20000088

08002a44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002a44:	2343      	movs	r3, #67	; 0x43
 8002a46:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002a48:	4800      	ldr	r0, [pc, #0]	; (8002a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002a4a:	4770      	bx	lr
 8002a4c:	200000d8 	.word	0x200000d8

08002a50 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8002a50:	230a      	movs	r3, #10
 8002a52:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002a54:	4800      	ldr	r0, [pc, #0]	; (8002a58 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002a56:	4770      	bx	lr
 8002a58:	200000cc 	.word	0x200000cc

08002a5c <USBD_CDC_DataOut>:
{
 8002a5c:	b538      	push	{r3, r4, r5, lr}
 8002a5e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002a60:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002a64:	f000 ff54 	bl	8003910 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8002a68:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002a6c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8002a70:	b14b      	cbz	r3, 8002a86 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002a72:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002a76:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8002a80:	4798      	blx	r3
    return USBD_OK;
 8002a82:	2000      	movs	r0, #0
}
 8002a84:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002a86:	2002      	movs	r0, #2
}
 8002a88:	bd38      	pop	{r3, r4, r5, pc}
 8002a8a:	bf00      	nop

08002a8c <USBD_CDC_DataIn>:
{
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002a8e:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8002a92:	b1d6      	cbz	r6, 8002aca <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002a94:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8002a98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002a9c:	69df      	ldr	r7, [r3, #28]
 8002a9e:	b14f      	cbz	r7, 8002ab4 <USBD_CDC_DataIn+0x28>
 8002aa0:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8002aa4:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8002aa8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002aaa:	fbb7 f4f2 	udiv	r4, r7, r2
 8002aae:	fb02 7414 	mls	r4, r2, r4, r7
 8002ab2:	b11c      	cbz	r4, 8002abc <USBD_CDC_DataIn+0x30>
      hcdc->TxState = 0U;
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 8002aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8002abc:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002abe:	4622      	mov	r2, r4
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	f000 ff09 	bl	80038d8 <USBD_LL_Transmit>
    return USBD_OK;
 8002ac6:	4620      	mov	r0, r4
}
 8002ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8002aca:	2002      	movs	r0, #2
}
 8002acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ace:	bf00      	nop

08002ad0 <USBD_CDC_Setup>:
{
 8002ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8002ad4:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ad6:	780b      	ldrb	r3, [r1, #0]
{
 8002ad8:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ada:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8002ade:	460d      	mov	r5, r1
 8002ae0:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002ae2:	f8d0 82b8 	ldr.w	r8, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8002ae6:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8002aea:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002aee:	d00f      	beq.n	8002b10 <USBD_CDC_Setup+0x40>
 8002af0:	2c20      	cmp	r4, #32
 8002af2:	d117      	bne.n	8002b24 <USBD_CDC_Setup+0x54>
      if (req->wLength)
 8002af4:	88cc      	ldrh	r4, [r1, #6]
 8002af6:	f891 c001 	ldrb.w	ip, [r1, #1]
 8002afa:	bb64      	cbnz	r4, 8002b56 <USBD_CDC_Setup+0x86>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002afc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002b00:	4622      	mov	r2, r4
 8002b02:	4660      	mov	r0, ip
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8002b08:	4620      	mov	r0, r4
}
 8002b0a:	b002      	add	sp, #8
 8002b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (req->bRequest)
 8002b10:	784f      	ldrb	r7, [r1, #1]
 8002b12:	2f0a      	cmp	r7, #10
 8002b14:	d014      	beq.n	8002b40 <USBD_CDC_Setup+0x70>
 8002b16:	2f0b      	cmp	r7, #11
 8002b18:	d00c      	beq.n	8002b34 <USBD_CDC_Setup+0x64>
 8002b1a:	b91f      	cbnz	r7, 8002b24 <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d028      	beq.n	8002b76 <USBD_CDC_Setup+0xa6>
          USBD_CtlError(pdev, req);
 8002b24:	4630      	mov	r0, r6
 8002b26:	4629      	mov	r1, r5
 8002b28:	f000 fc84 	bl	8003434 <USBD_CtlError>
          ret = USBD_FAIL;
 8002b2c:	2002      	movs	r0, #2
}
 8002b2e:	b002      	add	sp, #8
 8002b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002b34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d1f3      	bne.n	8002b24 <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	e7f6      	b.n	8002b2e <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b40:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d1ed      	bne.n	8002b24 <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f10d 0105 	add.w	r1, sp, #5
 8002b4e:	f000 fca3 	bl	8003498 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002b52:	4620      	mov	r0, r4
 8002b54:	e7eb      	b.n	8002b2e <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8002b56:	061b      	lsls	r3, r3, #24
 8002b58:	d514      	bpl.n	8002b84 <USBD_CDC_Setup+0xb4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002b5a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002b5e:	4622      	mov	r2, r4
 8002b60:	4660      	mov	r0, ip
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4641      	mov	r1, r8
 8002b66:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002b68:	88ea      	ldrh	r2, [r5, #6]
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f000 fc93 	bl	8003498 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002b72:	4638      	mov	r0, r7
 8002b74:	e7db      	b.n	8002b2e <USBD_CDC_Setup+0x5e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002b76:	2202      	movs	r2, #2
 8002b78:	f10d 0106 	add.w	r1, sp, #6
 8002b7c:	f000 fc8c 	bl	8003498 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002b80:	4638      	mov	r0, r7
 8002b82:	e7d4      	b.n	8002b2e <USBD_CDC_Setup+0x5e>
          hcdc->CmdOpCode = req->bRequest;
 8002b84:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002b88:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	4641      	mov	r1, r8
 8002b90:	f000 fc98 	bl	80034c4 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002b94:	4638      	mov	r0, r7
 8002b96:	e7ca      	b.n	8002b2e <USBD_CDC_Setup+0x5e>

08002b98 <USBD_CDC_DeInit>:
{
 8002b98:	b538      	push	{r3, r4, r5, lr}
 8002b9a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002b9c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002b9e:	2181      	movs	r1, #129	; 0x81
 8002ba0:	f000 fe52 	bl	8003848 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002ba4:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002ba6:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f000 fe4d 	bl	8003848 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002bae:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	2182      	movs	r1, #130	; 0x82
 8002bb6:	f000 fe47 	bl	8003848 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002bba:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002bbe:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8002bc0:	b14b      	cbz	r3, 8002bd6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002bc2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002bca:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8002bce:	f000 fea7 	bl	8003920 <USBD_static_free>
    pdev->pClassData = NULL;
 8002bd2:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bd38      	pop	{r3, r4, r5, pc}
 8002bda:	bf00      	nop

08002bdc <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002bdc:	7c03      	ldrb	r3, [r0, #16]
{
 8002bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be2:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002be4:	2501      	movs	r5, #1
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002be6:	bbbb      	cbnz	r3, 8002c58 <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bec:	2202      	movs	r2, #2
 8002bee:	2181      	movs	r1, #129	; 0x81
 8002bf0:	f000 fe1a 	bl	8003828 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002bf4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f000 fe12 	bl	8003828 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002c04:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002c08:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	2182      	movs	r1, #130	; 0x82
 8002c10:	4620      	mov	r0, r4
 8002c12:	f000 fe09 	bl	8003828 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002c16:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002c18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002c1c:	f000 fe7c 	bl	8003918 <USBD_static_malloc>
 8002c20:	4605      	mov	r5, r0
 8002c22:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002c26:	b368      	cbz	r0, 8002c84 <USBD_CDC_Init+0xa8>
    hcdc->TxState = 0U;
 8002c28:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002c2a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002c32:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002c36:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 8002c3a:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002c3e:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 8002c40:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002c44:	4620      	mov	r0, r4
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002c46:	f1b8 0f00 	cmp.w	r8, #0
 8002c4a:	d014      	beq.n	8002c76 <USBD_CDC_Init+0x9a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002c4c:	2340      	movs	r3, #64	; 0x40
 8002c4e:	f000 fe51 	bl	80038f4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002c52:	4630      	mov	r0, r6
}
 8002c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002c58:	2340      	movs	r3, #64	; 0x40
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	2181      	movs	r1, #129	; 0x81
 8002c5e:	f000 fde3 	bl	8003828 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002c62:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002c64:	4629      	mov	r1, r5
 8002c66:	2340      	movs	r3, #64	; 0x40
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 fddc 	bl	8003828 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002c70:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8002c74:	e7c8      	b.n	8002c08 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c7a:	f000 fe3b 	bl	80038f4 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002c7e:	4640      	mov	r0, r8
}
 8002c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8002c84:	4638      	mov	r0, r7
 8002c86:	e7e5      	b.n	8002c54 <USBD_CDC_Init+0x78>

08002c88 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8002c88:	b119      	cbz	r1, 8002c92 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8002c8a:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8002c8e:	2000      	movs	r0, #0
 8002c90:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002c92:	2002      	movs	r0, #2
  }

  return ret;
}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop

08002c98 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002c98:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8002c9c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002c9e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002ca2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002ca6:	4770      	bx	lr

08002ca8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002ca8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8002cac:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002cae:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002cb2:	4770      	bx	lr

08002cb4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002cb4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8002cb8:	b18a      	cbz	r2, 8002cde <USBD_CDC_ReceivePacket+0x2a>
{
 8002cba:	b510      	push	{r4, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002cbc:	7c04      	ldrb	r4, [r0, #16]
 8002cbe:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002cc2:	b12c      	cbz	r4, 8002cd0 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002cc4:	2340      	movs	r3, #64	; 0x40
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	f000 fe14 	bl	80038f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002ccc:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002cce:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	f000 fe0d 	bl	80038f4 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8002cda:	4620      	mov	r0, r4
}
 8002cdc:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8002cde:	2002      	movs	r0, #2
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002ce4:	b188      	cbz	r0, 8002d0a <USBD_Init+0x26>
{
 8002ce6:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002ce8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002cec:	b113      	cbz	r3, 8002cf4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002cf4:	b109      	cbz	r1, 8002cfa <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002cf6:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002cfa:	2301      	movs	r3, #1
  pdev->id = id;
 8002cfc:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002cfe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002d02:	f000 fd41 	bl	8003788 <USBD_LL_Init>

  return USBD_OK;
 8002d06:	2000      	movs	r0, #0
}
 8002d08:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002d0a:	2002      	movs	r0, #2
}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002d10:	b119      	cbz	r1, 8002d1a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002d12:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8002d16:	2000      	movs	r0, #0
 8002d18:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002d1a:	2002      	movs	r0, #2
  }

  return status;
}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002d20:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002d22:	f000 fd73 	bl	800380c <USBD_LL_Start>

  return USBD_OK;
}
 8002d26:	2000      	movs	r0, #0
 8002d28:	bd08      	pop	{r3, pc}
 8002d2a:	bf00      	nop

08002d2c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d2c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002d2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d32:	b11b      	cbz	r3, 8002d3c <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4798      	blx	r3
 8002d38:	b900      	cbnz	r0, 8002d3c <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002d3a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002d3c:	2002      	movs	r0, #2
}
 8002d3e:	bd08      	pop	{r3, pc}

08002d40 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d40:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002d42:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4798      	blx	r3

  return USBD_OK;
}
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	bd08      	pop	{r3, pc}
 8002d4e:	bf00      	nop

08002d50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002d54:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8002d58:	4628      	mov	r0, r5
 8002d5a:	f000 fb57 	bl	800340c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002d5e:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002d60:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 8002d64:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
  switch (pdev->request.bmRequest & 0x1FU)
 8002d68:	f001 031f 	and.w	r3, r1, #31
 8002d6c:	4283      	cmp	r3, r0
  pdev->ep0_state = USBD_EP0_SETUP;
 8002d6e:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002d72:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002d76:	d015      	beq.n	8002da4 <USBD_LL_SetupStage+0x54>
 8002d78:	d30e      	bcc.n	8002d98 <USBD_LL_SetupStage+0x48>
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d006      	beq.n	8002d8c <USBD_LL_SetupStage+0x3c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002d7e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002d82:	4620      	mov	r0, r4
 8002d84:	f000 fd6e 	bl	8003864 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 8002d88:	2000      	movs	r0, #0
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f000 faa6 	bl	80032e0 <USBD_StdEPReq>
}
 8002d94:	2000      	movs	r0, #0
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f000 f8f6 	bl	8002f8c <USBD_StdDevReq>
}
 8002da0:	2000      	movs	r0, #0
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002da4:	4629      	mov	r1, r5
 8002da6:	4620      	mov	r0, r4
 8002da8:	f000 fa6e 	bl	8003288 <USBD_StdItfReq>
}
 8002dac:	2000      	movs	r0, #0
 8002dae:	bd38      	pop	{r3, r4, r5, pc}

08002db0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002db4:	b941      	cbnz	r1, 8002dc8 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002db6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d00f      	beq.n	8002dde <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	d02e      	beq.n	8002e22 <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002dc4:	2000      	movs	r0, #0
}
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8002dc8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	b1c3      	cbz	r3, 8002e02 <USBD_LL_DataOutStage+0x52>
 8002dd0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002dd4:	2a03      	cmp	r2, #3
 8002dd6:	d114      	bne.n	8002e02 <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 8002dd8:	4798      	blx	r3
  return USBD_OK;
 8002dda:	2000      	movs	r0, #0
}
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	4616      	mov	r6, r2
      if (pep->rem_length > pep->maxpacket)
 8002de0:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8002de4:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d90c      	bls.n	8002e06 <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 8002dec:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 8002dee:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8002df0:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002df4:	bf8c      	ite	hi
 8002df6:	b29a      	uxthhi	r2, r3
 8002df8:	b292      	uxthls	r2, r2
 8002dfa:	4631      	mov	r1, r6
 8002dfc:	f000 fb72 	bl	80034e4 <USBD_CtlContinueRx>
 8002e00:	e7e0      	b.n	8002dc4 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8002e02:	2002      	movs	r0, #2
}
 8002e04:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002e06:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	b123      	cbz	r3, 8002e18 <USBD_LL_DataOutStage+0x68>
 8002e0e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002e12:	2a03      	cmp	r2, #3
 8002e14:	d100      	bne.n	8002e18 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 8002e16:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f000 fb6b 	bl	80034f4 <USBD_CtlSendStatus>
  return USBD_OK;
 8002e1e:	2000      	movs	r0, #0
}
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 8002e22:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002e26:	f000 fd1d 	bl	8003864 <USBD_LL_StallEP>
  return USBD_OK;
 8002e2a:	4620      	mov	r0, r4
}
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
 8002e2e:	bf00      	nop

08002e30 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002e34:	b981      	cbnz	r1, 8002e58 <USBD_LL_DataInStage+0x28>
 8002e36:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002e38:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002e3c:	2a02      	cmp	r2, #2
 8002e3e:	d019      	beq.n	8002e74 <USBD_LL_DataInStage+0x44>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002e40:	f032 0304 	bics.w	r3, r2, #4
 8002e44:	d102      	bne.n	8002e4c <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8002e46:	2180      	movs	r1, #128	; 0x80
 8002e48:	f000 fd0c 	bl	8003864 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002e4c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002e50:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d00b      	beq.n	8002e6e <USBD_LL_DataInStage+0x3e>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8002e58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	b363      	cbz	r3, 8002eba <USBD_LL_DataInStage+0x8a>
 8002e60:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002e64:	2a03      	cmp	r2, #3
 8002e66:	d128      	bne.n	8002eba <USBD_LL_DataInStage+0x8a>
    pdev->pClass->DataIn(pdev, epnum);
 8002e68:	4798      	blx	r3
  return USBD_OK;
 8002e6a:	2000      	movs	r0, #0
}
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8002e6e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8002e74:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 8002e78:	4296      	cmp	r6, r2
 8002e7a:	d820      	bhi.n	8002ebe <USBD_LL_DataInStage+0x8e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002e7c:	69c3      	ldr	r3, [r0, #28]
 8002e7e:	fbb3 f5f2 	udiv	r5, r3, r2
 8002e82:	fb02 3515 	mls	r5, r2, r5, r3
 8002e86:	b90d      	cbnz	r5, 8002e8c <USBD_LL_DataInStage+0x5c>
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d926      	bls.n	8002eda <USBD_LL_DataInStage+0xaa>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002e8c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	b12b      	cbz	r3, 8002ea0 <USBD_LL_DataInStage+0x70>
 8002e94:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002e98:	2a03      	cmp	r2, #3
 8002e9a:	d101      	bne.n	8002ea0 <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f000 fcde 	bl	8003864 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f000 fb2f 	bl	800350c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8002eae:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8002eb2:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d1ce      	bne.n	8002e56 <USBD_LL_DataInStage+0x26>
 8002eb8:	e7d9      	b.n	8002e6e <USBD_LL_DataInStage+0x3e>
    return USBD_FAIL;
 8002eba:	2002      	movs	r0, #2
}
 8002ebc:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8002ebe:	1ab2      	subs	r2, r6, r2
 8002ec0:	460d      	mov	r5, r1
 8002ec2:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	f000 faf4 	bl	80034b4 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002ecc:	462b      	mov	r3, r5
 8002ece:	462a      	mov	r2, r5
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 fd0e 	bl	80038f4 <USBD_LL_PrepareReceive>
 8002ed8:	e7b8      	b.n	8002e4c <USBD_LL_DataInStage+0x1c>
            (pep->total_length >= pep->maxpacket) &&
 8002eda:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d2d4      	bcs.n	8002e8c <USBD_LL_DataInStage+0x5c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002ee2:	462a      	mov	r2, r5
 8002ee4:	f000 fae6 	bl	80034b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002ee8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8002eec:	e7ee      	b.n	8002ecc <USBD_LL_DataInStage+0x9c>
 8002eee:	bf00      	nop

08002ef0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8002ef0:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002ef2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002ef4:	2640      	movs	r6, #64	; 0x40
{
 8002ef6:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002ef8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002efa:	4611      	mov	r1, r2
 8002efc:	4633      	mov	r3, r6
 8002efe:	f000 fc93 	bl	8003828 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002f02:	4633      	mov	r3, r6
 8002f04:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002f06:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f0a:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002f0e:	4620      	mov	r0, r4
 8002f10:	2200      	movs	r2, #0
 8002f12:	f000 fc89 	bl	8003828 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002f16:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002f18:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002f1c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f1e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f20:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002f24:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002f28:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002f2a:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8002f2e:	b123      	cbz	r3, 8002f3a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002f30:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002f34:	4620      	mov	r0, r4
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
 8002f3e:	bf00      	nop

08002f40 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002f40:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002f42:	2000      	movs	r0, #0
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop

08002f48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8002f48:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002f4a:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 8002f4c:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8002f50:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 8002f52:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 8002f5a:	4770      	bx	lr

08002f5c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002f5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002f60:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002f62:	bf04      	itt	eq
 8002f64:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8002f68:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	4770      	bx	lr

08002f70 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f70:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002f74:	2a03      	cmp	r2, #3
 8002f76:	d001      	beq.n	8002f7c <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8002f78:	2000      	movs	r0, #0
 8002f7a:	4770      	bx	lr
{
 8002f7c:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8002f7e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	b103      	cbz	r3, 8002f88 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8002f86:	4798      	blx	r3
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	bd08      	pop	{r3, pc}

08002f8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8002f8c:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f8e:	780b      	ldrb	r3, [r1, #0]
{
 8002f90:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002f96:	2b20      	cmp	r3, #32
{
 8002f98:	460d      	mov	r5, r1
 8002f9a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002f9c:	d028      	beq.n	8002ff0 <USBD_StdDevReq+0x64>
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d026      	beq.n	8002ff0 <USBD_StdDevReq+0x64>
 8002fa2:	b153      	cbz	r3, 8002fba <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f000 fc5c 	bl	8003864 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002fac:	4620      	mov	r0, r4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f000 fc58 	bl	8003864 <USBD_LL_StallEP>
}
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	b003      	add	sp, #12
 8002fb8:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8002fba:	784b      	ldrb	r3, [r1, #1]
 8002fbc:	2b09      	cmp	r3, #9
 8002fbe:	d8f1      	bhi.n	8002fa4 <USBD_StdDevReq+0x18>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <USBD_StdDevReq+0x3c>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08003045 	.word	0x08003045
 8002fcc:	08003071 	.word	0x08003071
 8002fd0:	08002fa5 	.word	0x08002fa5
 8002fd4:	0800308d 	.word	0x0800308d
 8002fd8:	08002fa5 	.word	0x08002fa5
 8002fdc:	08003099 	.word	0x08003099
 8002fe0:	080030d7 	.word	0x080030d7
 8002fe4:	08002fa5 	.word	0x08002fa5
 8002fe8:	0800310d 	.word	0x0800310d
 8002fec:	08003003 	.word	0x08003003
      pdev->pClass->Setup(pdev, req);
 8002ff0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	4798      	blx	r3
}
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	b003      	add	sp, #12
 8003000:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 8003002:	7889      	ldrb	r1, [r1, #2]
 8003004:	4d9f      	ldr	r5, [pc, #636]	; (8003284 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003006:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003008:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800300a:	d8cb      	bhi.n	8002fa4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800300c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003010:	2b02      	cmp	r3, #2
 8003012:	f000 810d 	beq.w	8003230 <USBD_StdDevReq+0x2a4>
 8003016:	2b03      	cmp	r3, #3
 8003018:	f040 80fe 	bne.w	8003218 <USBD_StdDevReq+0x28c>
        if (cfgidx == 0U)
 800301c:	2900      	cmp	r1, #0
 800301e:	f000 8127 	beq.w	8003270 <USBD_StdDevReq+0x2e4>
        else if (cfgidx != pdev->dev_config)
 8003022:	6841      	ldr	r1, [r0, #4]
 8003024:	2901      	cmp	r1, #1
 8003026:	d009      	beq.n	800303c <USBD_StdDevReq+0xb0>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003028:	b2c9      	uxtb	r1, r1
 800302a:	f7ff fe89 	bl	8002d40 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800302e:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003030:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8003032:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003034:	f7ff fe7a 	bl	8002d2c <USBD_SetClassConfig>
 8003038:	2802      	cmp	r0, #2
 800303a:	d0b3      	beq.n	8002fa4 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 800303c:	4620      	mov	r0, r4
 800303e:	f000 fa59 	bl	80034f4 <USBD_CtlSendStatus>
 8003042:	e7b7      	b.n	8002fb4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8003044:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003048:	2203      	movs	r2, #3
 800304a:	3b01      	subs	r3, #1
 800304c:	2b02      	cmp	r3, #2
 800304e:	d8a9      	bhi.n	8002fa4 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8003050:	88cb      	ldrh	r3, [r1, #6]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d1a6      	bne.n	8002fa4 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003056:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup)
 8003058:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800305c:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800305e:	b103      	cbz	r3, 8003062 <USBD_StdDevReq+0xd6>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003060:	60c2      	str	r2, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003062:	2202      	movs	r2, #2
 8003064:	f104 010c 	add.w	r1, r4, #12
 8003068:	4620      	mov	r0, r4
 800306a:	f000 fa15 	bl	8003498 <USBD_CtlSendData>
 800306e:	e7a1      	b.n	8002fb4 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8003070:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003074:	3b01      	subs	r3, #1
 8003076:	2b02      	cmp	r3, #2
 8003078:	d894      	bhi.n	8002fa4 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800307a:	884b      	ldrh	r3, [r1, #2]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d199      	bne.n	8002fb4 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8003086:	f000 fa35 	bl	80034f4 <USBD_CtlSendStatus>
 800308a:	e793      	b.n	8002fb4 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800308c:	884b      	ldrh	r3, [r1, #2]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d190      	bne.n	8002fb4 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 8003092:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 8003096:	e7d1      	b.n	800303c <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003098:	888b      	ldrh	r3, [r1, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d182      	bne.n	8002fa4 <USBD_StdDevReq+0x18>
 800309e:	88cb      	ldrh	r3, [r1, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f47f af7f 	bne.w	8002fa4 <USBD_StdDevReq+0x18>
 80030a6:	884d      	ldrh	r5, [r1, #2]
 80030a8:	2d7f      	cmp	r5, #127	; 0x7f
 80030aa:	f63f af7b 	bhi.w	8002fa4 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	f43f af76 	beq.w	8002fa4 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80030b8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80030ba:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80030be:	f000 fbfd 	bl	80038bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80030c2:	4620      	mov	r0, r4
 80030c4:	f000 fa16 	bl	80034f4 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	f000 80cd 	beq.w	8003268 <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80030ce:	2302      	movs	r3, #2
 80030d0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80030d4:	e76e      	b.n	8002fb4 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 80030d6:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 80030d8:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80030da:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80030de:	0a13      	lsrs	r3, r2, #8
 80030e0:	3b01      	subs	r3, #1
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	f63f af5e 	bhi.w	8002fa4 <USBD_StdDevReq+0x18>
 80030e8:	a101      	add	r1, pc, #4	; (adr r1, 80030f0 <USBD_StdDevReq+0x164>)
 80030ea:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	080031a5 	.word	0x080031a5
 80030f4:	0800318d 	.word	0x0800318d
 80030f8:	080031b5 	.word	0x080031b5
 80030fc:	08002fa5 	.word	0x08002fa5
 8003100:	08002fa5 	.word	0x08002fa5
 8003104:	08003177 	.word	0x08003177
 8003108:	08003133 	.word	0x08003133
  if (req->wLength != 1U)
 800310c:	88ca      	ldrh	r2, [r1, #6]
 800310e:	2a01      	cmp	r2, #1
 8003110:	f47f af48 	bne.w	8002fa4 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8003114:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003118:	2b00      	cmp	r3, #0
 800311a:	f43f af43 	beq.w	8002fa4 <USBD_StdDevReq+0x18>
 800311e:	2b02      	cmp	r3, #2
 8003120:	f240 8094 	bls.w	800324c <USBD_StdDevReq+0x2c0>
 8003124:	2b03      	cmp	r3, #3
 8003126:	f47f af3d 	bne.w	8002fa4 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800312a:	1d01      	adds	r1, r0, #4
 800312c:	f000 f9b4 	bl	8003498 <USBD_CtlSendData>
 8003130:	e740      	b.n	8002fb4 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003132:	7c03      	ldrb	r3, [r0, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f af35 	bne.w	8002fa4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800313a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800313e:	f10d 0006 	add.w	r0, sp, #6
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003146:	2307      	movs	r3, #7
 8003148:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 800314a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800314e:	88ea      	ldrh	r2, [r5, #6]
 8003150:	b16b      	cbz	r3, 800316e <USBD_StdDevReq+0x1e2>
 8003152:	2a00      	cmp	r2, #0
 8003154:	f43f af72 	beq.w	800303c <USBD_StdDevReq+0xb0>
      len = MIN(len, req->wLength);
 8003158:	4293      	cmp	r3, r2
 800315a:	bf28      	it	cs
 800315c:	4613      	movcs	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800315e:	4601      	mov	r1, r0
 8003160:	461a      	mov	r2, r3
 8003162:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003164:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003168:	f000 f996 	bl	8003498 <USBD_CtlSendData>
 800316c:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 800316e:	2a00      	cmp	r2, #0
 8003170:	f47f af20 	bne.w	8002fb4 <USBD_StdDevReq+0x28>
 8003174:	e762      	b.n	800303c <USBD_StdDevReq+0xb0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003176:	7c03      	ldrb	r3, [r0, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f af13 	bne.w	8002fa4 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800317e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003182:	f10d 0006 	add.w	r0, sp, #6
 8003186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003188:	4798      	blx	r3
 800318a:	e7de      	b.n	800314a <USBD_StdDevReq+0x1be>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800318c:	7c02      	ldrb	r2, [r0, #16]
 800318e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003192:	2a00      	cmp	r2, #0
 8003194:	d161      	bne.n	800325a <USBD_StdDevReq+0x2ce>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	f10d 0006 	add.w	r0, sp, #6
 800319c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800319e:	2302      	movs	r3, #2
 80031a0:	7043      	strb	r3, [r0, #1]
 80031a2:	e7d2      	b.n	800314a <USBD_StdDevReq+0x1be>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80031a4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031a8:	f10d 0106 	add.w	r1, sp, #6
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	7c00      	ldrb	r0, [r0, #16]
 80031b0:	4798      	blx	r3
 80031b2:	e7ca      	b.n	800314a <USBD_StdDevReq+0x1be>
      switch ((uint8_t)(req->wValue))
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	2a05      	cmp	r2, #5
 80031b8:	f63f aef4 	bhi.w	8002fa4 <USBD_StdDevReq+0x18>
 80031bc:	e8df f002 	tbb	[pc, r2]
 80031c0:	141a2026 	.word	0x141a2026
 80031c4:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80031c6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f43f aee9 	beq.w	8002fa4 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80031d2:	f10d 0106 	add.w	r1, sp, #6
 80031d6:	7c20      	ldrb	r0, [r4, #16]
 80031d8:	4798      	blx	r3
 80031da:	e7b6      	b.n	800314a <USBD_StdDevReq+0x1be>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80031dc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f5      	bne.n	80031d2 <USBD_StdDevReq+0x246>
 80031e6:	e6dd      	b.n	8002fa4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80031e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ef      	bne.n	80031d2 <USBD_StdDevReq+0x246>
 80031f2:	e6d7      	b.n	8002fa4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80031f4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e9      	bne.n	80031d2 <USBD_StdDevReq+0x246>
 80031fe:	e6d1      	b.n	8002fa4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003200:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e3      	bne.n	80031d2 <USBD_StdDevReq+0x246>
 800320a:	e6cb      	b.n	8002fa4 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800320c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1dd      	bne.n	80031d2 <USBD_StdDevReq+0x246>
 8003216:	e6c5      	b.n	8002fa4 <USBD_StdDevReq+0x18>
  USBD_LL_StallEP(pdev, 0x80U);
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	f000 fb23 	bl	8003864 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800321e:	2100      	movs	r1, #0
 8003220:	4620      	mov	r0, r4
 8003222:	f000 fb1f 	bl	8003864 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003226:	7829      	ldrb	r1, [r5, #0]
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff fd89 	bl	8002d40 <USBD_ClrClassConfig>
 800322e:	e6c1      	b.n	8002fb4 <USBD_StdDevReq+0x28>
        if (cfgidx)
 8003230:	2900      	cmp	r1, #0
 8003232:	f43f af03 	beq.w	800303c <USBD_StdDevReq+0xb0>
          pdev->dev_config = cfgidx;
 8003236:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003238:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800323a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800323c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003240:	f7ff fd74 	bl	8002d2c <USBD_SetClassConfig>
 8003244:	2802      	cmp	r0, #2
 8003246:	f47f aef9 	bne.w	800303c <USBD_StdDevReq+0xb0>
 800324a:	e6ab      	b.n	8002fa4 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	4601      	mov	r1, r0
 8003250:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8003254:	f000 f920 	bl	8003498 <USBD_CtlSendData>
 8003258:	e6ac      	b.n	8002fb4 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	f10d 0006 	add.w	r0, sp, #6
 8003260:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003262:	2302      	movs	r3, #2
 8003264:	7043      	strb	r3, [r0, #1]
 8003266:	e770      	b.n	800314a <USBD_StdDevReq+0x1be>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003268:	2301      	movs	r3, #1
 800326a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800326e:	e6a1      	b.n	8002fb4 <USBD_StdDevReq+0x28>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003270:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003272:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003274:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003278:	f7ff fd62 	bl	8002d40 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800327c:	4620      	mov	r0, r4
 800327e:	f000 f939 	bl	80034f4 <USBD_CtlSendStatus>
 8003282:	e697      	b.n	8002fb4 <USBD_StdDevReq+0x28>
 8003284:	20000198 	.word	0x20000198

08003288 <USBD_StdItfReq>:
{
 8003288:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800328a:	780b      	ldrb	r3, [r1, #0]
{
 800328c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800328e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003292:	2b20      	cmp	r3, #32
{
 8003294:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003296:	d00c      	beq.n	80032b2 <USBD_StdItfReq+0x2a>
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d00a      	beq.n	80032b2 <USBD_StdItfReq+0x2a>
 800329c:	b14b      	cbz	r3, 80032b2 <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev, 0x80U);
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	4620      	mov	r0, r4
 80032a2:	f000 fadf 	bl	8003864 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80032a6:	4620      	mov	r0, r4
 80032a8:	2100      	movs	r1, #0
 80032aa:	f000 fadb 	bl	8003864 <USBD_LL_StallEP>
}
 80032ae:	2000      	movs	r0, #0
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80032b2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80032b6:	3b01      	subs	r3, #1
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d8f0      	bhi.n	800329e <USBD_StdItfReq+0x16>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80032bc:	792b      	ldrb	r3, [r5, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d8ed      	bhi.n	800329e <USBD_StdItfReq+0x16>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80032c2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80032c6:	4629      	mov	r1, r5
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4620      	mov	r0, r4
 80032cc:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80032ce:	88eb      	ldrh	r3, [r5, #6]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ec      	bne.n	80032ae <USBD_StdItfReq+0x26>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d1ea      	bne.n	80032ae <USBD_StdItfReq+0x26>
              USBD_CtlSendStatus(pdev);
 80032d8:	4620      	mov	r0, r4
 80032da:	f000 f90b 	bl	80034f4 <USBD_CtlSendStatus>
 80032de:	e7e6      	b.n	80032ae <USBD_StdItfReq+0x26>

080032e0 <USBD_StdEPReq>:
{
 80032e0:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032e2:	780b      	ldrb	r3, [r1, #0]
{
 80032e4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d00c      	beq.n	8003308 <USBD_StdEPReq+0x28>
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d00a      	beq.n	8003308 <USBD_StdEPReq+0x28>
 80032f2:	b183      	cbz	r3, 8003316 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	4620      	mov	r0, r4
 80032f8:	f000 fab4 	bl	8003864 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80032fc:	4620      	mov	r0, r4
 80032fe:	2100      	movs	r1, #0
 8003300:	f000 fab0 	bl	8003864 <USBD_LL_StallEP>
}
 8003304:	2000      	movs	r0, #0
 8003306:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8003308:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800330c:	4620      	mov	r0, r4
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4798      	blx	r3
}
 8003312:	2000      	movs	r0, #0
 8003314:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 8003316:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003318:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 800331a:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 800331c:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 800331e:	d03e      	beq.n	800339e <USBD_StdEPReq+0xbe>
 8003320:	d314      	bcc.n	800334c <USBD_StdEPReq+0x6c>
 8003322:	2b03      	cmp	r3, #3
 8003324:	d1e6      	bne.n	80032f4 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 8003326:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800332a:	2b02      	cmp	r3, #2
 800332c:	d046      	beq.n	80033bc <USBD_StdEPReq+0xdc>
 800332e:	2b03      	cmp	r3, #3
 8003330:	d1e0      	bne.n	80032f4 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003332:	884b      	ldrh	r3, [r1, #2]
 8003334:	b933      	cbnz	r3, 8003344 <USBD_StdEPReq+0x64>
                if ((ep_addr != 0x00U) &&
 8003336:	066a      	lsls	r2, r5, #25
 8003338:	d004      	beq.n	8003344 <USBD_StdEPReq+0x64>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800333a:	88cb      	ldrh	r3, [r1, #6]
 800333c:	b913      	cbnz	r3, 8003344 <USBD_StdEPReq+0x64>
                  USBD_LL_StallEP(pdev, ep_addr);
 800333e:	4629      	mov	r1, r5
 8003340:	f000 fa90 	bl	8003864 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003344:	4620      	mov	r0, r4
 8003346:	f000 f8d5 	bl	80034f4 <USBD_CtlSendStatus>
              break;
 800334a:	e7db      	b.n	8003304 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 800334c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003350:	2b02      	cmp	r3, #2
 8003352:	d03d      	beq.n	80033d0 <USBD_StdEPReq+0xf0>
 8003354:	2b03      	cmp	r3, #3
 8003356:	d1cd      	bne.n	80032f4 <USBD_StdEPReq+0x14>
 8003358:	f005 030f 	and.w	r3, r5, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800335c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8003360:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003362:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8003366:	d442      	bmi.n	80033ee <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003368:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0c1      	beq.n	80032f4 <USBD_StdEPReq+0x14>
 8003370:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003374:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8003378:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800337c:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003380:	b133      	cbz	r3, 8003390 <USBD_StdEPReq+0xb0>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003382:	4629      	mov	r1, r5
 8003384:	4620      	mov	r0, r4
 8003386:	f000 fa89 	bl	800389c <USBD_LL_IsStallEP>
 800338a:	2800      	cmp	r0, #0
 800338c:	d03b      	beq.n	8003406 <USBD_StdEPReq+0x126>
                pep->status = 0x0001U;
 800338e:	2301      	movs	r3, #1
 8003390:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003392:	4631      	mov	r1, r6
 8003394:	4620      	mov	r0, r4
 8003396:	2202      	movs	r2, #2
 8003398:	f000 f87e 	bl	8003498 <USBD_CtlSendData>
              break;
 800339c:	e7b2      	b.n	8003304 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 800339e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d00a      	beq.n	80033bc <USBD_StdEPReq+0xdc>
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d1a4      	bne.n	80032f4 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80033aa:	884b      	ldrh	r3, [r1, #2]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1a9      	bne.n	8003304 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 80033b0:	066e      	lsls	r6, r5, #25
 80033b2:	d0c7      	beq.n	8003344 <USBD_StdEPReq+0x64>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80033b4:	4629      	mov	r1, r5
 80033b6:	f000 fa63 	bl	8003880 <USBD_LL_ClearStallEP>
 80033ba:	e7c3      	b.n	8003344 <USBD_StdEPReq+0x64>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80033bc:	066b      	lsls	r3, r5, #25
 80033be:	d099      	beq.n	80032f4 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 80033c0:	4629      	mov	r1, r5
 80033c2:	f000 fa4f 	bl	8003864 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80033c6:	4620      	mov	r0, r4
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	f000 fa4b 	bl	8003864 <USBD_LL_StallEP>
 80033ce:	e799      	b.n	8003304 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80033d0:	0668      	lsls	r0, r5, #25
 80033d2:	d18f      	bne.n	80032f4 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 80033d4:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80033d6:	0611      	lsls	r1, r2, #24
 80033d8:	bf4c      	ite	mi
 80033da:	f104 0114 	addmi.w	r1, r4, #20
 80033de:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80033e2:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 80033e4:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80033e6:	2202      	movs	r2, #2
 80033e8:	f000 f856 	bl	8003498 <USBD_CtlSendData>
              break;
 80033ec:	e78a      	b.n	8003304 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f43f af7f 	beq.w	80032f4 <USBD_StdEPReq+0x14>
 80033f6:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80033fa:	1c5e      	adds	r6, r3, #1
 80033fc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003400:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8003404:	e7bc      	b.n	8003380 <USBD_StdEPReq+0xa0>
                pep->status = 0x0000U;
 8003406:	6030      	str	r0, [r6, #0]
 8003408:	e7c3      	b.n	8003392 <USBD_StdEPReq+0xb2>
 800340a:	bf00      	nop

0800340c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800340c:	780b      	ldrb	r3, [r1, #0]
 800340e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003410:	784b      	ldrb	r3, [r1, #1]
 8003412:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003414:	78ca      	ldrb	r2, [r1, #3]
 8003416:	788b      	ldrb	r3, [r1, #2]
 8003418:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800341c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800341e:	794a      	ldrb	r2, [r1, #5]
 8003420:	790b      	ldrb	r3, [r1, #4]
 8003422:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003426:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003428:	79ca      	ldrb	r2, [r1, #7]
 800342a:	798b      	ldrb	r3, [r1, #6]
 800342c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003430:	80c3      	strh	r3, [r0, #6]
}
 8003432:	4770      	bx	lr

08003434 <USBD_CtlError>:
{
 8003434:	b510      	push	{r4, lr}
 8003436:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	f000 fa13 	bl	8003864 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800343e:	4620      	mov	r0, r4
}
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003444:	2100      	movs	r1, #0
 8003446:	f000 ba0d 	b.w	8003864 <USBD_LL_StallEP>
 800344a:	bf00      	nop

0800344c <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800344c:	b300      	cbz	r0, 8003490 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800344e:	7803      	ldrb	r3, [r0, #0]
{
 8003450:	b430      	push	{r4, r5}
  while (*buf != '\0')
 8003452:	b1f3      	cbz	r3, 8003492 <USBD_GetString+0x46>
 8003454:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8003456:	2300      	movs	r3, #0
  while (*buf != '\0')
 8003458:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 800345c:	3301      	adds	r3, #1
 800345e:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8003460:	2d00      	cmp	r5, #0
 8003462:	d1f9      	bne.n	8003458 <USBD_GetString+0xc>
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003468:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800346a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800346c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800346e:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8003470:	7804      	ldrb	r4, [r0, #0]
 8003472:	b15c      	cbz	r4, 800348c <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003474:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8003476:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800347e:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8003480:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8003484:	3302      	adds	r3, #2
 8003486:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8003488:	2c00      	cmp	r4, #0
 800348a:	d1f5      	bne.n	8003478 <USBD_GetString+0x2c>
}
 800348c:	bc30      	pop	{r4, r5}
 800348e:	4770      	bx	lr
 8003490:	4770      	bx	lr
  while (*buf != '\0')
 8003492:	2302      	movs	r3, #2
 8003494:	e7e8      	b.n	8003468 <USBD_GetString+0x1c>
 8003496:	bf00      	nop

08003498 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800349c:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800349e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80034a0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80034a4:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80034a8:	2100      	movs	r1, #0
 80034aa:	f000 fa15 	bl	80038d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80034ae:	2000      	movs	r0, #0
 80034b0:	bd38      	pop	{r3, r4, r5, pc}
 80034b2:	bf00      	nop

080034b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80034b4:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80034b6:	4613      	mov	r3, r2
 80034b8:	460a      	mov	r2, r1
 80034ba:	2100      	movs	r1, #0
 80034bc:	f000 fa0c 	bl	80038d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 80034c0:	2000      	movs	r0, #0
 80034c2:	bd08      	pop	{r3, pc}

080034c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80034c4:	b538      	push	{r3, r4, r5, lr}
 80034c6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80034c8:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80034ca:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 80034cc:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80034d0:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80034d4:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80034d8:	2100      	movs	r1, #0
 80034da:	f000 fa0b 	bl	80038f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80034de:	2000      	movs	r0, #0
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
 80034e2:	bf00      	nop

080034e4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80034e4:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80034e6:	4613      	mov	r3, r2
 80034e8:	460a      	mov	r2, r1
 80034ea:	2100      	movs	r1, #0
 80034ec:	f000 fa02 	bl	80038f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80034f0:	2000      	movs	r0, #0
 80034f2:	bd08      	pop	{r3, pc}

080034f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80034f4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80034f6:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80034f8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80034fa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80034fe:	4619      	mov	r1, r3
 8003500:	461a      	mov	r2, r3
 8003502:	f000 f9e9 	bl	80038d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003506:	2000      	movs	r0, #0
 8003508:	bd08      	pop	{r3, pc}
 800350a:	bf00      	nop

0800350c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800350c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800350e:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003510:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003512:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003516:	4619      	mov	r1, r3
 8003518:	461a      	mov	r2, r3
 800351a:	f000 f9eb 	bl	80038f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800351e:	2000      	movs	r0, #0
 8003520:	bd08      	pop	{r3, pc}
 8003522:	bf00      	nop

08003524 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003524:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003526:	2200      	movs	r2, #0
 8003528:	4910      	ldr	r1, [pc, #64]	; (800356c <MX_USB_DEVICE_Init+0x48>)
 800352a:	4811      	ldr	r0, [pc, #68]	; (8003570 <MX_USB_DEVICE_Init+0x4c>)
 800352c:	f7ff fbda 	bl	8002ce4 <USBD_Init>
 8003530:	b9c0      	cbnz	r0, 8003564 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003532:	4910      	ldr	r1, [pc, #64]	; (8003574 <MX_USB_DEVICE_Init+0x50>)
 8003534:	480e      	ldr	r0, [pc, #56]	; (8003570 <MX_USB_DEVICE_Init+0x4c>)
 8003536:	f7ff fbeb 	bl	8002d10 <USBD_RegisterClass>
 800353a:	b980      	cbnz	r0, 800355e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <MX_USB_DEVICE_Init+0x54>)
 800353e:	480c      	ldr	r0, [pc, #48]	; (8003570 <MX_USB_DEVICE_Init+0x4c>)
 8003540:	f7ff fba2 	bl	8002c88 <USBD_CDC_RegisterInterface>
 8003544:	b940      	cbnz	r0, 8003558 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003546:	480a      	ldr	r0, [pc, #40]	; (8003570 <MX_USB_DEVICE_Init+0x4c>)
 8003548:	f7ff fbea 	bl	8002d20 <USBD_Start>
 800354c:	b900      	cbnz	r0, 8003550 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800354e:	bd08      	pop	{r3, pc}
 8003550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003554:	f7fc bf70 	b.w	8000438 <Error_Handler>
    Error_Handler();
 8003558:	f7fc ff6e 	bl	8000438 <Error_Handler>
 800355c:	e7f3      	b.n	8003546 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800355e:	f7fc ff6b 	bl	8000438 <Error_Handler>
 8003562:	e7eb      	b.n	800353c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003564:	f7fc ff68 	bl	8000438 <Error_Handler>
 8003568:	e7e3      	b.n	8003532 <MX_USB_DEVICE_Init+0xe>
 800356a:	bf00      	nop
 800356c:	2000012c 	.word	0x2000012c
 8003570:	200004f0 	.word	0x200004f0
 8003574:	2000000c 	.word	0x2000000c
 8003578:	2000011c 	.word	0x2000011c

0800357c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800357c:	2000      	movs	r0, #0
 800357e:	4770      	bx	lr

08003580 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003580:	2000      	movs	r0, #0
 8003582:	4770      	bx	lr

08003584 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003584:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003586:	4c05      	ldr	r4, [pc, #20]	; (800359c <CDC_Receive_FS+0x18>)
 8003588:	4601      	mov	r1, r0
 800358a:	4620      	mov	r0, r4
 800358c:	f7ff fb8c 	bl	8002ca8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff fb8f 	bl	8002cb4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003596:	2000      	movs	r0, #0
 8003598:	bd10      	pop	{r4, pc}
 800359a:	bf00      	nop
 800359c:	200004f0 	.word	0x200004f0

080035a0 <CDC_Init_FS>:
{
 80035a0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80035a2:	4c06      	ldr	r4, [pc, #24]	; (80035bc <CDC_Init_FS+0x1c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	4620      	mov	r0, r4
 80035a8:	4905      	ldr	r1, [pc, #20]	; (80035c0 <CDC_Init_FS+0x20>)
 80035aa:	f7ff fb75 	bl	8002c98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80035ae:	4620      	mov	r0, r4
 80035b0:	4904      	ldr	r1, [pc, #16]	; (80035c4 <CDC_Init_FS+0x24>)
 80035b2:	f7ff fb79 	bl	8002ca8 <USBD_CDC_SetRxBuffer>
}
 80035b6:	2000      	movs	r0, #0
 80035b8:	bd10      	pop	{r4, pc}
 80035ba:	bf00      	nop
 80035bc:	200004f0 	.word	0x200004f0
 80035c0:	20000b9c 	.word	0x20000b9c
 80035c4:	200007b4 	.word	0x200007b4

080035c8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80035c8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80035ca:	4801      	ldr	r0, [pc, #4]	; (80035d0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80035cc:	800b      	strh	r3, [r1, #0]
}
 80035ce:	4770      	bx	lr
 80035d0:	20000148 	.word	0x20000148

080035d4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80035d4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80035d6:	4801      	ldr	r0, [pc, #4]	; (80035dc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80035d8:	800b      	strh	r3, [r1, #0]
}
 80035da:	4770      	bx	lr
 80035dc:	2000015c 	.word	0x2000015c

080035e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80035e0:	b430      	push	{r4, r5}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80035e2:	2500      	movs	r5, #0
 80035e4:	3a01      	subs	r2, #1
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	1c8c      	adds	r4, r1, #2
 80035ea:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    if (((value >> 28)) < 0xA)
 80035ee:	0f02      	lsrs	r2, r0, #28
 80035f0:	2a09      	cmp	r2, #9
 80035f2:	b2d3      	uxtb	r3, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80035f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80035f8:	bf8a      	itet	hi
 80035fa:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80035fc:	700a      	strbls	r2, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80035fe:	700b      	strbhi	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8003600:	704d      	strb	r5, [r1, #1]
 8003602:	3102      	adds	r1, #2
  for (idx = 0; idx < len; idx++)
 8003604:	428c      	cmp	r4, r1
    value = value << 4;
 8003606:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800360a:	d1f0      	bne.n	80035ee <IntToUnicode+0xe>
  }
}
 800360c:	bc30      	pop	{r4, r5}
 800360e:	4770      	bx	lr

08003610 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003610:	221a      	movs	r2, #26
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003612:	480b      	ldr	r0, [pc, #44]	; (8003640 <USBD_FS_SerialStrDescriptor+0x30>)
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003616:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 8003618:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800361a:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 800361c:	18c0      	adds	r0, r0, r3
 800361e:	d101      	bne.n	8003624 <USBD_FS_SerialStrDescriptor+0x14>
}
 8003620:	4809      	ldr	r0, [pc, #36]	; (8003648 <USBD_FS_SerialStrDescriptor+0x38>)
 8003622:	4770      	bx	lr
{
 8003624:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003628:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800362a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800362c:	4908      	ldr	r1, [pc, #32]	; (8003650 <USBD_FS_SerialStrDescriptor+0x40>)
 800362e:	f7ff ffd7 	bl	80035e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003632:	4620      	mov	r0, r4
 8003634:	2204      	movs	r2, #4
 8003636:	4907      	ldr	r1, [pc, #28]	; (8003654 <USBD_FS_SerialStrDescriptor+0x44>)
 8003638:	f7ff ffd2 	bl	80035e0 <IntToUnicode>
}
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <USBD_FS_SerialStrDescriptor+0x38>)
 800363e:	bd10      	pop	{r4, pc}
 8003640:	1ffff7e8 	.word	0x1ffff7e8
 8003644:	1ffff7f0 	.word	0x1ffff7f0
 8003648:	20000160 	.word	0x20000160
 800364c:	1ffff7ec 	.word	0x1ffff7ec
 8003650:	20000162 	.word	0x20000162
 8003654:	20000172 	.word	0x20000172

08003658 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003658:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800365a:	4c04      	ldr	r4, [pc, #16]	; (800366c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800365c:	460a      	mov	r2, r1
 800365e:	4804      	ldr	r0, [pc, #16]	; (8003670 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003660:	4621      	mov	r1, r4
 8003662:	f7ff fef3 	bl	800344c <USBD_GetString>
}
 8003666:	4620      	mov	r0, r4
 8003668:	bd10      	pop	{r4, pc}
 800366a:	bf00      	nop
 800366c:	20000f84 	.word	0x20000f84
 8003670:	080039cc 	.word	0x080039cc

08003674 <USBD_FS_ProductStrDescriptor>:
{
 8003674:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003676:	4c04      	ldr	r4, [pc, #16]	; (8003688 <USBD_FS_ProductStrDescriptor+0x14>)
 8003678:	460a      	mov	r2, r1
 800367a:	4804      	ldr	r0, [pc, #16]	; (800368c <USBD_FS_ProductStrDescriptor+0x18>)
 800367c:	4621      	mov	r1, r4
 800367e:	f7ff fee5 	bl	800344c <USBD_GetString>
}
 8003682:	4620      	mov	r0, r4
 8003684:	bd10      	pop	{r4, pc}
 8003686:	bf00      	nop
 8003688:	20000f84 	.word	0x20000f84
 800368c:	080039e0 	.word	0x080039e0

08003690 <USBD_FS_ConfigStrDescriptor>:
{
 8003690:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003692:	4c04      	ldr	r4, [pc, #16]	; (80036a4 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003694:	460a      	mov	r2, r1
 8003696:	4804      	ldr	r0, [pc, #16]	; (80036a8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003698:	4621      	mov	r1, r4
 800369a:	f7ff fed7 	bl	800344c <USBD_GetString>
}
 800369e:	4620      	mov	r0, r4
 80036a0:	bd10      	pop	{r4, pc}
 80036a2:	bf00      	nop
 80036a4:	20000f84 	.word	0x20000f84
 80036a8:	080039b0 	.word	0x080039b0

080036ac <USBD_FS_InterfaceStrDescriptor>:
{
 80036ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80036ae:	4c04      	ldr	r4, [pc, #16]	; (80036c0 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80036b0:	460a      	mov	r2, r1
 80036b2:	4804      	ldr	r0, [pc, #16]	; (80036c4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80036b4:	4621      	mov	r1, r4
 80036b6:	f7ff fec9 	bl	800344c <USBD_GetString>
}
 80036ba:	4620      	mov	r0, r4
 80036bc:	bd10      	pop	{r4, pc}
 80036be:	bf00      	nop
 80036c0:	20000f84 	.word	0x20000f84
 80036c4:	080039bc 	.word	0x080039bc

080036c8 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 80036c8:	6802      	ldr	r2, [r0, #0]
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <HAL_PCD_MspInit+0x3c>)
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d000      	beq.n	80036d2 <HAL_PCD_MspInit+0xa>
 80036d0:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80036d2:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80036d4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 80036d8:	b510      	push	{r4, lr}
    __HAL_RCC_USB_CLK_ENABLE();
 80036da:	69dc      	ldr	r4, [r3, #28]
{
 80036dc:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 80036de:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80036e2:	61dc      	str	r4, [r3, #28]
 80036e4:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80036e6:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80036e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ec:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80036ee:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80036f0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80036f2:	f7fd fb87 	bl	8000e04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80036f6:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80036f8:	b002      	add	sp, #8
 80036fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80036fe:	f7fd bbb7 	b.w	8000e70 <HAL_NVIC_EnableIRQ>
 8003702:	bf00      	nop
 8003704:	40005c00 	.word	0x40005c00

08003708 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003708:	f500 710c 	add.w	r1, r0, #560	; 0x230
 800370c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003710:	f7ff bb1e 	b.w	8002d50 <USBD_LL_SetupStage>

08003714 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003714:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003718:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800371c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003720:	f7ff bb46 	b.w	8002db0 <USBD_LL_DataOutStage>

08003724 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003724:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800372a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800372e:	f7ff bb7f 	b.w	8002e30 <USBD_LL_DataInStage>
 8003732:	bf00      	nop

08003734 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003734:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003738:	f7ff bc1a 	b.w	8002f70 <USBD_LL_SOF>

0800373c <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800373c:	6883      	ldr	r3, [r0, #8]
{ 
 800373e:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003740:	2b02      	cmp	r3, #2
{ 
 8003742:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003744:	d001      	beq.n	800374a <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8003746:	f7fc fe77 	bl	8000438 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800374a:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 800374e:	2101      	movs	r1, #1
 8003750:	f7ff fbf6 	bl	8002f40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003754:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8003758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800375c:	f7ff bbc8 	b.w	8002ef0 <USBD_LL_Reset>

08003760 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003760:	b510      	push	{r4, lr}
 8003762:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003764:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003768:	f7ff fbee 	bl	8002f48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800376c:	69a3      	ldr	r3, [r4, #24]
 800376e:	b123      	cbz	r3, 800377a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003770:	4a02      	ldr	r2, [pc, #8]	; (800377c <HAL_PCD_SuspendCallback+0x1c>)
 8003772:	6913      	ldr	r3, [r2, #16]
 8003774:	f043 0306 	orr.w	r3, r3, #6
 8003778:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800377a:	bd10      	pop	{r4, pc}
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003780:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8003784:	f7ff bbea 	b.w	8002f5c <USBD_LL_Resume>

08003788 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800378c:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800378e:	2508      	movs	r5, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003790:	2102      	movs	r1, #2
  hpcd_USB_FS.pData = pdev;
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8003794:	481c      	ldr	r0, [pc, #112]	; (8003808 <USBD_LL_Init+0x80>)
  pdev->pData = &hpcd_USB_FS;
 8003796:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800379a:	6018      	str	r0, [r3, #0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800379c:	4618      	mov	r0, r3
  hpcd_USB_FS.pData = pdev;
 800379e:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80037a2:	e9c3 5101 	strd	r5, r1, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80037a6:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80037aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80037ac:	f7fd fc84 	bl	80010b8 <HAL_PCD_Init>
 80037b0:	b108      	cbz	r0, 80037b6 <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 80037b2:	f7fc fe41 	bl	8000438 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2318      	movs	r3, #24
 80037ba:	4611      	mov	r1, r2
 80037bc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80037c0:	f7fe f872 	bl	80018a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80037c4:	2358      	movs	r3, #88	; 0x58
 80037c6:	2200      	movs	r2, #0
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80037ce:	f7fe f86b 	bl	80018a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80037d2:	23c0      	movs	r3, #192	; 0xc0
 80037d4:	2200      	movs	r2, #0
 80037d6:	2181      	movs	r1, #129	; 0x81
 80037d8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80037dc:	f7fe f864 	bl	80018a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80037e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80037e4:	2200      	movs	r2, #0
 80037e6:	2101      	movs	r1, #1
 80037e8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80037ec:	f7fe f85c 	bl	80018a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80037f0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80037f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f8:	2200      	movs	r2, #0
 80037fa:	2182      	movs	r1, #130	; 0x82
 80037fc:	f7fe f854 	bl	80018a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8003800:	2000      	movs	r0, #0
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	20001184 	.word	0x20001184
 8003808:	40005c00 	.word	0x40005c00

0800380c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800380c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800380e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003812:	f7fd fccf 	bl	80011b4 <HAL_PCD_Start>
 8003816:	2803      	cmp	r0, #3
 8003818:	bf96      	itet	ls
 800381a:	4b02      	ldrls	r3, [pc, #8]	; (8003824 <USBD_LL_Start+0x18>)
 800381c:	2002      	movhi	r0, #2
 800381e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003820:	bd08      	pop	{r3, pc}
 8003822:	bf00      	nop
 8003824:	080039f8 	.word	0x080039f8

08003828 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003828:	b510      	push	{r4, lr}
 800382a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800382c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003830:	4613      	mov	r3, r2
 8003832:	4622      	mov	r2, r4
 8003834:	f7fd fcea 	bl	800120c <HAL_PCD_EP_Open>
 8003838:	2803      	cmp	r0, #3
 800383a:	bf96      	itet	ls
 800383c:	4b01      	ldrls	r3, [pc, #4]	; (8003844 <USBD_LL_OpenEP+0x1c>)
 800383e:	2002      	movhi	r0, #2
 8003840:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8003842:	bd10      	pop	{r4, pc}
 8003844:	080039f8 	.word	0x080039f8

08003848 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003848:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800384a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800384e:	f7fd fd0f 	bl	8001270 <HAL_PCD_EP_Close>
 8003852:	2803      	cmp	r0, #3
 8003854:	bf96      	itet	ls
 8003856:	4b02      	ldrls	r3, [pc, #8]	; (8003860 <USBD_LL_CloseEP+0x18>)
 8003858:	2002      	movhi	r0, #2
 800385a:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 800385c:	bd08      	pop	{r3, pc}
 800385e:	bf00      	nop
 8003860:	080039f8 	.word	0x080039f8

08003864 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003864:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003866:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800386a:	f7fd ffa9 	bl	80017c0 <HAL_PCD_EP_SetStall>
 800386e:	2803      	cmp	r0, #3
 8003870:	bf96      	itet	ls
 8003872:	4b02      	ldrls	r3, [pc, #8]	; (800387c <USBD_LL_StallEP+0x18>)
 8003874:	2002      	movhi	r0, #2
 8003876:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8003878:	bd08      	pop	{r3, pc}
 800387a:	bf00      	nop
 800387c:	080039f8 	.word	0x080039f8

08003880 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003880:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003882:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003886:	f7fd ffd7 	bl	8001838 <HAL_PCD_EP_ClrStall>
 800388a:	2803      	cmp	r0, #3
 800388c:	bf96      	itet	ls
 800388e:	4b02      	ldrls	r3, [pc, #8]	; (8003898 <USBD_LL_ClearStallEP+0x18>)
 8003890:	2002      	movhi	r0, #2
 8003892:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8003894:	bd08      	pop	{r3, pc}
 8003896:	bf00      	nop
 8003898:	080039f8 	.word	0x080039f8

0800389c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800389c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800389e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 80038a2:	d404      	bmi.n	80038ae <USBD_LL_IsStallEP+0x12>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80038a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80038a8:	f893 012a 	ldrb.w	r0, [r3, #298]	; 0x12a
  }
}
 80038ac:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80038ae:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80038b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80038b6:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 80038ba:	4770      	bx	lr

080038bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80038bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80038be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80038c2:	f7fd fc8f 	bl	80011e4 <HAL_PCD_SetAddress>
 80038c6:	2803      	cmp	r0, #3
 80038c8:	bf96      	itet	ls
 80038ca:	4b02      	ldrls	r3, [pc, #8]	; (80038d4 <USBD_LL_SetUSBAddress+0x18>)
 80038cc:	2002      	movhi	r0, #2
 80038ce:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80038d0:	bd08      	pop	{r3, pc}
 80038d2:	bf00      	nop
 80038d4:	080039f8 	.word	0x080039f8

080038d8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80038d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80038da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80038de:	f7fd fd13 	bl	8001308 <HAL_PCD_EP_Transmit>
 80038e2:	2803      	cmp	r0, #3
 80038e4:	bf96      	itet	ls
 80038e6:	4b02      	ldrls	r3, [pc, #8]	; (80038f0 <USBD_LL_Transmit+0x18>)
 80038e8:	2002      	movhi	r0, #2
 80038ea:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 80038ec:	bd08      	pop	{r3, pc}
 80038ee:	bf00      	nop
 80038f0:	080039f8 	.word	0x080039f8

080038f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80038f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80038f6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80038fa:	f7fd fce5 	bl	80012c8 <HAL_PCD_EP_Receive>
 80038fe:	2803      	cmp	r0, #3
 8003900:	bf96      	itet	ls
 8003902:	4b02      	ldrls	r3, [pc, #8]	; (800390c <USBD_LL_PrepareReceive+0x18>)
 8003904:	2002      	movhi	r0, #2
 8003906:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8003908:	bd08      	pop	{r3, pc}
 800390a:	bf00      	nop
 800390c:	080039f8 	.word	0x080039f8

08003910 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003910:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003914:	f7fd bcf0 	b.w	80012f8 <HAL_PCD_EP_GetRxCount>

08003918 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003918:	4800      	ldr	r0, [pc, #0]	; (800391c <USBD_static_malloc+0x4>)
 800391a:	4770      	bx	lr
 800391c:	2000019c 	.word	0x2000019c

08003920 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop

08003928 <__libc_init_array>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	2500      	movs	r5, #0
 800392c:	4e0c      	ldr	r6, [pc, #48]	; (8003960 <__libc_init_array+0x38>)
 800392e:	4c0d      	ldr	r4, [pc, #52]	; (8003964 <__libc_init_array+0x3c>)
 8003930:	1ba4      	subs	r4, r4, r6
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	42a5      	cmp	r5, r4
 8003936:	d109      	bne.n	800394c <__libc_init_array+0x24>
 8003938:	f000 f81a 	bl	8003970 <_init>
 800393c:	2500      	movs	r5, #0
 800393e:	4e0a      	ldr	r6, [pc, #40]	; (8003968 <__libc_init_array+0x40>)
 8003940:	4c0a      	ldr	r4, [pc, #40]	; (800396c <__libc_init_array+0x44>)
 8003942:	1ba4      	subs	r4, r4, r6
 8003944:	10a4      	asrs	r4, r4, #2
 8003946:	42a5      	cmp	r5, r4
 8003948:	d105      	bne.n	8003956 <__libc_init_array+0x2e>
 800394a:	bd70      	pop	{r4, r5, r6, pc}
 800394c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003950:	4798      	blx	r3
 8003952:	3501      	adds	r5, #1
 8003954:	e7ee      	b.n	8003934 <__libc_init_array+0xc>
 8003956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800395a:	4798      	blx	r3
 800395c:	3501      	adds	r5, #1
 800395e:	e7f2      	b.n	8003946 <__libc_init_array+0x1e>
 8003960:	080039fc 	.word	0x080039fc
 8003964:	080039fc 	.word	0x080039fc
 8003968:	080039fc 	.word	0x080039fc
 800396c:	08003a00 	.word	0x08003a00

08003970 <_init>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr

0800397c <_fini>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	bf00      	nop
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr
