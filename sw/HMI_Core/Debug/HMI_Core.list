
HMI_Core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001744  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001850  08001850  00011850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001878  08001878  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001878  08001878  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001878  08001878  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001878  08001878  00011878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800187c  0800187c  0001187c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  0800188c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800188c  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f297  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dac  00000000  00000000  0002f2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007cc4  00000000  00000000  00032078  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000a98  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012e0  00000000  00000000  0003a7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015132  00000000  00000000  0003bab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c68a  00000000  00000000  00050bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00072b58  00000000  00000000  0005d274  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cfdcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000211c  00000000  00000000  000cfe48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001838 	.word	0x08001838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001838 	.word	0x08001838

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800014e:	2200      	movs	r2, #0
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000150:	f44f 2460 	mov.w	r4, #917504	; 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000154:	2101      	movs	r1, #1
  hadc1.Instance = ADC1;
 8000156:	4b11      	ldr	r3, [pc, #68]	; (800019c <MX_ADC1_Init+0x50>)
 8000158:	4d11      	ldr	r5, [pc, #68]	; (80001a0 <MX_ADC1_Init+0x54>)
{
 800015a:	b085      	sub	sp, #20
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800015c:	4618      	mov	r0, r3
  ADC_ChannelConfTypeDef sConfig = {0};
 800015e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8000162:	9203      	str	r2, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000164:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000166:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000168:	751a      	strb	r2, [r3, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800016a:	605a      	str	r2, [r3, #4]
  hadc1.Instance = ADC1;
 800016c:	601d      	str	r5, [r3, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800016e:	61dc      	str	r4, [r3, #28]
  hadc1.Init.NbrOfConversion = 1;
 8000170:	6119      	str	r1, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000172:	f000 fbe9 	bl	8000948 <HAL_ADC_Init>
 8000176:	b968      	cbnz	r0, 8000194 <MX_ADC1_Init+0x48>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000178:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800017a:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800017c:	a901      	add	r1, sp, #4
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <MX_ADC1_Init+0x50>)
  sConfig.Channel = ADC_CHANNEL_0;
 8000180:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000182:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000186:	f000 fb2d 	bl	80007e4 <HAL_ADC_ConfigChannel>
 800018a:	b108      	cbz	r0, 8000190 <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 800018c:	f000 f93a 	bl	8000404 <Error_Handler>
  }

}
 8000190:	b005      	add	sp, #20
 8000192:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000194:	f000 f936 	bl	8000404 <Error_Handler>
 8000198:	e7ee      	b.n	8000178 <MX_ADC1_Init+0x2c>
 800019a:	bf00      	nop
 800019c:	20000028 	.word	0x20000028
 80001a0:	40012400 	.word	0x40012400

080001a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a4:	2300      	movs	r3, #0
{
 80001a6:	b510      	push	{r4, lr}
  if(adcHandle->Instance==ADC1)
 80001a8:	6801      	ldr	r1, [r0, #0]
 80001aa:	4a14      	ldr	r2, [pc, #80]	; (80001fc <HAL_ADC_MspInit+0x58>)
{
 80001ac:	b086      	sub	sp, #24
  if(adcHandle->Instance==ADC1)
 80001ae:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80001b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(adcHandle->Instance==ADC1)
 80001b8:	d001      	beq.n	80001be <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80001ba:	b006      	add	sp, #24
 80001bc:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80001be:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80001c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80001c8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ca:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001d0:	619a      	str	r2, [r3, #24]
 80001d2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d4:	480a      	ldr	r0, [pc, #40]	; (8000200 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001d6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80001da:	9200      	str	r2, [sp, #0]
 80001dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001de:	699a      	ldr	r2, [r3, #24]
 80001e0:	f042 0204 	orr.w	r2, r2, #4
 80001e4:	619a      	str	r2, [r3, #24]
 80001e6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80001e8:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ea:	f003 0304 	and.w	r3, r3, #4
 80001ee:	9301      	str	r3, [sp, #4]
 80001f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001f2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f4:	f000 fd30 	bl	8000c58 <HAL_GPIO_Init>
}
 80001f8:	b006      	add	sp, #24
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	40012400 	.word	0x40012400
 8000200:	40010800 	.word	0x40010800

08000204 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000204:	b510      	push	{r4, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000206:	2200      	movs	r2, #0
  hcan.Init.Prescaler = 16;
 8000208:	2410      	movs	r4, #16
  hcan.Instance = CAN1;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <MX_CAN_Init+0x34>)
 800020c:	490b      	ldr	r1, [pc, #44]	; (800023c <MX_CAN_Init+0x38>)
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800020e:	4618      	mov	r0, r3
  hcan.Instance = CAN1;
 8000210:	e9c3 1400 	strd	r1, r4, [r3]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000214:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000218:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800021c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800021e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000220:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000222:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000224:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000226:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000228:	f000 fc34 	bl	8000a94 <HAL_CAN_Init>
 800022c:	b900      	cbnz	r0, 8000230 <MX_CAN_Init+0x2c>
  {
    Error_Handler();
  }

}
 800022e:	bd10      	pop	{r4, pc}
 8000230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000234:	f000 b8e6 	b.w	8000404 <Error_Handler>
 8000238:	20000058 	.word	0x20000058
 800023c:	40006400 	.word	0x40006400

08000240 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000240:	2300      	movs	r3, #0
{
 8000242:	b510      	push	{r4, lr}
  if(canHandle->Instance==CAN1)
 8000244:	6801      	ldr	r1, [r0, #0]
 8000246:	4a1e      	ldr	r2, [pc, #120]	; (80002c0 <HAL_CAN_MspInit+0x80>)
{
 8000248:	b086      	sub	sp, #24
  if(canHandle->Instance==CAN1)
 800024a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000250:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(canHandle->Instance==CAN1)
 8000254:	d001      	beq.n	800025a <HAL_CAN_MspInit+0x1a>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000256:	b006      	add	sp, #24
 8000258:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800025a:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_RCC_CAN1_CLK_ENABLE();
 800025e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000262:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000266:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000268:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 800026a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800026e:	61da      	str	r2, [r3, #28]
 8000270:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000272:	4814      	ldr	r0, [pc, #80]	; (80002c4 <HAL_CAN_MspInit+0x84>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000274:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000278:	9200      	str	r2, [sp, #0]
 800027a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800027c:	699a      	ldr	r2, [r3, #24]
 800027e:	f042 0208 	orr.w	r2, r2, #8
 8000282:	619a      	str	r2, [r3, #24]
 8000284:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000286:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000288:	f003 0308 	and.w	r3, r3, #8
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000290:	f44f 7400 	mov.w	r4, #512	; 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000294:	f000 fce0 	bl	8000c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000298:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800029a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029c:	a902      	add	r1, sp, #8
 800029e:	4809      	ldr	r0, [pc, #36]	; (80002c4 <HAL_CAN_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a0:	e9cd 4202 	strd	r4, r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a6:	f000 fcd7 	bl	8000c58 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_2();
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <HAL_CAN_MspInit+0x88>)
 80002ac:	6853      	ldr	r3, [r2, #4]
 80002ae:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80002b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80002b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ba:	6053      	str	r3, [r2, #4]
}
 80002bc:	b006      	add	sp, #24
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	40006400 	.word	0x40006400
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	40010000 	.word	0x40010000

080002cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	2400      	movs	r4, #0
{
 80002d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80002d8:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b21      	ldr	r3, [pc, #132]	; (8000364 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 80002de:	4e22      	ldr	r6, [pc, #136]	; (8000368 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e0:	699a      	ldr	r2, [r3, #24]
                          |DB6_Pin|DB5_Pin|DB4_Pin|LED1_Pin 
                          |LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80002e2:	4d22      	ldr	r5, [pc, #136]	; (800036c <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	f042 0220 	orr.w	r2, r2, #32
 80002e8:	619a      	str	r2, [r3, #24]
 80002ea:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 80002ec:	4630      	mov	r0, r6
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ee:	f002 0220 	and.w	r2, r2, #32
 80002f2:	9201      	str	r2, [sp, #4]
 80002f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	6999      	ldr	r1, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 80002f8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	f041 0104 	orr.w	r1, r1, #4
 80002fe:	6199      	str	r1, [r3, #24]
 8000300:	6999      	ldr	r1, [r3, #24]
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
                          |DB6_Pin|DB5_Pin|DB4_Pin|LED1_Pin 
                          |LED2_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	f001 0104 	and.w	r1, r1, #4
 800030a:	9102      	str	r1, [sp, #8]
 800030c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030e:	6999      	ldr	r1, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	f041 0108 	orr.w	r1, r1, #8
 8000316:	6199      	str	r1, [r3, #24]
 8000318:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 800031a:	f64f 41f9 	movw	r1, #64761	; 0xfcf9
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	f003 0308 	and.w	r3, r3, #8
 8000322:	9303      	str	r3, [sp, #12]
 8000324:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 8000326:	f000 fd91 	bl	8000e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800032a:	4622      	mov	r2, r4
 800032c:	4628      	mov	r0, r5
 800032e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000332:	f000 fd8b 	bl	8000e4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SD_CS_Pin|EN_Pin|RS_Pin|DB7_Pin 
 8000336:	f64f 43f9 	movw	r3, #64761	; 0xfcf9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033a:	4630      	mov	r0, r6
 800033c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	e9cd 3804 	strd	r3, r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	f000 fc87 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800034a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800034e:	a904      	add	r1, sp, #16
 8000350:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	e9cd 8405 	strd	r8, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pin = DIR_Pin;
 8000358:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800035a:	f000 fc7d 	bl	8000c58 <HAL_GPIO_Init>

}
 800035e:	b008      	add	sp, #32
 8000360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000364:	40021000 	.word	0x40021000
 8000368:	40010c00 	.word	0x40010c00
 800036c:	40010800 	.word	0x40010800

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000372:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000374:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8000380:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000384:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000386:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000388:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038c:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000392:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000394:	940d      	str	r4, [sp, #52]	; 0x34
 8000396:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800039e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80003a6:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f000 fdd1 	bl	8000f50 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ae:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b4:	4629      	mov	r1, r5
 80003b6:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ba:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003be:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c2:	f000 fff3 	bl	80013ac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003c6:	2212      	movs	r2, #18
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003cc:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003ce:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003d0:	9201      	str	r2, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003d2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d4:	f001 f8aa 	bl	800152c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80003d8:	b015      	add	sp, #84	; 0x54
 80003da:	bd30      	pop	{r4, r5, pc}

080003dc <main>:
{
 80003dc:	b508      	push	{r3, lr}
  HAL_Init();
 80003de:	f000 f9dd 	bl	800079c <HAL_Init>
  SystemClock_Config();
 80003e2:	f7ff ffc5 	bl	8000370 <SystemClock_Config>
  MX_GPIO_Init();
 80003e6:	f7ff ff71 	bl	80002cc <MX_GPIO_Init>
  MX_CAN_Init();
 80003ea:	f7ff ff0b 	bl	8000204 <MX_CAN_Init>
  MX_SPI1_Init();
 80003ee:	f000 f80b 	bl	8000408 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80003f2:	f000 f8df 	bl	80005b4 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 80003f6:	f000 f957 	bl	80006a8 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80003fa:	f000 f8bf 	bl	800057c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80003fe:	f7ff fea5 	bl	800014c <MX_ADC1_Init>
 8000402:	e7fe      	b.n	8000402 <main+0x26>

08000404 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000408:	b570      	push	{r4, r5, r6, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040a:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800040e:	2200      	movs	r2, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000410:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000414:	2438      	movs	r4, #56	; 0x38
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8000416:	210a      	movs	r1, #10
  hspi1.Instance = SPI1;
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_SPI1_Init+0x40>)
 800041a:	480c      	ldr	r0, [pc, #48]	; (800044c <MX_SPI1_Init+0x44>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800041c:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi1.Instance = SPI1;
 8000420:	e9c3 0600 	strd	r0, r6, [r3]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000424:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8000426:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000428:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000430:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000436:	f001 f8fb 	bl	8001630 <HAL_SPI_Init>
 800043a:	b900      	cbnz	r0, 800043e <MX_SPI1_Init+0x36>
  {
    Error_Handler();
  }

}
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8000442:	f7ff bfdf 	b.w	8000404 <Error_Handler>
 8000446:	bf00      	nop
 8000448:	20000080 	.word	0x20000080
 800044c:	40013000 	.word	0x40013000

08000450 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000450:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8000454:	6802      	ldr	r2, [r0, #0]
 8000456:	4b19      	ldr	r3, [pc, #100]	; (80004bc <HAL_SPI_MspInit+0x6c>)
{
 8000458:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 800045a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000460:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(spiHandle->Instance==SPI1)
 8000464:	d001      	beq.n	800046a <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000466:	b006      	add	sp, #24
 8000468:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800046a:	21a0      	movs	r1, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046c:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046e:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000470:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000474:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800047c:	619a      	str	r2, [r3, #24]
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000484:	9200      	str	r2, [sp, #0]
 8000486:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	699a      	ldr	r2, [r3, #24]
 800048a:	f042 0204 	orr.w	r2, r2, #4
 800048e:	619a      	str	r2, [r3, #24]
 8000490:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000492:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	f000 fbd9 	bl	8000c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004a6:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	a902      	add	r1, sp, #8
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004b0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f000 fbd1 	bl	8000c58 <HAL_GPIO_Init>
}
 80004b6:	b006      	add	sp, #24
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	bf00      	nop
 80004bc:	40013000 	.word	0x40013000
 80004c0:	40010800 	.word	0x40010800

080004c4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_MspInit+0x3c>)
{
 80004c6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c8:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ca:	490e      	ldr	r1, [pc, #56]	; (8000504 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80004cc:	f042 0201 	orr.w	r2, r2, #1
 80004d0:	619a      	str	r2, [r3, #24]
 80004d2:	699a      	ldr	r2, [r3, #24]
 80004d4:	f002 0201 	and.w	r2, r2, #1
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004dc:	69da      	ldr	r2, [r3, #28]
 80004de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004e2:	61da      	str	r2, [r3, #28]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ee:	684b      	ldr	r3, [r1, #4]
 80004f0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	b002      	add	sp, #8
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	40010000 	.word	0x40010000

08000508 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050c:	e7fe      	b.n	800050c <HardFault_Handler>
 800050e:	bf00      	nop

08000510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000510:	e7fe      	b.n	8000510 <MemManage_Handler>
 8000512:	bf00      	nop

08000514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000514:	e7fe      	b.n	8000514 <BusFault_Handler>
 8000516:	bf00      	nop

08000518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000518:	e7fe      	b.n	8000518 <UsageFault_Handler>
 800051a:	bf00      	nop

0800051c <SVC_Handler>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <DebugMon_Handler>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <PendSV_Handler>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000528:	f000 b94a 	b.w	80007c0 <HAL_IncTick>

0800052c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800052c:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800052e:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000532:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 800053a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800053c:	480e      	ldr	r0, [pc, #56]	; (8000578 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 800053e:	f041 0101 	orr.w	r1, r1, #1
 8000542:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8000544:	6859      	ldr	r1, [r3, #4]
 8000546:	400a      	ands	r2, r1
 8000548:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000550:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000554:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800055c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000564:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8000566:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000568:	6084      	str	r4, [r0, #8]
#endif 
}
 800056a:	bc30      	pop	{r4, r5}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	f8ff0000 	.word	0xf8ff0000
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800057c:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 115200;
 8000580:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000584:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_USART1_UART_Init+0x30>)
 8000588:	4c09      	ldr	r4, [pc, #36]	; (80005b0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800058a:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 800058c:	e9c3 4500 	strd	r4, r5, [r3]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000590:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000592:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000596:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800059c:	f001 f8c8 	bl	8001730 <HAL_UART_Init>
 80005a0:	b900      	cbnz	r0, 80005a4 <MX_USART1_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 80005a2:	bd38      	pop	{r3, r4, r5, pc}
 80005a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80005a8:	f7ff bf2c 	b.w	8000404 <Error_Handler>
 80005ac:	200000d8 	.word	0x200000d8
 80005b0:	40013800 	.word	0x40013800

080005b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	2200      	movs	r2, #0
  huart2.Init.BaudRate = 115200;
 80005b8:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005bc:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART2_UART_Init+0x30>)
 80005c0:	4c09      	ldr	r4, [pc, #36]	; (80005e8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c2:	4618      	mov	r0, r3
  huart2.Instance = USART2;
 80005c4:	e9c3 4500 	strd	r4, r5, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c8:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ca:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d4:	f001 f8ac 	bl	8001730 <HAL_UART_Init>
 80005d8:	b900      	cbnz	r0, 80005dc <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80005e0:	f7ff bf10 	b.w	8000404 <Error_Handler>
 80005e4:	20000118 	.word	0x20000118
 80005e8:	40004400 	.word	0x40004400

080005ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005ec:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 80005f0:	6803      	ldr	r3, [r0, #0]
 80005f2:	4a29      	ldr	r2, [pc, #164]	; (8000698 <HAL_UART_MspInit+0xac>)
{
 80005f4:	b088      	sub	sp, #32
  if(uartHandle->Instance==USART1)
 80005f6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80005fc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8000600:	d029      	beq.n	8000656 <HAL_UART_MspInit+0x6a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8000602:	4a26      	ldr	r2, [pc, #152]	; (800069c <HAL_UART_MspInit+0xb0>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d001      	beq.n	800060c <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000608:	b008      	add	sp, #32
 800060a:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800060c:	2104      	movs	r1, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000610:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <HAL_UART_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	4823      	ldr	r0, [pc, #140]	; (80006a4 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000616:	69da      	ldr	r2, [r3, #28]
 8000618:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800061c:	61da      	str	r2, [r3, #28]
 800061e:	69da      	ldr	r2, [r3, #28]
 8000620:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000624:	9202      	str	r2, [sp, #8]
 8000626:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	699a      	ldr	r2, [r3, #24]
 800062a:	430a      	orrs	r2, r1
 800062c:	619a      	str	r2, [r3, #24]
 800062e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000630:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	400b      	ands	r3, r1
 8000634:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f000 fb0b 	bl	8000c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000642:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	a904      	add	r1, sp, #16
 8000646:	4817      	ldr	r0, [pc, #92]	; (80006a4 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800064c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f000 fb03 	bl	8000c58 <HAL_GPIO_Init>
}
 8000652:	b008      	add	sp, #32
 8000654:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000656:	f44f 7100 	mov.w	r1, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_UART_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	4810      	ldr	r0, [pc, #64]	; (80006a4 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000662:	699a      	ldr	r2, [r3, #24]
 8000664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000668:	619a      	str	r2, [r3, #24]
 800066a:	699a      	ldr	r2, [r3, #24]
 800066c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000670:	9200      	str	r2, [sp, #0]
 8000672:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	699a      	ldr	r2, [r3, #24]
 8000676:	f042 0204 	orr.w	r2, r2, #4
 800067a:	619a      	str	r2, [r3, #24]
 800067c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800067e:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f000 fae3 	bl	8000c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000696:	e7d5      	b.n	8000644 <HAL_UART_MspInit+0x58>
 8000698:	40013800 	.word	0x40013800
 800069c:	40004400 	.word	0x40004400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800

080006a8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80006a8:	b538      	push	{r3, r4, r5, lr}

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006aa:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006ac:	2508      	movs	r5, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006ae:	2102      	movs	r1, #2
  hpcd_USB_FS.Instance = USB;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USB_PCD_Init+0x2c>)
 80006b2:	4c09      	ldr	r4, [pc, #36]	; (80006d8 <MX_USB_PCD_Init+0x30>)
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006b4:	4618      	mov	r0, r3
  hpcd_USB_FS.Instance = USB;
 80006b6:	e9c3 4500 	strd	r4, r5, [r3]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006ba:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006bc:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006c2:	f000 fbc7 	bl	8000e54 <HAL_PCD_Init>
 80006c6:	b900      	cbnz	r0, 80006ca <MX_USB_PCD_Init+0x22>
  {
    Error_Handler();
  }

}
 80006c8:	bd38      	pop	{r3, r4, r5, pc}
 80006ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80006ce:	f7ff be99 	b.w	8000404 <Error_Handler>
 80006d2:	bf00      	nop
 80006d4:	20000158 	.word	0x20000158
 80006d8:	40005c00 	.word	0x40005c00

080006dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{

  if(pcdHandle->Instance==USB)
 80006dc:	6802      	ldr	r2, [r0, #0]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_PCD_MspInit+0x28>)
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d000      	beq.n	80006e6 <HAL_PCD_MspInit+0xa>
 80006e4:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80006e6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80006ea:	69da      	ldr	r2, [r3, #28]
{
 80006ec:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 80006ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006f2:	61da      	str	r2, [r3, #28]
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80006fe:	b002      	add	sp, #8
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40005c00 	.word	0x40005c00

08000708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000708:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800070a:	e003      	b.n	8000714 <LoopCopyDataInit>

0800070c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800070e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000710:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000712:	3104      	adds	r1, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000718:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800071a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800071c:	d3f6      	bcc.n	800070c <CopyDataInit>
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000720:	e002      	b.n	8000728 <LoopFillZerobss>

08000722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000724:	f842 3b04 	str.w	r3, [r2], #4

08000728 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800072c:	d3f9      	bcc.n	8000722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072e:	f7ff fefd 	bl	800052c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000732:	f001 f85d 	bl	80017f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fe51 	bl	80003dc <main>
  bx lr
 800073a:	4770      	bx	lr
  ldr r3, =_sidata
 800073c:	08001880 	.word	0x08001880
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000744:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000748:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800074c:	200003c8 	.word	0x200003c8

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>
	...

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	490d      	ldr	r1, [pc, #52]	; (8000790 <HAL_InitTick+0x3c>)
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <HAL_InitTick+0x40>)
 800075e:	7809      	ldrb	r1, [r1, #0]
 8000760:	6812      	ldr	r2, [r2, #0]
 8000762:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000766:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000768:	fbb2 f0f3 	udiv	r0, r2, r3
 800076c:	f000 fa5c 	bl	8000c28 <HAL_SYSTICK_Config>
 8000770:	b908      	cbnz	r0, 8000776 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	2d0f      	cmp	r5, #15
 8000774:	d901      	bls.n	800077a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000776:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000778:	bd38      	pop	{r3, r4, r5, pc}
 800077a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	4602      	mov	r2, r0
 800077e:	4629      	mov	r1, r5
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 fa1a 	bl	8000bbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <HAL_InitTick+0x44>)
 800078a:	4620      	mov	r0, r4
 800078c:	601d      	str	r5, [r3, #0]
}
 800078e:	bd38      	pop	{r3, r4, r5, pc}
 8000790:	20000004 	.word	0x20000004
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008

0800079c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_Init+0x20>)
{
 800079e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007aa:	f000 f9f5 	bl	8000b98 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ffd0 	bl	8000754 <HAL_InitTick>
  HAL_MspInit();
 80007b4:	f7ff fe86 	bl	80004c4 <HAL_MspInit>
}
 80007b8:	2000      	movs	r0, #0
 80007ba:	bd08      	pop	{r3, pc}
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <HAL_IncTick+0x10>)
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <HAL_IncTick+0x14>)
 80007c4:	6811      	ldr	r1, [r2, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	440b      	add	r3, r1
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200003c4 	.word	0x200003c4
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007d8:	4b01      	ldr	r3, [pc, #4]	; (80007e0 <HAL_GetTick+0x8>)
 80007da:	6818      	ldr	r0, [r3, #0]
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200003c4 	.word	0x200003c4

080007e4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80007e4:	2200      	movs	r2, #0
{ 
 80007e6:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80007ec:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 80007ee:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 80007f0:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80007f2:	d05f      	beq.n	80008b4 <HAL_ADC_ConfigChannel+0xd0>
 80007f4:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007f6:	684d      	ldr	r5, [r1, #4]
 80007f8:	6804      	ldr	r4, [r0, #0]
 80007fa:	2d06      	cmp	r5, #6
  __HAL_LOCK(hadc);
 80007fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000800:	680a      	ldr	r2, [r1, #0]
 8000802:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000806:	f04f 061f 	mov.w	r6, #31
  if (sConfig->Rank < 7U)
 800080a:	d925      	bls.n	8000858 <HAL_ADC_ConfigChannel+0x74>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800080c:	2d0c      	cmp	r5, #12
 800080e:	d847      	bhi.n	80008a0 <HAL_ADC_ConfigChannel+0xbc>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000810:	3b23      	subs	r3, #35	; 0x23
 8000812:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000814:	409e      	lsls	r6, r3
 8000816:	ea25 0506 	bic.w	r5, r5, r6
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	432b      	orrs	r3, r5
 8000820:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000822:	2a09      	cmp	r2, #9
 8000824:	688b      	ldr	r3, [r1, #8]
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000826:	f04f 0607 	mov.w	r6, #7
 800082a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800082e:	d923      	bls.n	8000878 <HAL_ADC_ConfigChannel+0x94>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000830:	391e      	subs	r1, #30
 8000832:	68e5      	ldr	r5, [r4, #12]
 8000834:	408e      	lsls	r6, r1
 8000836:	408b      	lsls	r3, r1
 8000838:	ea25 0106 	bic.w	r1, r5, r6
 800083c:	430b      	orrs	r3, r1
 800083e:	60e3      	str	r3, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000840:	f1a2 0310 	sub.w	r3, r2, #16
 8000844:	2b01      	cmp	r3, #1
 8000846:	d922      	bls.n	800088e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000848:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800084a:	2200      	movs	r2, #0
 800084c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000850:	4618      	mov	r0, r3
 8000852:	b003      	add	sp, #12
 8000854:	bc70      	pop	{r4, r5, r6}
 8000856:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000858:	3b05      	subs	r3, #5
 800085a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800085c:	409e      	lsls	r6, r3
 800085e:	ea25 0506 	bic.w	r5, r5, r6
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000868:	2a09      	cmp	r2, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800086a:	6363      	str	r3, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800086c:	f04f 0607 	mov.w	r6, #7
 8000870:	688b      	ldr	r3, [r1, #8]
 8000872:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000876:	d8db      	bhi.n	8000830 <HAL_ADC_ConfigChannel+0x4c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000878:	6925      	ldr	r5, [r4, #16]
 800087a:	408e      	lsls	r6, r1
 800087c:	408b      	lsls	r3, r1
 800087e:	ea25 0106 	bic.w	r1, r5, r6
 8000882:	430b      	orrs	r3, r1
 8000884:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000886:	f1a2 0310 	sub.w	r3, r2, #16
 800088a:	2b01      	cmp	r3, #1
 800088c:	d8dc      	bhi.n	8000848 <HAL_ADC_ConfigChannel+0x64>
    if (hadc->Instance == ADC1)
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <HAL_ADC_ConfigChannel+0x114>)
 8000890:	429c      	cmp	r4, r3
 8000892:	d014      	beq.n	80008be <HAL_ADC_ConfigChannel+0xda>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000894:	6a82      	ldr	r2, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000896:	2301      	movs	r3, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000898:	f042 0220 	orr.w	r2, r2, #32
 800089c:	6282      	str	r2, [r0, #40]	; 0x28
 800089e:	e7d4      	b.n	800084a <HAL_ADC_ConfigChannel+0x66>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80008a0:	3b41      	subs	r3, #65	; 0x41
 80008a2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80008a4:	409e      	lsls	r6, r3
 80008a6:	ea25 0506 	bic.w	r5, r5, r6
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	432b      	orrs	r3, r5
 80008b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008b2:	e7b6      	b.n	8000822 <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80008b4:	2302      	movs	r3, #2
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	b003      	add	sp, #12
 80008ba:	bc70      	pop	{r4, r5, r6}
 80008bc:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008be:	68a3      	ldr	r3, [r4, #8]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	d4c1      	bmi.n	8000848 <HAL_ADC_ConfigChannel+0x64>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008c4:	68a3      	ldr	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008c6:	2a10      	cmp	r2, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008cc:	60a3      	str	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80008ce:	d1bb      	bne.n	8000848 <HAL_ADC_ConfigChannel+0x64>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_ADC_ConfigChannel+0x118>)
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <HAL_ADC_ConfigChannel+0x11c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	fba2 2303 	umull	r2, r3, r2, r3
 80008da:	0c9b      	lsrs	r3, r3, #18
 80008dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80008e4:	9b01      	ldr	r3, [sp, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0ae      	beq.n	8000848 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 80008ea:	9b01      	ldr	r3, [sp, #4]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80008f0:	9b01      	ldr	r3, [sp, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f9      	bne.n	80008ea <HAL_ADC_ConfigChannel+0x106>
 80008f6:	e7a7      	b.n	8000848 <HAL_ADC_ConfigChannel+0x64>
 80008f8:	40012400 	.word	0x40012400
 80008fc:	20000000 	.word	0x20000000
 8000900:	431bde83 	.word	0x431bde83

08000904 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000904:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000906:	6803      	ldr	r3, [r0, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	07d2      	lsls	r2, r2, #31
 800090c:	d401      	bmi.n	8000912 <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800090e:	2000      	movs	r0, #0
}
 8000910:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	4604      	mov	r4, r0
 8000916:	f022 0201 	bic.w	r2, r2, #1
 800091a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800091c:	f7ff ff5c 	bl	80007d8 <HAL_GetTick>
 8000920:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	07db      	lsls	r3, r3, #31
 8000928:	d5f1      	bpl.n	800090e <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800092a:	f7ff ff55 	bl	80007d8 <HAL_GetTick>
 800092e:	1b40      	subs	r0, r0, r5
 8000930:	2802      	cmp	r0, #2
 8000932:	d9f6      	bls.n	8000922 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000934:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000936:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800093e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000940:	4303      	orrs	r3, r0
 8000942:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8000944:	bd38      	pop	{r3, r4, r5, pc}
 8000946:	bf00      	nop

08000948 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000948:	2800      	cmp	r0, #0
 800094a:	d057      	beq.n	80009fc <HAL_ADC_Init+0xb4>
{
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 800094e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000950:	4604      	mov	r4, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d045      	beq.n	80009e2 <HAL_ADC_Init+0x9a>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000956:	4620      	mov	r0, r4
 8000958:	f7ff ffd4 	bl	8000904 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800095c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800095e:	f013 0310 	ands.w	r3, r3, #16
 8000962:	d138      	bne.n	80009d6 <HAL_ADC_Init+0x8e>
 8000964:	2800      	cmp	r0, #0
 8000966:	d136      	bne.n	80009d6 <HAL_ADC_Init+0x8e>
    ADC_STATE_CLR_SET(hadc->State,
 8000968:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800096a:	69e6      	ldr	r6, [r4, #28]
 800096c:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800096e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000972:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000974:	f022 0202 	bic.w	r2, r2, #2
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000978:	7b27      	ldrb	r7, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800097a:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800097e:	4331      	orrs	r1, r6
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000980:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    ADC_STATE_CLR_SET(hadc->State,
 8000984:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000986:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 800098a:	7d26      	ldrb	r6, [r4, #20]
 800098c:	6822      	ldr	r2, [r4, #0]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800098e:	d037      	beq.n	8000a00 <HAL_ADC_Init+0xb8>
 8000990:	2d01      	cmp	r5, #1
 8000992:	d04f      	beq.n	8000a34 <HAL_ADC_Init+0xec>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000994:	2e01      	cmp	r6, #1
 8000996:	d052      	beq.n	8000a3e <HAL_ADC_Init+0xf6>
      MODIFY_REG(hadc->Instance->CR1,
 8000998:	6855      	ldr	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800099a:	4b3c      	ldr	r3, [pc, #240]	; (8000a8c <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 800099c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80009a0:	6055      	str	r5, [r2, #4]
  uint32_t tmp_sqr1 = 0U;
 80009a2:	4605      	mov	r5, r0
      MODIFY_REG(hadc->Instance->CR2,
 80009a4:	6896      	ldr	r6, [r2, #8]
 80009a6:	4033      	ands	r3, r6
 80009a8:	430b      	orrs	r3, r1
 80009aa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hadc->Instance->SQR1,
 80009ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ae:	4e38      	ldr	r6, [pc, #224]	; (8000a90 <HAL_ADC_Init+0x148>)
    MODIFY_REG(hadc->Instance->SQR1,
 80009b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80009b4:	432b      	orrs	r3, r5
 80009b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009b8:	6893      	ldr	r3, [r2, #8]
 80009ba:	401e      	ands	r6, r3
 80009bc:	42b1      	cmp	r1, r6
 80009be:	d030      	beq.n	8000a22 <HAL_ADC_Init+0xda>
      tmp_hal_status = HAL_ERROR;
 80009c0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80009c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009c4:	f023 0312 	bic.w	r3, r3, #18
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009d0:	4303      	orrs	r3, r0
 80009d2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80009d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80009e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80009e2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80009e4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80009e8:	f7ff fbdc 	bl	80001a4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff ff89 	bl	8000904 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009f4:	f013 0310 	ands.w	r3, r3, #16
 80009f8:	d1ed      	bne.n	80009d6 <HAL_ADC_Init+0x8e>
 80009fa:	e7b3      	b.n	8000964 <HAL_ADC_Init+0x1c>
    return HAL_ERROR;
 80009fc:	2001      	movs	r0, #1
}
 80009fe:	4770      	bx	lr
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a00:	2e01      	cmp	r6, #1
 8000a02:	d03f      	beq.n	8000a84 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->CR1,
 8000a04:	6855      	ldr	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 8000a08:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000a0c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8000a10:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a12:	6895      	ldr	r5, [r2, #8]
 8000a14:	402b      	ands	r3, r5
 8000a16:	430b      	orrs	r3, r1
 8000a18:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a1a:	6923      	ldr	r3, [r4, #16]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	051d      	lsls	r5, r3, #20
 8000a20:	e7c4      	b.n	80009ac <HAL_ADC_Init+0x64>
      ADC_CLEAR_ERRORCODE(hadc);
 8000a22:	2300      	movs	r3, #0
 8000a24:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a28:	f023 0303 	bic.w	r3, r3, #3
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a34:	2e01      	cmp	r6, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a36:	bf08      	it	eq
 8000a38:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a3c:	d1e2      	bne.n	8000a04 <HAL_ADC_Init+0xbc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a3e:	b1d7      	cbz	r7, 8000a76 <HAL_ADC_Init+0x12e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a42:	f046 0620 	orr.w	r6, r6, #32
 8000a46:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a4a:	f046 0601 	orr.w	r6, r6, #1
 8000a4e:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8000a50:	6857      	ldr	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a52:	4e0e      	ldr	r6, [pc, #56]	; (8000a8c <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 8000a54:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8000a58:	433b      	orrs	r3, r7
 8000a5a:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a5c:	6893      	ldr	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a5e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 8000a62:	ea06 0603 	and.w	r6, r6, r3
 8000a66:	ea46 0601 	orr.w	r6, r6, r1
 8000a6a:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a6c:	d0d5      	beq.n	8000a1a <HAL_ADC_Init+0xd2>
 8000a6e:	2d01      	cmp	r5, #1
 8000a70:	d0d3      	beq.n	8000a1a <HAL_ADC_Init+0xd2>
  uint32_t tmp_sqr1 = 0U;
 8000a72:	2500      	movs	r5, #0
 8000a74:	e79a      	b.n	80009ac <HAL_ADC_Init+0x64>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a76:	69a6      	ldr	r6, [r4, #24]
 8000a78:	3e01      	subs	r6, #1
 8000a7a:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8000a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a82:	e7e5      	b.n	8000a50 <HAL_ADC_Init+0x108>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a84:	462b      	mov	r3, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a86:	2f00      	cmp	r7, #0
 8000a88:	d1da      	bne.n	8000a40 <HAL_ADC_Init+0xf8>
 8000a8a:	e7f4      	b.n	8000a76 <HAL_ADC_Init+0x12e>
 8000a8c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a90:	ff1f0efe 	.word	0xff1f0efe

08000a94 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d07d      	beq.n	8000b94 <HAL_CAN_Init+0x100>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a98:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d074      	beq.n	8000b8e <HAL_CAN_Init+0xfa>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aa4:	6822      	ldr	r2, [r4, #0]
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f023 0302 	bic.w	r3, r3, #2
 8000aac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aae:	f7ff fe93 	bl	80007d8 <HAL_GetTick>
 8000ab2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ab4:	e004      	b.n	8000ac0 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab6:	f7ff fe8f 	bl	80007d8 <HAL_GetTick>
 8000aba:	1b40      	subs	r0, r0, r5
 8000abc:	280a      	cmp	r0, #10
 8000abe:	d85d      	bhi.n	8000b7c <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	0791      	lsls	r1, r2, #30
 8000ac6:	d4f6      	bmi.n	8000ab6 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	f042 0201 	orr.w	r2, r2, #1
 8000ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ad0:	f7ff fe82 	bl	80007d8 <HAL_GetTick>
 8000ad4:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad6:	e004      	b.n	8000ae2 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad8:	f7ff fe7e 	bl	80007d8 <HAL_GetTick>
 8000adc:	1b40      	subs	r0, r0, r5
 8000ade:	280a      	cmp	r0, #10
 8000ae0:	d84c      	bhi.n	8000b7c <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	07d2      	lsls	r2, r2, #31
 8000ae8:	d5f6      	bpl.n	8000ad8 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000aea:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000aec:	2500      	movs	r5, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000aee:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000af0:	681a      	ldr	r2, [r3, #0]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000af2:	f04f 0601 	mov.w	r6, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000af6:	bf0c      	ite	eq
 8000af8:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000afc:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000b00:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b02:	7e62      	ldrb	r2, [r4, #25]
 8000b04:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	bf0c      	ite	eq
 8000b0a:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b0e:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000b12:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b14:	7ea2      	ldrb	r2, [r4, #26]
 8000b16:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	bf0c      	ite	eq
 8000b1c:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b20:	f022 0220 	bicne.w	r2, r2, #32
 8000b24:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b26:	7ee2      	ldrb	r2, [r4, #27]
 8000b28:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	bf0c      	ite	eq
 8000b2e:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b32:	f042 0210 	orrne.w	r2, r2, #16
 8000b36:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b38:	7f22      	ldrb	r2, [r4, #28]
 8000b3a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	bf0c      	ite	eq
 8000b40:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b44:	f022 0208 	bicne.w	r2, r2, #8
 8000b48:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b4a:	7f62      	ldrb	r2, [r4, #29]
 8000b4c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	bf0c      	ite	eq
 8000b52:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b56:	f022 0204 	bicne.w	r2, r2, #4
 8000b5a:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b5c:	6921      	ldr	r1, [r4, #16]
 8000b5e:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8000b62:	4302      	orrs	r2, r0
 8000b64:	430a      	orrs	r2, r1
 8000b66:	6960      	ldr	r0, [r4, #20]
 8000b68:	6861      	ldr	r1, [r4, #4]
 8000b6a:	4302      	orrs	r2, r0
 8000b6c:	3901      	subs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8000b72:	4628      	mov	r0, r5
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b74:	6265      	str	r5, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000b76:	f884 6020 	strb.w	r6, [r4, #32]
}
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b7c:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8000b80:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b86:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b88:	f884 2020 	strb.w	r2, [r4, #32]
}
 8000b8c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8000b8e:	f7ff fb57 	bl	8000240 <HAL_CAN_MspInit>
 8000b92:	e787      	b.n	8000aa4 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
}
 8000b96:	4770      	bx	lr

08000b98 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b98:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b9e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000bb0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bb2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbe:	b430      	push	{r4, r5}
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc6:	f1c3 0507 	rsb	r5, r3, #7
 8000bca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bcc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd0:	bf28      	it	cs
 8000bd2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd4:	2c06      	cmp	r4, #6
 8000bd6:	d919      	bls.n	8000c0c <HAL_NVIC_SetPriority+0x50>
 8000bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	409c      	lsls	r4, r3
 8000be0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	40aa      	lsls	r2, r5
 8000bea:	ea21 0102 	bic.w	r1, r1, r2
 8000bee:	fa01 f203 	lsl.w	r2, r1, r3
 8000bf2:	4322      	orrs	r2, r4
 8000bf4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	db0a      	blt.n	8000c12 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c04:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c08:	bc30      	pop	{r4, r5}
 8000c0a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	4623      	mov	r3, r4
 8000c10:	e7e8      	b.n	8000be4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_NVIC_SetPriority+0x68>)
 8000c14:	f000 000f 	and.w	r0, r0, #15
 8000c18:	4403      	add	r3, r0
 8000c1a:	761a      	strb	r2, [r3, #24]
 8000c1c:	bc30      	pop	{r4, r5}
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00
 8000c24:	e000ecfc 	.word	0xe000ecfc

08000c28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	3801      	subs	r0, #1
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d20d      	bcs.n	8000c4c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c30:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	4c06      	ldr	r4, [pc, #24]	; (8000c54 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c42:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000c44:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c48:	6019      	str	r1, [r3, #0]
 8000c4a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	e000e010 	.word	0xe000e010
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c58:	680a      	ldr	r2, [r1, #0]
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	f000 80dc 	beq.w	8000e18 <HAL_GPIO_Init+0x1c0>
{
 8000c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8000c64:	f04f 0a00 	mov.w	sl, #0
{
 8000c68:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8000c6a:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6c:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8000e40 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c70:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8000e44 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c74:	4f6d      	ldr	r7, [pc, #436]	; (8000e2c <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c76:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000e48 <HAL_GPIO_Init+0x1f0>
 8000c7a:	e003      	b.n	8000c84 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000c7c:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7e:	fa32 f305 	lsrs.w	r3, r2, r5
 8000c82:	d079      	beq.n	8000d78 <HAL_GPIO_Init+0x120>
    ioposition = (0x01uL << position);
 8000c84:	2301      	movs	r3, #1
 8000c86:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c88:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8000c8c:	42a3      	cmp	r3, r4
 8000c8e:	d1f5      	bne.n	8000c7c <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000c90:	684a      	ldr	r2, [r1, #4]
 8000c92:	2a12      	cmp	r2, #18
 8000c94:	f000 809f 	beq.w	8000dd6 <HAL_GPIO_Init+0x17e>
 8000c98:	f200 8088 	bhi.w	8000dac <HAL_GPIO_Init+0x154>
 8000c9c:	2a02      	cmp	r2, #2
 8000c9e:	f000 809e 	beq.w	8000dde <HAL_GPIO_Init+0x186>
 8000ca2:	d97d      	bls.n	8000da0 <HAL_GPIO_Init+0x148>
 8000ca4:	2a03      	cmp	r2, #3
 8000ca6:	d06a      	beq.n	8000d7e <HAL_GPIO_Init+0x126>
 8000ca8:	2a11      	cmp	r2, #17
 8000caa:	d102      	bne.n	8000cb2 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cac:	68cb      	ldr	r3, [r1, #12]
 8000cae:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb2:	2cff      	cmp	r4, #255	; 0xff
 8000cb4:	d867      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cb6:	4681      	mov	r9, r0
 8000cb8:	6803      	ldr	r3, [r0, #0]
 8000cba:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cbc:	260f      	movs	r6, #15
 8000cbe:	fa06 fb02 	lsl.w	fp, r6, r2
 8000cc2:	ea23 030b 	bic.w	r3, r3, fp
 8000cc6:	fa0a f202 	lsl.w	r2, sl, r2
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd0:	684a      	ldr	r2, [r1, #4]
 8000cd2:	00d3      	lsls	r3, r2, #3
 8000cd4:	d562      	bpl.n	8000d9c <HAL_GPIO_Init+0x144>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8000cda:	f025 0303 	bic.w	r3, r5, #3
 8000cde:	f049 0901 	orr.w	r9, r9, #1
 8000ce2:	f8cc 9018 	str.w	r9, [ip, #24]
 8000ce6:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8000cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cee:	f009 0901 	and.w	r9, r9, #1
 8000cf2:	f8cd 900c 	str.w	r9, [sp, #12]
 8000cf6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cfa:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfe:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d02:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000d06:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d0a:	fa06 f609 	lsl.w	r6, r6, r9
 8000d0e:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d12:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d14:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d16:	d011      	beq.n	8000d3c <HAL_GPIO_Init+0xe4>
 8000d18:	4540      	cmp	r0, r8
 8000d1a:	d064      	beq.n	8000de6 <HAL_GPIO_Init+0x18e>
 8000d1c:	4e44      	ldr	r6, [pc, #272]	; (8000e30 <HAL_GPIO_Init+0x1d8>)
 8000d1e:	42b0      	cmp	r0, r6
 8000d20:	d07b      	beq.n	8000e1a <HAL_GPIO_Init+0x1c2>
 8000d22:	4e44      	ldr	r6, [pc, #272]	; (8000e34 <HAL_GPIO_Init+0x1dc>)
 8000d24:	42b0      	cmp	r0, r6
 8000d26:	bf0c      	ite	eq
 8000d28:	f04f 0b03 	moveq.w	fp, #3
 8000d2c:	f04f 0b04 	movne.w	fp, #4
 8000d30:	9e01      	ldr	r6, [sp, #4]
 8000d32:	fa0b f909 	lsl.w	r9, fp, r9
 8000d36:	ea46 0609 	orr.w	r6, r6, r9
 8000d3a:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3c:	9e01      	ldr	r6, [sp, #4]
 8000d3e:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000d40:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d42:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8000d44:	bf4c      	ite	mi
 8000d46:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d48:	43a3      	bicpl	r3, r4
 8000d4a:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000d4c:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4e:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8000d50:	bf4c      	ite	mi
 8000d52:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d54:	43a3      	bicpl	r3, r4
 8000d56:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d58:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5a:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d5c:	bf4c      	ite	mi
 8000d5e:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d60:	43a3      	bicpl	r3, r4
 8000d62:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d64:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d66:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d68:	d515      	bpl.n	8000d96 <HAL_GPIO_Init+0x13e>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d6a:	431c      	orrs	r4, r3
 8000d6c:	60fc      	str	r4, [r7, #12]
 8000d6e:	680a      	ldr	r2, [r1, #0]
	position++;
 8000d70:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	fa32 f305 	lsrs.w	r3, r2, r5
 8000d76:	d185      	bne.n	8000c84 <HAL_GPIO_Init+0x2c>
  }
}
 8000d78:	b005      	add	sp, #20
 8000d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d7e:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d80:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d84:	d997      	bls.n	8000cb6 <HAL_GPIO_Init+0x5e>
 8000d86:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8000d8a:	3a08      	subs	r2, #8
 8000d8c:	6843      	ldr	r3, [r0, #4]
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	f100 0904 	add.w	r9, r0, #4
 8000d94:	e792      	b.n	8000cbc <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d96:	ea23 0404 	bic.w	r4, r3, r4
 8000d9a:	60fc      	str	r4, [r7, #12]
 8000d9c:	680a      	ldr	r2, [r1, #0]
 8000d9e:	e76d      	b.n	8000c7c <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000da0:	b1a2      	cbz	r2, 8000dcc <HAL_GPIO_Init+0x174>
 8000da2:	2a01      	cmp	r2, #1
 8000da4:	d185      	bne.n	8000cb2 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000da6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000daa:	e782      	b.n	8000cb2 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8000dac:	4e22      	ldr	r6, [pc, #136]	; (8000e38 <HAL_GPIO_Init+0x1e0>)
 8000dae:	42b2      	cmp	r2, r6
 8000db0:	d00c      	beq.n	8000dcc <HAL_GPIO_Init+0x174>
 8000db2:	d920      	bls.n	8000df6 <HAL_GPIO_Init+0x19e>
 8000db4:	4e21      	ldr	r6, [pc, #132]	; (8000e3c <HAL_GPIO_Init+0x1e4>)
 8000db6:	42b2      	cmp	r2, r6
 8000db8:	d008      	beq.n	8000dcc <HAL_GPIO_Init+0x174>
 8000dba:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000dbe:	42b2      	cmp	r2, r6
 8000dc0:	d004      	beq.n	8000dcc <HAL_GPIO_Init+0x174>
 8000dc2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8000dc6:	42b2      	cmp	r2, r6
 8000dc8:	f47f af73 	bne.w	8000cb2 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dcc:	688a      	ldr	r2, [r1, #8]
 8000dce:	b9e2      	cbnz	r2, 8000e0a <HAL_GPIO_Init+0x1b2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dd0:	f04f 0a04 	mov.w	sl, #4
 8000dd4:	e76d      	b.n	8000cb2 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dd6:	68cb      	ldr	r3, [r1, #12]
 8000dd8:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8000ddc:	e769      	b.n	8000cb2 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dde:	68cb      	ldr	r3, [r1, #12]
 8000de0:	f103 0a08 	add.w	sl, r3, #8
          break;
 8000de4:	e765      	b.n	8000cb2 <HAL_GPIO_Init+0x5a>
 8000de6:	f04f 0b01 	mov.w	fp, #1
 8000dea:	fa0b f909 	lsl.w	r9, fp, r9
 8000dee:	ea46 0609 	orr.w	r6, r6, r9
 8000df2:	9601      	str	r6, [sp, #4]
 8000df4:	e7a2      	b.n	8000d3c <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 8000df6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8000dfa:	42b2      	cmp	r2, r6
 8000dfc:	d0e6      	beq.n	8000dcc <HAL_GPIO_Init+0x174>
 8000dfe:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000e02:	42b2      	cmp	r2, r6
 8000e04:	f47f af55 	bne.w	8000cb2 <HAL_GPIO_Init+0x5a>
 8000e08:	e7e0      	b.n	8000dcc <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e0a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000e0c:	bf0c      	ite	eq
 8000e0e:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8000e10:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e12:	f04f 0a08 	mov.w	sl, #8
 8000e16:	e74c      	b.n	8000cb2 <HAL_GPIO_Init+0x5a>
 8000e18:	4770      	bx	lr
 8000e1a:	f04f 0b02 	mov.w	fp, #2
 8000e1e:	9e01      	ldr	r6, [sp, #4]
 8000e20:	fa0b f909 	lsl.w	r9, fp, r9
 8000e24:	ea46 0609 	orr.w	r6, r6, r9
 8000e28:	9601      	str	r6, [sp, #4]
 8000e2a:	e787      	b.n	8000d3c <HAL_GPIO_Init+0xe4>
 8000e2c:	40010400 	.word	0x40010400
 8000e30:	40011000 	.word	0x40011000
 8000e34:	40011400 	.word	0x40011400
 8000e38:	10210000 	.word	0x10210000
 8000e3c:	10310000 	.word	0x10310000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40010c00 	.word	0x40010c00

08000e4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e4c:	b902      	cbnz	r2, 8000e50 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e4e:	0409      	lsls	r1, r1, #16
 8000e50:	6101      	str	r1, [r0, #16]
  }
}
 8000e52:	4770      	bx	lr

08000e54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e56:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d074      	beq.n	8000f46 <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e5c:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000e60:	4604      	mov	r4, r0
 8000e62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d068      	beq.n	8000f3c <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e6a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e6c:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e6e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8000e72:	6820      	ldr	r0, [r4, #0]
 8000e74:	f000 fc94 	bl	80017a0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e78:	f856 cb10 	ldr.w	ip, [r6], #16
 8000e7c:	466d      	mov	r5, sp
 8000e7e:	4637      	mov	r7, r6
 8000e80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	1d27      	adds	r7, r4, #4
 8000e88:	602b      	str	r3, [r5, #0]
 8000e8a:	4660      	mov	r0, ip
 8000e8c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000e90:	f000 fc7e 	bl	8001790 <USB_CoreInit>
 8000e94:	4605      	mov	r5, r0
 8000e96:	b130      	cbz	r0, 8000ea6 <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e98:	2302      	movs	r3, #2
    return HAL_ERROR;
 8000e9a:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e9c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	b007      	add	sp, #28
 8000ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	6820      	ldr	r0, [r4, #0]
 8000eaa:	f000 fc83 	bl	80017b4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eae:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000eb2:	f1bc 0f00 	cmp.w	ip, #0
 8000eb6:	d029      	beq.n	8000f0c <HAL_PCD_Init+0xb8>
 8000eb8:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 8000eba:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ebe:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 8000ec0:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec4:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 8000ec6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eca:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ecc:	b2e8      	uxtb	r0, r5
 8000ece:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 8000ed0:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ed4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ed8:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ede:	d3ef      	bcc.n	8000ec0 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee0:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee8:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eea:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 8000eee:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef2:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ef4:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef6:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 8000ef8:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000efc:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f00:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f04:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f08:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0a:	d3eb      	bcc.n	8000ee4 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f0e:	466d      	mov	r5, sp
 8000f10:	f8d4 c000 	ldr.w	ip, [r4]
 8000f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f16:	6833      	ldr	r3, [r6, #0]
 8000f18:	4660      	mov	r0, ip
 8000f1a:	602b      	str	r3, [r5, #0]
 8000f1c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000f20:	f000 fc4a 	bl	80017b8 <USB_DevInit>
 8000f24:	4605      	mov	r5, r0
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d1b6      	bne.n	8000e98 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8000f2a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000f2c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f30:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f32:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f36:	f000 fc59 	bl	80017ec <USB_DevDisconnect>
  return HAL_OK;
 8000f3a:	e7b1      	b.n	8000ea0 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 8000f3c:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8000f40:	f7ff fbcc 	bl	80006dc <HAL_PCD_MspInit>
 8000f44:	e791      	b.n	8000e6a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8000f46:	2501      	movs	r5, #1
}
 8000f48:	4628      	mov	r0, r5
 8000f4a:	b007      	add	sp, #28
 8000f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4e:	bf00      	nop

08000f50 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	f000 8155 	beq.w	8001200 <HAL_RCC_OscConfig+0x2b0>
{
 8000f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5a:	6803      	ldr	r3, [r0, #0]
{
 8000f5c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5e:	07dd      	lsls	r5, r3, #31
 8000f60:	4604      	mov	r4, r0
 8000f62:	d535      	bpl.n	8000fd0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f64:	49a8      	ldr	r1, [pc, #672]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 8000f66:	684a      	ldr	r2, [r1, #4]
 8000f68:	f002 020c 	and.w	r2, r2, #12
 8000f6c:	2a04      	cmp	r2, #4
 8000f6e:	f000 8105 	beq.w	800117c <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f72:	684a      	ldr	r2, [r1, #4]
 8000f74:	f002 020c 	and.w	r2, r2, #12
 8000f78:	2a08      	cmp	r2, #8
 8000f7a:	f000 80fb 	beq.w	8001174 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7e:	6863      	ldr	r3, [r4, #4]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d010      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x58>
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8120 	beq.w	80011cc <HAL_RCC_OscConfig+0x27c>
 8000f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f90:	f000 8178 	beq.w	8001284 <HAL_RCC_OscConfig+0x334>
 8000f94:	4b9c      	ldr	r3, [pc, #624]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e004      	b.n	8000fb2 <HAL_RCC_OscConfig+0x62>
 8000fa8:	4a97      	ldr	r2, [pc, #604]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fc11 	bl	80007d8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4d94      	ldr	r5, [pc, #592]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8000fb8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	e005      	b.n	8000fc8 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fc0c 	bl	80007d8 <HAL_GetTick>
 8000fc0:	1b80      	subs	r0, r0, r6
 8000fc2:	2864      	cmp	r0, #100	; 0x64
 8000fc4:	f200 80f5 	bhi.w	80011b2 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	039a      	lsls	r2, r3, #14
 8000fcc:	d5f6      	bpl.n	8000fbc <HAL_RCC_OscConfig+0x6c>
 8000fce:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd0:	079f      	lsls	r7, r3, #30
 8000fd2:	d44d      	bmi.n	8001070 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd4:	071a      	lsls	r2, r3, #28
 8000fd6:	d522      	bpl.n	800101e <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd8:	69a3      	ldr	r3, [r4, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 80ba 	beq.w	8001154 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4b8a      	ldr	r3, [pc, #552]	; (800120c <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe4:	4d88      	ldr	r5, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8000fe6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fbf6 	bl	80007d8 <HAL_GetTick>
 8000fec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fee:	e005      	b.n	8000ffc <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fbf2 	bl	80007d8 <HAL_GetTick>
 8000ff4:	1b80      	subs	r0, r0, r6
 8000ff6:	2802      	cmp	r0, #2
 8000ff8:	f200 80db 	bhi.w	80011b2 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ffe:	079b      	lsls	r3, r3, #30
 8001000:	d5f6      	bpl.n	8000ff0 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001002:	4b83      	ldr	r3, [pc, #524]	; (8001210 <HAL_RCC_OscConfig+0x2c0>)
 8001004:	4a83      	ldr	r2, [pc, #524]	; (8001214 <HAL_RCC_OscConfig+0x2c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0a5b      	lsrs	r3, r3, #9
 800100e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001010:	bf00      	nop
  }
  while (Delay --);
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f9      	bne.n	8001010 <HAL_RCC_OscConfig+0xc0>
 800101c:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800101e:	075d      	lsls	r5, r3, #29
 8001020:	d569      	bpl.n	80010f6 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001022:	4b79      	ldr	r3, [pc, #484]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 8001024:	69da      	ldr	r2, [r3, #28]
 8001026:	00d0      	lsls	r0, r2, #3
 8001028:	f100 80ec 	bmi.w	8001204 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 800102c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	69da      	ldr	r2, [r3, #28]
 8001030:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001034:	61da      	str	r2, [r3, #28]
 8001036:	69db      	ldr	r3, [r3, #28]
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b75      	ldr	r3, [pc, #468]	; (8001218 <HAL_RCC_OscConfig+0x2c8>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	05d1      	lsls	r1, r2, #23
 8001046:	f140 80a3 	bpl.w	8001190 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104a:	68e3      	ldr	r3, [r4, #12]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d037      	beq.n	80010c0 <HAL_RCC_OscConfig+0x170>
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80e7 	beq.w	8001224 <HAL_RCC_OscConfig+0x2d4>
 8001056:	2b05      	cmp	r3, #5
 8001058:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	f000 811f 	beq.w	800129e <HAL_RCC_OscConfig+0x34e>
 8001060:	f022 0201 	bic.w	r2, r2, #1
 8001064:	621a      	str	r2, [r3, #32]
 8001066:	6a1a      	ldr	r2, [r3, #32]
 8001068:	f022 0204 	bic.w	r2, r2, #4
 800106c:	621a      	str	r2, [r3, #32]
 800106e:	e02c      	b.n	80010ca <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001070:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 8001072:	6851      	ldr	r1, [r2, #4]
 8001074:	f011 0f0c 	tst.w	r1, #12
 8001078:	d061      	beq.n	800113e <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800107a:	6851      	ldr	r1, [r2, #4]
 800107c:	f001 010c 	and.w	r1, r1, #12
 8001080:	2908      	cmp	r1, #8
 8001082:	d059      	beq.n	8001138 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001084:	6923      	ldr	r3, [r4, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80eb 	beq.w	8001262 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 800108c:	2201      	movs	r2, #1
 800108e:	4b63      	ldr	r3, [pc, #396]	; (800121c <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001090:	4d5d      	ldr	r5, [pc, #372]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8001092:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001094:	f7ff fba0 	bl	80007d8 <HAL_GetTick>
 8001098:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109a:	e005      	b.n	80010a8 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fb9c 	bl	80007d8 <HAL_GetTick>
 80010a0:	1b80      	subs	r0, r0, r6
 80010a2:	2802      	cmp	r0, #2
 80010a4:	f200 8085 	bhi.w	80011b2 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	0798      	lsls	r0, r3, #30
 80010ac:	d5f6      	bpl.n	800109c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	682b      	ldr	r3, [r5, #0]
 80010b0:	6962      	ldr	r2, [r4, #20]
 80010b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010ba:	602b      	str	r3, [r5, #0]
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	e789      	b.n	8000fd4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 80010c2:	6a13      	ldr	r3, [r2, #32]
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80010ca:	f7ff fb85 	bl	80007d8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ce:	4e4e      	ldr	r6, [pc, #312]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 80010d0:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d6:	e005      	b.n	80010e4 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d8:	f7ff fb7e 	bl	80007d8 <HAL_GetTick>
 80010dc:	eba0 0008 	sub.w	r0, r0, r8
 80010e0:	42b8      	cmp	r0, r7
 80010e2:	d866      	bhi.n	80011b2 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	6a33      	ldr	r3, [r6, #32]
 80010e6:	079b      	lsls	r3, r3, #30
 80010e8:	d5f6      	bpl.n	80010d8 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 80010ea:	b125      	cbz	r5, 80010f6 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ec:	4a46      	ldr	r2, [pc, #280]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 80010ee:	69d3      	ldr	r3, [r2, #28]
 80010f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f4:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f6:	69e0      	ldr	r0, [r4, #28]
 80010f8:	b1d0      	cbz	r0, 8001130 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fa:	4d43      	ldr	r5, [pc, #268]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 80010fc:	686a      	ldr	r2, [r5, #4]
 80010fe:	f002 020c 	and.w	r2, r2, #12
 8001102:	2a08      	cmp	r2, #8
 8001104:	f000 80d3 	beq.w	80012ae <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001108:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800110a:	f04f 0100 	mov.w	r1, #0
 800110e:	4a44      	ldr	r2, [pc, #272]	; (8001220 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001110:	f000 80de 	beq.w	80012d0 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8001114:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001116:	f7ff fb5f 	bl	80007d8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800111c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111e:	e004      	b.n	800112a <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001120:	f7ff fb5a 	bl	80007d8 <HAL_GetTick>
 8001124:	1b40      	subs	r0, r0, r5
 8001126:	2802      	cmp	r0, #2
 8001128:	d843      	bhi.n	80011b2 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	d4f7      	bmi.n	8001120 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8001130:	2000      	movs	r0, #0
}
 8001132:	b002      	add	sp, #8
 8001134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001138:	6852      	ldr	r2, [r2, #4]
 800113a:	03d6      	lsls	r6, r2, #15
 800113c:	d4a2      	bmi.n	8001084 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	0795      	lsls	r5, r2, #30
 8001144:	d539      	bpl.n	80011ba <HAL_RCC_OscConfig+0x26a>
 8001146:	6922      	ldr	r2, [r4, #16]
 8001148:	2a01      	cmp	r2, #1
 800114a:	d036      	beq.n	80011ba <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 800114c:	2001      	movs	r0, #1
}
 800114e:	b002      	add	sp, #8
 8001150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001154:	4a2d      	ldr	r2, [pc, #180]	; (800120c <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001156:	4d2c      	ldr	r5, [pc, #176]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8001158:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800115a:	f7ff fb3d 	bl	80007d8 <HAL_GetTick>
 800115e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	e004      	b.n	800116c <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fb39 	bl	80007d8 <HAL_GetTick>
 8001166:	1b80      	subs	r0, r0, r6
 8001168:	2802      	cmp	r0, #2
 800116a:	d822      	bhi.n	80011b2 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800116e:	079f      	lsls	r7, r3, #30
 8001170:	d4f7      	bmi.n	8001162 <HAL_RCC_OscConfig+0x212>
 8001172:	e753      	b.n	800101c <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001174:	684a      	ldr	r2, [r1, #4]
 8001176:	03d0      	lsls	r0, r2, #15
 8001178:	f57f af01 	bpl.w	8000f7e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	0391      	lsls	r1, r2, #14
 8001182:	f57f af25 	bpl.w	8000fd0 <HAL_RCC_OscConfig+0x80>
 8001186:	6862      	ldr	r2, [r4, #4]
 8001188:	2a00      	cmp	r2, #0
 800118a:	f47f af21 	bne.w	8000fd0 <HAL_RCC_OscConfig+0x80>
 800118e:	e7dd      	b.n	800114c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001190:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001192:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001198:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800119a:	f7ff fb1d 	bl	80007d8 <HAL_GetTick>
 800119e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a0:	6833      	ldr	r3, [r6, #0]
 80011a2:	05da      	lsls	r2, r3, #23
 80011a4:	f53f af51 	bmi.w	800104a <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a8:	f7ff fb16 	bl	80007d8 <HAL_GetTick>
 80011ac:	1bc0      	subs	r0, r0, r7
 80011ae:	2864      	cmp	r0, #100	; 0x64
 80011b0:	d9f6      	bls.n	80011a0 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 80011b2:	2003      	movs	r0, #3
}
 80011b4:	b002      	add	sp, #8
 80011b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4913      	ldr	r1, [pc, #76]	; (8001208 <HAL_RCC_OscConfig+0x2b8>)
 80011bc:	6960      	ldr	r0, [r4, #20]
 80011be:	680a      	ldr	r2, [r1, #0]
 80011c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011c4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80011c8:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e703      	b.n	8000fd4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011d0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011d4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011e6:	f7ff faf7 	bl	80007d8 <HAL_GetTick>
 80011ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ec:	e004      	b.n	80011f8 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ee:	f7ff faf3 	bl	80007d8 <HAL_GetTick>
 80011f2:	1b80      	subs	r0, r0, r6
 80011f4:	2864      	cmp	r0, #100	; 0x64
 80011f6:	d8dc      	bhi.n	80011b2 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	039b      	lsls	r3, r3, #14
 80011fc:	d4f7      	bmi.n	80011ee <HAL_RCC_OscConfig+0x29e>
 80011fe:	e6e6      	b.n	8000fce <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8001200:	2001      	movs	r0, #1
}
 8001202:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8001204:	2500      	movs	r5, #0
 8001206:	e71b      	b.n	8001040 <HAL_RCC_OscConfig+0xf0>
 8001208:	40021000 	.word	0x40021000
 800120c:	42420480 	.word	0x42420480
 8001210:	20000000 	.word	0x20000000
 8001214:	10624dd3 	.word	0x10624dd3
 8001218:	40007000 	.word	0x40007000
 800121c:	42420000 	.word	0x42420000
 8001220:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001228:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800122c:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122e:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	621a      	str	r2, [r3, #32]
 8001236:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001238:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123c:	f022 0204 	bic.w	r2, r2, #4
 8001240:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8001242:	f7ff fac9 	bl	80007d8 <HAL_GetTick>
 8001246:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	e004      	b.n	8001254 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fac5 	bl	80007d8 <HAL_GetTick>
 800124e:	1bc0      	subs	r0, r0, r7
 8001250:	4540      	cmp	r0, r8
 8001252:	d8ae      	bhi.n	80011b2 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	6a33      	ldr	r3, [r6, #32]
 8001256:	0798      	lsls	r0, r3, #30
 8001258:	d4f7      	bmi.n	800124a <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 800125a:	2d00      	cmp	r5, #0
 800125c:	f43f af4b 	beq.w	80010f6 <HAL_RCC_OscConfig+0x1a6>
 8001260:	e744      	b.n	80010ec <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8001262:	4a34      	ldr	r2, [pc, #208]	; (8001334 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001264:	4d34      	ldr	r5, [pc, #208]	; (8001338 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8001266:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001268:	f7ff fab6 	bl	80007d8 <HAL_GetTick>
 800126c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	e004      	b.n	800127a <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fab2 	bl	80007d8 <HAL_GetTick>
 8001274:	1b80      	subs	r0, r0, r6
 8001276:	2802      	cmp	r0, #2
 8001278:	d89b      	bhi.n	80011b2 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	0799      	lsls	r1, r3, #30
 800127e:	d4f7      	bmi.n	8001270 <HAL_RCC_OscConfig+0x320>
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	e6a7      	b.n	8000fd4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001288:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e689      	b.n	8000fb2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129e:	f042 0204 	orr.w	r2, r2, #4
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	6a1a      	ldr	r2, [r3, #32]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	621a      	str	r2, [r3, #32]
 80012ac:	e70d      	b.n	80010ca <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ae:	2801      	cmp	r0, #1
 80012b0:	f43f af4d 	beq.w	800114e <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 80012b4:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b6:	6a22      	ldr	r2, [r4, #32]
 80012b8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80012bc:	4291      	cmp	r1, r2
 80012be:	f47f af45 	bne.w	800114c <HAL_RCC_OscConfig+0x1fc>
 80012c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 80012c8:	1a18      	subs	r0, r3, r0
 80012ca:	bf18      	it	ne
 80012cc:	2001      	movne	r0, #1
 80012ce:	e73e      	b.n	800114e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 80012d0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa81 	bl	80007d8 <HAL_GetTick>
 80012d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d8:	e005      	b.n	80012e6 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fa7d 	bl	80007d8 <HAL_GetTick>
 80012de:	1b80      	subs	r0, r0, r6
 80012e0:	2802      	cmp	r0, #2
 80012e2:	f63f af66 	bhi.w	80011b2 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e6:	682b      	ldr	r3, [r5, #0]
 80012e8:	0199      	lsls	r1, r3, #6
 80012ea:	d4f6      	bmi.n	80012da <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012ec:	6a22      	ldr	r2, [r4, #32]
 80012ee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012f4:	686b      	ldr	r3, [r5, #4]
 80012f6:	68a1      	ldr	r1, [r4, #8]
 80012f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012fc:	430b      	orrs	r3, r1
 80012fe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001300:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_RCC_OscConfig+0x3e8>)
 8001304:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001306:	6859      	ldr	r1, [r3, #4]
 8001308:	4302      	orrs	r2, r0
 800130a:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001310:	430a      	orrs	r2, r1
 8001312:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001314:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001316:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8001318:	f7ff fa5e 	bl	80007d8 <HAL_GetTick>
 800131c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800131e:	e005      	b.n	800132c <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fa5a 	bl	80007d8 <HAL_GetTick>
 8001324:	1b40      	subs	r0, r0, r5
 8001326:	2802      	cmp	r0, #2
 8001328:	f63f af43 	bhi.w	80011b2 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	019a      	lsls	r2, r3, #6
 8001330:	d5f6      	bpl.n	8001320 <HAL_RCC_OscConfig+0x3d0>
 8001332:	e6fd      	b.n	8001130 <HAL_RCC_OscConfig+0x1e0>
 8001334:	42420000 	.word	0x42420000
 8001338:	40021000 	.word	0x40021000
 800133c:	42420060 	.word	0x42420060

08001340 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001340:	f240 2201 	movw	r2, #513	; 0x201
{
 8001344:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001348:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800134c:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001352:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8001356:	4912      	ldr	r1, [pc, #72]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x60>)
 8001358:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800135a:	f003 020c 	and.w	r2, r3, #12
 800135e:	2a08      	cmp	r2, #8
 8001360:	d002      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001362:	4810      	ldr	r0, [pc, #64]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001364:	b006      	add	sp, #24
 8001366:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001368:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800136c:	4462      	add	r2, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800136e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001370:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001374:	d404      	bmi.n	8001380 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001376:	480c      	ldr	r0, [pc, #48]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x68>)
 8001378:	fb00 f002 	mul.w	r0, r0, r2
}
 800137c:	b006      	add	sp, #24
 800137e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001380:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001384:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001388:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800138c:	4463      	add	r3, ip
 800138e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001392:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001396:	b006      	add	sp, #24
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	08001850 	.word	0x08001850
 80013a0:	40021000 	.word	0x40021000
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	003d0900 	.word	0x003d0900

080013ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80013ac:	b178      	cbz	r0, 80013ce <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013ae:	4a4a      	ldr	r2, [pc, #296]	; (80014d8 <HAL_RCC_ClockConfig+0x12c>)
 80013b0:	6813      	ldr	r3, [r2, #0]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	428b      	cmp	r3, r1
 80013b8:	d20b      	bcs.n	80013d2 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ba:	6813      	ldr	r3, [r2, #0]
 80013bc:	f023 0307 	bic.w	r3, r3, #7
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	428b      	cmp	r3, r1
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
}
 80013d0:	4770      	bx	lr
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d2:	6803      	ldr	r3, [r0, #0]
{
 80013d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d8:	079d      	lsls	r5, r3, #30
 80013da:	d514      	bpl.n	8001406 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	075c      	lsls	r4, r3, #29
 80013de:	d504      	bpl.n	80013ea <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e0:	4c3e      	ldr	r4, [pc, #248]	; (80014dc <HAL_RCC_ClockConfig+0x130>)
 80013e2:	6862      	ldr	r2, [r4, #4]
 80013e4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80013e8:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ea:	071a      	lsls	r2, r3, #28
 80013ec:	d504      	bpl.n	80013f8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ee:	4c3b      	ldr	r4, [pc, #236]	; (80014dc <HAL_RCC_ClockConfig+0x130>)
 80013f0:	6862      	ldr	r2, [r4, #4]
 80013f2:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80013f6:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f8:	4c38      	ldr	r4, [pc, #224]	; (80014dc <HAL_RCC_ClockConfig+0x130>)
 80013fa:	6885      	ldr	r5, [r0, #8]
 80013fc:	6862      	ldr	r2, [r4, #4]
 80013fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001402:	432a      	orrs	r2, r5
 8001404:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	07df      	lsls	r7, r3, #31
 8001408:	4604      	mov	r4, r0
 800140a:	460d      	mov	r5, r1
 800140c:	d520      	bpl.n	8001450 <HAL_RCC_ClockConfig+0xa4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140e:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001412:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001414:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	d056      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x11a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001418:	2a02      	cmp	r2, #2
 800141a:	d059      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x124>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	0799      	lsls	r1, r3, #30
 800141e:	d527      	bpl.n	8001470 <HAL_RCC_ClockConfig+0xc4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001420:	4e2e      	ldr	r6, [pc, #184]	; (80014dc <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001422:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001426:	6873      	ldr	r3, [r6, #4]
 8001428:	f023 0303 	bic.w	r3, r3, #3
 800142c:	4313      	orrs	r3, r2
 800142e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001430:	f7ff f9d2 	bl	80007d8 <HAL_GetTick>
 8001434:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	e004      	b.n	8001442 <HAL_RCC_ClockConfig+0x96>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001438:	f7ff f9ce 	bl	80007d8 <HAL_GetTick>
 800143c:	1bc0      	subs	r0, r0, r7
 800143e:	4540      	cmp	r0, r8
 8001440:	d844      	bhi.n	80014cc <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	6873      	ldr	r3, [r6, #4]
 8001444:	6862      	ldr	r2, [r4, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800144e:	d1f3      	bne.n	8001438 <HAL_RCC_ClockConfig+0x8c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <HAL_RCC_ClockConfig+0x12c>)
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	42ab      	cmp	r3, r5
 800145a:	d90c      	bls.n	8001476 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145c:	6813      	ldr	r3, [r2, #0]
 800145e:	f023 0307 	bic.w	r3, r3, #7
 8001462:	432b      	orrs	r3, r5
 8001464:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	42ab      	cmp	r3, r5
 800146e:	d002      	beq.n	8001476 <HAL_RCC_ClockConfig+0xca>
    return HAL_ERROR;
 8001470:	2001      	movs	r0, #1
}
 8001472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	075a      	lsls	r2, r3, #29
 800147a:	d506      	bpl.n	800148a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800147c:	4917      	ldr	r1, [pc, #92]	; (80014dc <HAL_RCC_ClockConfig+0x130>)
 800147e:	68e0      	ldr	r0, [r4, #12]
 8001480:	684a      	ldr	r2, [r1, #4]
 8001482:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001486:	4302      	orrs	r2, r0
 8001488:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148a:	071b      	lsls	r3, r3, #28
 800148c:	d412      	bmi.n	80014b4 <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800148e:	f7ff ff57 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_ClockConfig+0x130>)
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_RCC_ClockConfig+0x134>)
 8001496:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 8001498:	4912      	ldr	r1, [pc, #72]	; (80014e4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800149a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_RCC_ClockConfig+0x13c>)
 80014a2:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 80014a6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80014aa:	f7ff f953 	bl	8000754 <HAL_InitTick>
  return HAL_OK;
 80014ae:	2000      	movs	r0, #0
}
 80014b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014b4:	4a09      	ldr	r2, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x130>)
 80014b6:	6921      	ldr	r1, [r4, #16]
 80014b8:	6853      	ldr	r3, [r2, #4]
 80014ba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014c2:	6053      	str	r3, [r2, #4]
 80014c4:	e7e3      	b.n	800148e <HAL_RCC_ClockConfig+0xe2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	039e      	lsls	r6, r3, #14
 80014c8:	d4aa      	bmi.n	8001420 <HAL_RCC_ClockConfig+0x74>
 80014ca:	e7d1      	b.n	8001470 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 80014cc:	2003      	movs	r0, #3
 80014ce:	e7ef      	b.n	80014b0 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d0:	0198      	lsls	r0, r3, #6
 80014d2:	d4a5      	bmi.n	8001420 <HAL_RCC_ClockConfig+0x74>
 80014d4:	e7cc      	b.n	8001470 <HAL_RCC_ClockConfig+0xc4>
 80014d6:	bf00      	nop
 80014d8:	40022000 	.word	0x40022000
 80014dc:	40021000 	.word	0x40021000
 80014e0:	08001860 	.word	0x08001860
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000000 	.word	0x20000000

080014ec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_RCC_GetPCLK1Freq+0x14>)
 80014ee:	4905      	ldr	r1, [pc, #20]	; (8001504 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014f0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80014f8:	5ccb      	ldrb	r3, [r1, r3]
 80014fa:	6810      	ldr	r0, [r2, #0]
}
 80014fc:	40d8      	lsrs	r0, r3
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000
 8001504:	08001870 	.word	0x08001870
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <HAL_RCC_GetPCLK2Freq+0x14>)
 800150e:	4905      	ldr	r1, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001510:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001514:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	6810      	ldr	r0, [r2, #0]
}
 800151c:	40d8      	lsrs	r0, r3
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000
 8001524:	08001870 	.word	0x08001870
 8001528:	20000000 	.word	0x20000000

0800152c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800152c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001530:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001532:	6800      	ldr	r0, [r0, #0]
{
 8001534:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001536:	07c5      	lsls	r5, r0, #31
 8001538:	d52a      	bpl.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800153c:	69da      	ldr	r2, [r3, #28]
 800153e:	00d1      	lsls	r1, r2, #3
 8001540:	d53d      	bpl.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 8001544:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	05d2      	lsls	r2, r2, #23
 800154a:	d546      	bpl.n	80015da <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800154e:	6860      	ldr	r0, [r4, #4]
 8001550:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001552:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001556:	d00f      	beq.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001558:	f400 7340 	and.w	r3, r0, #768	; 0x300
 800155c:	4293      	cmp	r3, r2
 800155e:	d00b      	beq.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001560:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001562:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001564:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001566:	4a31      	ldr	r2, [pc, #196]	; (800162c <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001568:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800156c:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800156e:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001570:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001572:	07d8      	lsls	r0, r3, #31
 8001574:	d445      	bmi.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001576:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001578:	4a2a      	ldr	r2, [pc, #168]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800157a:	6a13      	ldr	r3, [r2, #32]
 800157c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001580:	4303      	orrs	r3, r0
 8001582:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001584:	b11d      	cbz	r5, 800158e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001586:	69d3      	ldr	r3, [r2, #28]
 8001588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001590:	0783      	lsls	r3, r0, #30
 8001592:	d506      	bpl.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001594:	4a23      	ldr	r2, [pc, #140]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001596:	68a1      	ldr	r1, [r4, #8]
 8001598:	6853      	ldr	r3, [r2, #4]
 800159a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800159e:	430b      	orrs	r3, r1
 80015a0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015a2:	f010 0010 	ands.w	r0, r0, #16
 80015a6:	d007      	beq.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80015a8:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80015ac:	68e1      	ldr	r1, [r4, #12]
 80015ae:	6853      	ldr	r3, [r2, #4]
 80015b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6053      	str	r3, [r2, #4]
}
 80015b8:	b002      	add	sp, #8
 80015ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80015c0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015c6:	61da      	str	r2, [r3, #28]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	05d2      	lsls	r2, r2, #23
 80015d8:	d4b8      	bmi.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015e4:	f7ff f8f8 	bl	80007d8 <HAL_GetTick>
 80015e8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	6833      	ldr	r3, [r6, #0]
 80015ec:	05db      	lsls	r3, r3, #23
 80015ee:	d4ad      	bmi.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f0:	f7ff f8f2 	bl	80007d8 <HAL_GetTick>
 80015f4:	1bc0      	subs	r0, r0, r7
 80015f6:	2864      	cmp	r0, #100	; 0x64
 80015f8:	d9f7      	bls.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 80015fa:	2003      	movs	r0, #3
}
 80015fc:	b002      	add	sp, #8
 80015fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 8001604:	f7ff f8e8 	bl	80007d8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800160c:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	6a33      	ldr	r3, [r6, #32]
 8001610:	079a      	lsls	r2, r3, #30
 8001612:	d4b0      	bmi.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff f8e0 	bl	80007d8 <HAL_GetTick>
 8001618:	eba0 0008 	sub.w	r0, r0, r8
 800161c:	42b8      	cmp	r0, r7
 800161e:	d9f6      	bls.n	800160e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001620:	e7eb      	b.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	42420440 	.word	0x42420440

08001630 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001630:	2800      	cmp	r0, #0
 8001632:	d03b      	beq.n	80016ac <HAL_SPI_Init+0x7c>
{
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001636:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001638:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 800163c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001640:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001644:	b361      	cbz	r1, 80016a0 <HAL_SPI_Init+0x70>
 8001646:	461a      	mov	r2, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001648:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800164c:	2702      	movs	r7, #2
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800164e:	2100      	movs	r1, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001650:	2501      	movs	r5, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001652:	68e0      	ldr	r0, [r4, #12]
 8001654:	4333      	orrs	r3, r6
 8001656:	6926      	ldr	r6, [r4, #16]
 8001658:	4303      	orrs	r3, r0
 800165a:	6960      	ldr	r0, [r4, #20]
 800165c:	4333      	orrs	r3, r6
 800165e:	69e6      	ldr	r6, [r4, #28]
 8001660:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8001664:	4303      	orrs	r3, r0
 8001666:	6a20      	ldr	r0, [r4, #32]
 8001668:	4333      	orrs	r3, r6
  __HAL_SPI_DISABLE(hspi);
 800166a:	6826      	ldr	r6, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800166c:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001670:	4303      	orrs	r3, r0
 8001672:	f40c 7000 	and.w	r0, ip, #512	; 0x200
 8001676:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8001678:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800167a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800167e:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8001680:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001684:	f00c 0204 	and.w	r2, ip, #4
  __HAL_SPI_DISABLE(hspi);
 8001688:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800168a:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800168c:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800168e:	69f3      	ldr	r3, [r6, #28]

  return HAL_OK;
 8001690:	4608      	mov	r0, r1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001696:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001698:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800169a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 800169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 80016a0:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80016a4:	f7fe fed4 	bl	8000450 <HAL_SPI_MspInit>
 80016a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016aa:	e7cd      	b.n	8001648 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
}
 80016ae:	4770      	bx	lr

080016b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016b4:	6803      	ldr	r3, [r0, #0]
 80016b6:	68c0      	ldr	r0, [r0, #12]
 80016b8:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ba:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016bc:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80016c0:	4301      	orrs	r1, r0
 80016c2:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80016c4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016c6:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80016ca:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ce:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80016d0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80016d6:	430a      	orrs	r2, r1
 80016d8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80016de:	4912      	ldr	r1, [pc, #72]	; (8001728 <UART_SetConfig+0x78>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016e4:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 80016e6:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016e8:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80016ea:	d01a      	beq.n	8001722 <UART_SetConfig+0x72>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016ec:	f7ff fefe 	bl	80014ec <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001700:	2364      	movs	r3, #100	; 0x64
 8001702:	490a      	ldr	r1, [pc, #40]	; (800172c <UART_SetConfig+0x7c>)
 8001704:	6824      	ldr	r4, [r4, #0]
 8001706:	fba1 5200 	umull	r5, r2, r1, r0
 800170a:	0952      	lsrs	r2, r2, #5
 800170c:	fb03 0312 	mls	r3, r3, r2, r0
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	3332      	adds	r3, #50	; 0x32
 8001714:	fba1 1303 	umull	r1, r3, r1, r3
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800171e:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8001720:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001722:	f7ff fef3 	bl	800150c <HAL_RCC_GetPCLK2Freq>
 8001726:	e7e3      	b.n	80016f0 <UART_SetConfig+0x40>
 8001728:	40013800 	.word	0x40013800
 800172c:	51eb851f 	.word	0x51eb851f

08001730 <HAL_UART_Init>:
  if (huart == NULL)
 8001730:	b360      	cbz	r0, 800178c <HAL_UART_Init+0x5c>
{
 8001732:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001734:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001738:	4604      	mov	r4, r0
 800173a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800173e:	b303      	cbz	r3, 8001782 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001740:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001742:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001744:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001748:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800174a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800174c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001750:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001752:	f7ff ffad 	bl	80016b0 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001756:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8001758:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800175a:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800175c:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800176c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001774:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001776:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001778:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800177c:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8001780:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8001782:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001786:	f7fe ff31 	bl	80005ec <HAL_UART_MspInit>
 800178a:	e7d9      	b.n	8001740 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
}
 800178e:	4770      	bx	lr

08001790 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001790:	b084      	sub	sp, #16
 8001792:	a801      	add	r0, sp, #4
 8001794:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001798:	b004      	add	sp, #16
 800179a:	2000      	movs	r0, #0
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80017a0:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 80017a4:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 80017a6:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 80017aa:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 80017ac:	400b      	ands	r3, r1
 80017ae:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 80017b2:	4770      	bx	lr

080017b4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80017b4:	2000      	movs	r0, #0
 80017b6:	4770      	bx	lr

080017b8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80017b8:	b084      	sub	sp, #16
 80017ba:	b470      	push	{r4, r5, r6}
 80017bc:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80017be:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80017c0:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 80017c2:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 80017c6:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80017ca:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80017ce:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80017d2:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 80017d6:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 80017d8:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 80017dc:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 80017e0:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80017e4:	bc70      	pop	{r4, r5, r6}
 80017e6:	b004      	add	sp, #16
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <USB_DevDisconnect>:
 80017ec:	2000      	movs	r0, #0
 80017ee:	4770      	bx	lr

080017f0 <__libc_init_array>:
 80017f0:	b570      	push	{r4, r5, r6, lr}
 80017f2:	2500      	movs	r5, #0
 80017f4:	4e0c      	ldr	r6, [pc, #48]	; (8001828 <__libc_init_array+0x38>)
 80017f6:	4c0d      	ldr	r4, [pc, #52]	; (800182c <__libc_init_array+0x3c>)
 80017f8:	1ba4      	subs	r4, r4, r6
 80017fa:	10a4      	asrs	r4, r4, #2
 80017fc:	42a5      	cmp	r5, r4
 80017fe:	d109      	bne.n	8001814 <__libc_init_array+0x24>
 8001800:	f000 f81a 	bl	8001838 <_init>
 8001804:	2500      	movs	r5, #0
 8001806:	4e0a      	ldr	r6, [pc, #40]	; (8001830 <__libc_init_array+0x40>)
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <__libc_init_array+0x44>)
 800180a:	1ba4      	subs	r4, r4, r6
 800180c:	10a4      	asrs	r4, r4, #2
 800180e:	42a5      	cmp	r5, r4
 8001810:	d105      	bne.n	800181e <__libc_init_array+0x2e>
 8001812:	bd70      	pop	{r4, r5, r6, pc}
 8001814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001818:	4798      	blx	r3
 800181a:	3501      	adds	r5, #1
 800181c:	e7ee      	b.n	80017fc <__libc_init_array+0xc>
 800181e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001822:	4798      	blx	r3
 8001824:	3501      	adds	r5, #1
 8001826:	e7f2      	b.n	800180e <__libc_init_array+0x1e>
 8001828:	08001878 	.word	0x08001878
 800182c:	08001878 	.word	0x08001878
 8001830:	08001878 	.word	0x08001878
 8001834:	0800187c 	.word	0x0800187c

08001838 <_init>:
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183a:	bf00      	nop
 800183c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183e:	bc08      	pop	{r3}
 8001840:	469e      	mov	lr, r3
 8001842:	4770      	bx	lr

08001844 <_fini>:
 8001844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001846:	bf00      	nop
 8001848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184a:	bc08      	pop	{r3}
 800184c:	469e      	mov	lr, r3
 800184e:	4770      	bx	lr
