
HMI_Core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000599c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b84  08005b84  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005b84  08005b84  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b84  08005b84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000070  08005bfc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08005bfc  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfbe  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000426f  00000000  00000000  0003c057  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012d04  00000000  00000000  000402c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001000  00000000  00000000  00052fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fb8  00000000  00000000  00053fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00017b80  00000000  00000000  00055f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001287f  00000000  00000000  0006db08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007d31c  00000000  00000000  00080387  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000fd6a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bbc  00000000  00000000  000fd720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a94 	.word	0x08005a94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005a94 	.word	0x08005a94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093e:	4605      	mov	r5, r0
 8000940:	460f      	mov	r7, r1
 8000942:	2400      	movs	r4, #0
 8000944:	1e56      	subs	r6, r2, #1
 8000946:	b2f6      	uxtb	r6, r6
 8000948:	3601      	adds	r6, #1
    for(uint8_t i = 0; i < len; i++)
    {
        HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800094a:	fa47 f204 	asr.w	r2, r7, r4
 800094e:	e9d5 3100 	ldrd	r3, r1, [r5]
 8000952:	f002 0201 	and.w	r2, r2, #1
 8000956:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 800095a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800095e:	3401      	adds	r4, #1
 8000960:	f003 fc8a 	bl	8004278 <HAL_GPIO_WritePin>
    for(uint8_t i = 0; i < len; i++)
 8000964:	42a6      	cmp	r6, r4
 8000966:	d1f0      	bne.n	800094a <lcd_write+0xe>
    }

    HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000968:	8aa9      	ldrh	r1, [r5, #20]
 800096a:	2201      	movs	r2, #1
 800096c:	6928      	ldr	r0, [r5, #16]
 800096e:	f003 fc83 	bl	8004278 <HAL_GPIO_WritePin>
    DELAY(1);
 8000972:	2001      	movs	r0, #1
 8000974:	f002 fea2 	bl	80036bc <HAL_Delay>
    HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0);        // Data receive on falling edge
 8000978:	8aa9      	ldrh	r1, [r5, #20]
 800097a:	6928      	ldr	r0, [r5, #16]
 800097c:	2200      	movs	r2, #0
}
 800097e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0);        // Data receive on falling edge
 8000982:	f003 bc79 	b.w	8004278 <HAL_GPIO_WritePin>
 8000986:	bf00      	nop

08000988 <lcd_write_command>:
{
 8000988:	b538      	push	{r3, r4, r5, lr}
 800098a:	4604      	mov	r4, r0
 800098c:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);      // Write to command register
 800098e:	6880      	ldr	r0, [r0, #8]
 8000990:	89a1      	ldrh	r1, [r4, #12]
 8000992:	2200      	movs	r2, #0
 8000994:	f003 fc70 	bl	8004278 <HAL_GPIO_WritePin>
    if(lcd->mode == LCD_4_BIT_MODE)
 8000998:	7da3      	ldrb	r3, [r4, #22]
 800099a:	b133      	cbz	r3, 80009aa <lcd_write_command+0x22>
        lcd_write(lcd, command, LCD_BYTE);
 800099c:	4629      	mov	r1, r5
 800099e:	4620      	mov	r0, r4
}
 80009a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lcd_write(lcd, command, LCD_BYTE);
 80009a4:	2208      	movs	r2, #8
 80009a6:	f7ff bfc9 	b.w	800093c <lcd_write>
        lcd_write(lcd, (command >> 4), LCD_NIB);
 80009aa:	2204      	movs	r2, #4
 80009ac:	4620      	mov	r0, r4
 80009ae:	fa25 f102 	lsr.w	r1, r5, r2
 80009b2:	f7ff ffc3 	bl	800093c <lcd_write>
        lcd_write(lcd, command & 0x0F, LCD_NIB);
 80009b6:	f005 010f 	and.w	r1, r5, #15
 80009ba:	4620      	mov	r0, r4
}
 80009bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lcd_write(lcd, command & 0x0F, LCD_NIB);
 80009c0:	2204      	movs	r2, #4
 80009c2:	f7ff bfbb 	b.w	800093c <lcd_write>
 80009c6:	bf00      	nop

080009c8 <Lcd_init>:
    if(lcd->mode == LCD_4_BIT_MODE)
 80009c8:	7d83      	ldrb	r3, [r0, #22]
{
 80009ca:	b510      	push	{r4, lr}
 80009cc:	4604      	mov	r4, r0
    if(lcd->mode == LCD_4_BIT_MODE)
 80009ce:	b183      	cbz	r3, 80009f2 <Lcd_init+0x2a>
        lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80009d0:	2138      	movs	r1, #56	; 0x38
 80009d2:	f7ff ffd9 	bl	8000988 <lcd_write_command>
    lcd_write_command(lcd, CLEAR_DISPLAY);                      // Clear screen
 80009d6:	4620      	mov	r0, r4
 80009d8:	2101      	movs	r1, #1
 80009da:	f7ff ffd5 	bl	8000988 <lcd_write_command>
    lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);     // Lcd-on, cursor-off, no-blink
 80009de:	4620      	mov	r0, r4
 80009e0:	210c      	movs	r1, #12
 80009e2:	f7ff ffd1 	bl	8000988 <lcd_write_command>
    lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);           // Increment cursor
 80009e6:	4620      	mov	r0, r4
}
 80009e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);           // Increment cursor
 80009ec:	2106      	movs	r1, #6
 80009ee:	f7ff bfcb 	b.w	8000988 <lcd_write_command>
            lcd_write_command(lcd, 0x33);
 80009f2:	2133      	movs	r1, #51	; 0x33
 80009f4:	f7ff ffc8 	bl	8000988 <lcd_write_command>
            lcd_write_command(lcd, 0x32);
 80009f8:	4620      	mov	r0, r4
 80009fa:	2132      	movs	r1, #50	; 0x32
 80009fc:	f7ff ffc4 	bl	8000988 <lcd_write_command>
            lcd_write_command(lcd, FUNCTION_SET | OPT_N);               // 4-bit mode
 8000a00:	2128      	movs	r1, #40	; 0x28
 8000a02:	4620      	mov	r0, r4
 8000a04:	f7ff ffc0 	bl	8000988 <lcd_write_command>
 8000a08:	e7e5      	b.n	80009d6 <Lcd_init+0xe>
 8000a0a:	bf00      	nop

08000a0c <Lcd_create>:
{
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	4606      	mov	r6, r0
 8000a10:	b087      	sub	sp, #28
 8000a12:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    lcd.data_port = port;
 8000a16:	ac06      	add	r4, sp, #24
    lcd.en_pin = en_pin;
 8000a18:	f8ad 5014 	strh.w	r5, [sp, #20]
    return lcd;
 8000a1c:	4635      	mov	r5, r6
    lcd.data_port = port;
 8000a1e:	f844 1d18 	str.w	r1, [r4, #-24]!
{
 8000a22:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
 8000a26:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8000a2a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    Lcd_init(&lcd);
 8000a2c:	4620      	mov	r0, r4
    lcd.rs_port = rs_port;
 8000a2e:	9302      	str	r3, [sp, #8]
    lcd.data_pin = pin;
 8000a30:	9201      	str	r2, [sp, #4]
    lcd.mode = mode;
 8000a32:	f88d 1016 	strb.w	r1, [sp, #22]
    lcd.rs_pin = rs_pin;
 8000a36:	f8ad c00c 	strh.w	ip, [sp, #12]
    lcd.en_port = en_port;
 8000a3a:	9704      	str	r7, [sp, #16]
    Lcd_init(&lcd);
 8000a3c:	f7ff ffc4 	bl	80009c8 <Lcd_init>
    return lcd;
 8000a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a48:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	b007      	add	sp, #28
 8000a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a52:	bf00      	nop

08000a54 <Lcd_string>:
{
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	4604      	mov	r4, r0
 8000a58:	460f      	mov	r7, r1
    for(uint8_t i = 0; i < strlen(string); i++)
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	e005      	b.n	8000a6a <Lcd_string+0x16>
        lcd_write(lcd, data, LCD_BYTE);
 8000a5e:	4631      	mov	r1, r6
 8000a60:	2208      	movs	r2, #8
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff ff6a 	bl	800093c <lcd_write>
 8000a68:	3501      	adds	r5, #1
    for(uint8_t i = 0; i < strlen(string); i++)
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	f7ff fb70 	bl	8000150 <strlen>
 8000a70:	b2ee      	uxtb	r6, r5
 8000a72:	42b0      	cmp	r0, r6
 8000a74:	d914      	bls.n	8000aa0 <Lcd_string+0x4c>
    HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);         // Write to data register
 8000a76:	89a1      	ldrh	r1, [r4, #12]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	68a0      	ldr	r0, [r4, #8]
        lcd_write_data(lcd, string[i]);
 8000a7c:	5dbe      	ldrb	r6, [r7, r6]
    HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);         // Write to data register
 8000a7e:	f003 fbfb 	bl	8004278 <HAL_GPIO_WritePin>
    if(lcd->mode == LCD_4_BIT_MODE)
 8000a82:	7da3      	ldrb	r3, [r4, #22]
        lcd_write(lcd, data >> 4, LCD_NIB);
 8000a84:	0931      	lsrs	r1, r6, #4
    if(lcd->mode == LCD_4_BIT_MODE)
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1e9      	bne.n	8000a5e <Lcd_string+0xa>
        lcd_write(lcd, data >> 4, LCD_NIB);
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	f7ff ff55 	bl	800093c <lcd_write>
        lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000a92:	f006 010f 	and.w	r1, r6, #15
 8000a96:	2204      	movs	r2, #4
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f7ff ff4f 	bl	800093c <lcd_write>
 8000a9e:	e7e3      	b.n	8000a68 <Lcd_string+0x14>
}
 8000aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa2:	bf00      	nop

08000aa4 <Lcd_int>:
{
 8000aa4:	b510      	push	{r4, lr}
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	b084      	sub	sp, #16
    sprintf(buffer, "%d", number);
 8000aaa:	460a      	mov	r2, r1
 8000aac:	a801      	add	r0, sp, #4
 8000aae:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <Lcd_int+0x1c>)
 8000ab0:	f004 fbde 	bl	8005270 <siprintf>
    Lcd_string(lcd, buffer);
 8000ab4:	a901      	add	r1, sp, #4
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	f7ff ffcc 	bl	8000a54 <Lcd_string>
}
 8000abc:	b004      	add	sp, #16
 8000abe:	bd10      	pop	{r4, pc}
 8000ac0:	08005ae4 	.word	0x08005ae4

08000ac4 <Lcd_cursor>:
    lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <Lcd_cursor+0x10>)
 8000ac6:	3a80      	subs	r2, #128	; 0x80
 8000ac8:	5c59      	ldrb	r1, [r3, r1]
 8000aca:	4411      	add	r1, r2
 8000acc:	b2c9      	uxtb	r1, r1
 8000ace:	f7ff bf5b 	b.w	8000988 <lcd_write_command>
 8000ad2:	bf00      	nop
 8000ad4:	08005ae8 	.word	0x08005ae8

08000ad8 <Lcd_clear>:
    lcd_write_command(lcd, CLEAR_DISPLAY);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	f7ff bf55 	b.w	8000988 <lcd_write_command>
 8000ade:	bf00      	nop

08000ae0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae0:	2200      	movs	r2, #0

  /** Common config 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ae2:	f44f 7080 	mov.w	r0, #256	; 0x100
{
 8000ae6:	b510      	push	{r4, lr}
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 3;
 8000ae8:	2103      	movs	r1, #3
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aea:	f44f 2460 	mov.w	r4, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_ADC1_Init+0x84>)
{
 8000af0:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8000af2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8000af6:	9203      	str	r2, [sp, #12]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afc:	605a      	str	r2, [r3, #4]
  hadc1.Instance = ADC1;
 8000afe:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <MX_ADC1_Init+0x88>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b00:	6098      	str	r0, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b02:	4618      	mov	r0, r3
  hadc1.Instance = ADC1;
 8000b04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b06:	61dc      	str	r4, [r3, #28]
  hadc1.Init.NbrOfConversion = 3;
 8000b08:	6119      	str	r1, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0a:	f002 ffa7 	bl	8003a5c <HAL_ADC_Init>
 8000b0e:	bb30      	cbnz	r0, 8000b5e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b10:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b12:	2205      	movs	r2, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b14:	a901      	add	r1, sp, #4
 8000b16:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_ADC1_Init+0x84>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b18:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b1c:	9203      	str	r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1e:	f002 fe21 	bl	8003764 <HAL_ADC_ConfigChannel>
 8000b22:	b9c8      	cbnz	r0, 8000b58 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b24:	2204      	movs	r2, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b26:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b28:	eb0d 0102 	add.w	r1, sp, r2
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_ADC1_Init+0x84>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b2e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b32:	f002 fe17 	bl	8003764 <HAL_ADC_ConfigChannel>
 8000b36:	b960      	cbnz	r0, 8000b52 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b38:	2209      	movs	r2, #9
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b3a:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3c:	a901      	add	r1, sp, #4
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <MX_ADC1_Init+0x84>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b40:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b44:	f002 fe0e 	bl	8003764 <HAL_ADC_ConfigChannel>
 8000b48:	b108      	cbz	r0, 8000b4e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 fb7b 	bl	8001244 <Error_Handler>
  }

}
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b52:	f000 fb77 	bl	8001244 <Error_Handler>
 8000b56:	e7ef      	b.n	8000b38 <MX_ADC1_Init+0x58>
    Error_Handler();
 8000b58:	f000 fb74 	bl	8001244 <Error_Handler>
 8000b5c:	e7e2      	b.n	8000b24 <MX_ADC1_Init+0x44>
    Error_Handler();
 8000b5e:	f000 fb71 	bl	8001244 <Error_Handler>
 8000b62:	e7d5      	b.n	8000b10 <MX_ADC1_Init+0x30>
 8000b64:	200002e0 	.word	0x200002e0
 8000b68:	40012400 	.word	0x40012400

08000b6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b6c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000b70:	6802      	ldr	r2, [r0, #0]
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_ADC_MspInit+0xa8>)
{
 8000b74:	b088      	sub	sp, #32
  if(adcHandle->Instance==ADC1)
 8000b76:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000b7c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8000b80:	d001      	beq.n	8000b86 <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b82:	b008      	add	sp, #32
 8000b84:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000b86:	2112      	movs	r1, #18
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b88:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8a:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	4606      	mov	r6, r0
 8000b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	481f      	ldr	r0, [pc, #124]	; (8000c18 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b9c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000ba0:	9201      	str	r2, [sp, #4]
 8000ba2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	f042 0204 	orr.w	r2, r2, #4
 8000baa:	619a      	str	r2, [r3, #24]
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	f002 0204 	and.w	r2, r2, #4
 8000bb2:	9202      	str	r2, [sp, #8]
 8000bb4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	f042 0208 	orr.w	r2, r2, #8
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000bc0:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bcc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f003 fa59 	bl	8004084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bd2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	a904      	add	r1, sp, #16
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <HAL_ADC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bd8:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f003 fa52 	bl	8004084 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000be0:	2080      	movs	r0, #128	; 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000be2:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8000bea:	4d0d      	ldr	r5, [pc, #52]	; (8000c20 <HAL_ADC_MspInit+0xb4>)
 8000bec:	490d      	ldr	r1, [pc, #52]	; (8000c24 <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	60e8      	str	r0, [r5, #12]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf0:	4628      	mov	r0, r5
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf2:	e9c5 4401 	strd	r4, r4, [r5, #4]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bf6:	e9c5 4406 	strd	r4, r4, [r5, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8000bfa:	6029      	str	r1, [r5, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bfc:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c00:	f003 f932 	bl	8003e68 <HAL_DMA_Init>
 8000c04:	b918      	cbnz	r0, 8000c0e <HAL_ADC_MspInit+0xa2>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c06:	6235      	str	r5, [r6, #32]
 8000c08:	626e      	str	r6, [r5, #36]	; 0x24
}
 8000c0a:	b008      	add	sp, #32
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000c0e:	f000 fb19 	bl	8001244 <Error_Handler>
 8000c12:	e7f8      	b.n	8000c06 <HAL_ADC_MspInit+0x9a>
 8000c14:	40012400 	.word	0x40012400
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	20000310 	.word	0x20000310
 8000c24:	40020008 	.word	0x40020008

08000c28 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000c28:	b510      	push	{r4, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c2a:	2200      	movs	r2, #0
  hcan.Init.Prescaler = 16;
 8000c2c:	2410      	movs	r4, #16
  hcan.Instance = CAN1;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_CAN_Init+0x34>)
 8000c30:	490b      	ldr	r1, [pc, #44]	; (8000c60 <MX_CAN_Init+0x38>)
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c32:	4618      	mov	r0, r3
  hcan.Instance = CAN1;
 8000c34:	e9c3 1400 	strd	r1, r4, [r3]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c38:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c3c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c40:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c42:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c44:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c46:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c48:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c4c:	f003 f81c 	bl	8003c88 <HAL_CAN_Init>
 8000c50:	b900      	cbnz	r0, 8000c54 <MX_CAN_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000c52:	bd10      	pop	{r4, pc}
 8000c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000c58:	f000 baf4 	b.w	8001244 <Error_Handler>
 8000c5c:	20000354 	.word	0x20000354
 8000c60:	40006400 	.word	0x40006400

08000c64 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	2300      	movs	r3, #0
{
 8000c66:	b510      	push	{r4, lr}
  if(canHandle->Instance==CAN1)
 8000c68:	6801      	ldr	r1, [r0, #0]
 8000c6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <HAL_CAN_MspInit+0x80>)
{
 8000c6c:	b086      	sub	sp, #24
  if(canHandle->Instance==CAN1)
 8000c6e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000c74:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(canHandle->Instance==CAN1)
 8000c78:	d001      	beq.n	8000c7e <HAL_CAN_MspInit+0x1a>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000c7a:	b006      	add	sp, #24
 8000c7c:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c7e:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c86:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c8a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c8e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c92:	61da      	str	r2, [r3, #28]
 8000c94:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <HAL_CAN_MspInit+0x84>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c98:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000c9c:	9200      	str	r2, [sp, #0]
 8000c9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	699a      	ldr	r2, [r3, #24]
 8000ca2:	f042 0208 	orr.w	r2, r2, #8
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000caa:	9402      	str	r4, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb4:	f44f 7400 	mov.w	r4, #512	; 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f003 f9e4 	bl	8004084 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	a902      	add	r1, sp, #8
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_CAN_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	e9cd 4202 	strd	r4, r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f003 f9db 	bl	8004084 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_2();
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_CAN_MspInit+0x88>)
 8000cd0:	6853      	ldr	r3, [r2, #4]
 8000cd2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000cd6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cde:	6053      	str	r3, [r2, #4]
}
 8000ce0:	b006      	add	sp, #24
 8000ce2:	bd10      	pop	{r4, pc}
 8000ce4:	40006400 	.word	0x40006400
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40010000 	.word	0x40010000

08000cf0 <MX_DMA_Init>:
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_DMA_Init+0x30>)
{
 8000cf4:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf6:	695c      	ldr	r4, [r3, #20]
{
 8000cf8:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfa:	f044 0401 	orr.w	r4, r4, #1
 8000cfe:	615c      	str	r4, [r3, #20]
 8000d00:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d02:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d0a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d0e:	f003 f84f 	bl	8003db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d12:	200b      	movs	r0, #11

}
 8000d14:	b002      	add	sp, #8
 8000d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d1a:	f003 b87f 	b.w	8003e1c <HAL_NVIC_EnableIRQ>
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
{
 8000d2c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000d32:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <MX_GPIO_Init+0xb8>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d38:	4e29      	ldr	r6, [pc, #164]	; (8000de0 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	6999      	ldr	r1, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RS_Pin|DB7_Pin|DB6_Pin 
                          |DB5_Pin|DB4_Pin|LED1_Pin|LED2_Pin 
                          |LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000d3c:	4f29      	ldr	r7, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xc0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	f041 0120 	orr.w	r1, r1, #32
 8000d42:	6199      	str	r1, [r3, #24]
 8000d44:	6998      	ldr	r0, [r3, #24]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d46:	4611      	mov	r1, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	f000 0020 	and.w	r0, r0, #32
 8000d4c:	9001      	str	r0, [sp, #4]
 8000d4e:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	699d      	ldr	r5, [r3, #24]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d52:	4630      	mov	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	f045 0504 	orr.w	r5, r5, #4
 8000d58:	619d      	str	r5, [r3, #24]
 8000d5a:	699d      	ldr	r5, [r3, #24]
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|DB7_Pin|DB6_Pin 
                          |DB5_Pin|DB4_Pin|LED1_Pin|LED2_Pin 
                          |LED3_Pin|LED4_Pin|LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	f005 0504 	and.w	r5, r5, #4
 8000d64:	9502      	str	r5, [sp, #8]
 8000d66:	9d02      	ldr	r5, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	699d      	ldr	r5, [r3, #24]
 8000d6a:	f045 0508 	orr.w	r5, r5, #8
 8000d6e:	619d      	str	r5, [r3, #24]
 8000d70:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000d72:	4615      	mov	r5, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	9303      	str	r3, [sp, #12]
 8000d7a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d7c:	f003 fa7c 	bl	8004278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RS_Pin|DB7_Pin|DB6_Pin 
 8000d80:	4622      	mov	r2, r4
 8000d82:	4630      	mov	r0, r6
 8000d84:	f64f 41f8 	movw	r1, #64760	; 0xfcf8
 8000d88:	f003 fa76 	bl	8004278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	4638      	mov	r0, r7
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	f003 fa70 	bl	8004278 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d98:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	a904      	add	r1, sp, #16
 8000d9c:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f003 f96d 	bl	8004084 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|DB7_Pin|DB6_Pin 
 8000daa:	f64f 43f8 	movw	r3, #64760	; 0xfcf8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	4630      	mov	r0, r6
 8000db0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|DB7_Pin|DB6_Pin 
 8000db2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	e9cd 5405 	strd	r5, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f003 f962 	bl	8004084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	a904      	add	r1, sp, #16
 8000dc6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	e9cd 5405 	strd	r5, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Pin = DIR_Pin;
 8000dd0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f003 f957 	bl	8004084 <HAL_GPIO_Init>

}
 8000dd6:	b008      	add	sp, #32
 8000dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40010800 	.word	0x40010800

08000de8 <SD_Card_File_Write_Append>:

/*
 * @about: Append data to file.
 */
uint8_t SD_Card_File_Write_Append ( char* path, char* txt, char* title, uint8_t retryNum )
{
 8000de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t retVal = FALSE;
    uint8_t retryNumDownCounter = retryNum;

    fr = FR_INVALID_PARAMETER;
 8000dec:	2413      	movs	r4, #19
 8000dee:	4d30      	ldr	r5, [pc, #192]	; (8000eb0 <SD_Card_File_Write_Append+0xc8>)
{
 8000df0:	b083      	sub	sp, #12
    fr = FR_INVALID_PARAMETER;
 8000df2:	702c      	strb	r4, [r5, #0]

    while ( retryNumDownCounter != 0 && fr != FR_OK )
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d059      	beq.n	8000eac <SD_Card_File_Write_Append+0xc4>
 8000df8:	1e5c      	subs	r4, r3, #1
 8000dfa:	9201      	str	r2, [sp, #4]
 8000dfc:	4688      	mov	r8, r1
 8000dfe:	4607      	mov	r7, r0
 8000e00:	b2e4      	uxtb	r4, r4
    {
        fr = f_open ( &Fil, path, FA_READ | FA_WRITE );
 8000e02:	4e2c      	ldr	r6, [pc, #176]	; (8000eb4 <SD_Card_File_Write_Append+0xcc>)
                }

            }
            else
            {
                f_mount ( &FatFs, "", 1 );
 8000e04:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8000eb8 <SD_Card_File_Write_Append+0xd0>
 8000e08:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8000ebc <SD_Card_File_Write_Append+0xd4>
 8000e0c:	e00d      	b.n	8000e2a <SD_Card_File_Write_Append+0x42>
        else if ( fr == FR_NO_FILE )
 8000e0e:	2804      	cmp	r0, #4
 8000e10:	d02d      	beq.n	8000e6e <SD_Card_File_Write_Append+0x86>
                f_mount ( &FatFs, "", 1 );
 8000e12:	2201      	movs	r2, #1
 8000e14:	4659      	mov	r1, fp
 8000e16:	4650      	mov	r0, sl
 8000e18:	f002 f944 	bl	80030a4 <f_mount>
    while ( retryNumDownCounter != 0 && fr != FR_OK )
 8000e1c:	2c00      	cmp	r4, #0
 8000e1e:	d045      	beq.n	8000eac <SD_Card_File_Write_Append+0xc4>
 8000e20:	782b      	ldrb	r3, [r5, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d042      	beq.n	8000eac <SD_Card_File_Write_Append+0xc4>
 8000e26:	3c01      	subs	r4, #1
 8000e28:	b2e4      	uxtb	r4, r4
        fr = f_open ( &Fil, path, FA_READ | FA_WRITE );
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	4639      	mov	r1, r7
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f002 f966 	bl	8003100 <f_open>
 8000e34:	4681      	mov	r9, r0
 8000e36:	7028      	strb	r0, [r5, #0]
        if ( fr == FR_OK )
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	d1e8      	bne.n	8000e0e <SD_Card_File_Write_Append+0x26>
            fr = f_lseek ( &Fil, f_size ( &Fil ) );
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <SD_Card_File_Write_Append+0xcc>)
 8000e3e:	4630      	mov	r0, r6
 8000e40:	68d9      	ldr	r1, [r3, #12]
 8000e42:	f002 fb5f 	bl	8003504 <f_lseek>
                fr = f_write ( &Fil, title, strlen ( title ), NULL );
 8000e46:	7028      	strb	r0, [r5, #0]
                fr = f_write ( &Fil, txt, strlen ( txt ), NULL );
 8000e48:	4640      	mov	r0, r8
 8000e4a:	f7ff f981 	bl	8000150 <strlen>
 8000e4e:	464b      	mov	r3, r9
 8000e50:	b282      	uxth	r2, r0
 8000e52:	4641      	mov	r1, r8
 8000e54:	4630      	mov	r0, r6
 8000e56:	f002 fa13 	bl	8003280 <f_write>
 8000e5a:	7028      	strb	r0, [r5, #0]
                fr = f_close ( &Fil );
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f002 fb43 	bl	80034e8 <f_close>
 8000e62:	7028      	strb	r0, [r5, #0]
                if ( fr == FR_OK )
 8000e64:	bb00      	cbnz	r0, 8000ea8 <SD_Card_File_Write_Append+0xc0>
    uint8_t retVal = FALSE;
 8000e66:	2001      	movs	r0, #1

        --retryNumDownCounter;
    }

    return ( retVal );
}
 8000e68:	b003      	add	sp, #12
 8000e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            fr = f_open ( &Fil, path, FA_CREATE_ALWAYS );
 8000e6e:	2208      	movs	r2, #8
 8000e70:	4639      	mov	r1, r7
 8000e72:	4630      	mov	r0, r6
 8000e74:	f002 f944 	bl	8003100 <f_open>
 8000e78:	4681      	mov	r9, r0
 8000e7a:	7028      	strb	r0, [r5, #0]
            if ( fr == FR_OK )
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	d1c8      	bne.n	8000e12 <SD_Card_File_Write_Append+0x2a>
                fr = f_close ( &Fil );
 8000e80:	4630      	mov	r0, r6
 8000e82:	f002 fb31 	bl	80034e8 <f_close>
                fr = f_open ( &Fil, path, FA_READ | FA_WRITE );
 8000e86:	4639      	mov	r1, r7
 8000e88:	2203      	movs	r2, #3
                fr = f_close ( &Fil );
 8000e8a:	7028      	strb	r0, [r5, #0]
                fr = f_open ( &Fil, path, FA_READ | FA_WRITE );
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f002 f937 	bl	8003100 <f_open>
 8000e92:	7028      	strb	r0, [r5, #0]
                fr = f_write ( &Fil, title, strlen ( title ), NULL );
 8000e94:	9801      	ldr	r0, [sp, #4]
 8000e96:	f7ff f95b 	bl	8000150 <strlen>
 8000e9a:	464b      	mov	r3, r9
 8000e9c:	b282      	uxth	r2, r0
 8000e9e:	9901      	ldr	r1, [sp, #4]
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	f002 f9ed 	bl	8003280 <f_write>
 8000ea6:	e7ce      	b.n	8000e46 <SD_Card_File_Write_Append+0x5e>
    while ( retryNumDownCounter != 0 && fr != FR_OK )
 8000ea8:	2c00      	cmp	r4, #0
 8000eaa:	d1bc      	bne.n	8000e26 <SD_Card_File_Write_Append+0x3e>
    uint8_t retVal = FALSE;
 8000eac:	2000      	movs	r0, #0
 8000eae:	e7db      	b.n	8000e68 <SD_Card_File_Write_Append+0x80>
 8000eb0:	200005d0 	.word	0x200005d0
 8000eb4:	200005d4 	.word	0x200005d4
 8000eb8:	08005af0 	.word	0x08005af0
 8000ebc:	2000037c 	.word	0x2000037c

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec2:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec4:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ecc:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8000ed0:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed4:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eda:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000edc:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ede:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee2:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee4:	940d      	str	r4, [sp, #52]	; 0x34
 8000ee6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eea:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000eee:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000ef6:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efa:	f003 f9c7 	bl	800428c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f04:	4629      	mov	r1, r5
 8000f06:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0c:	e9cd 5406 	strd	r5, r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f10:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f12:	f003 fbe9 	bl	80046e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f1c:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f1e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f20:	f003 fca2 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000f24:	b015      	add	sp, #84	; 0x54
 8000f26:	bd30      	pop	{r4, r5, pc}

08000f28 <main>:
{
 8000f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t tempTickStr[ 64 ] = "";
 8000f2c:	2400      	movs	r4, #0
  gain = 1 + ( rf / ri );
 8000f2e:	2600      	movs	r6, #0
{
 8000f30:	b0a0      	sub	sp, #128	; 0x80
  uint8_t tempTickStr[ 64 ] = "";
 8000f32:	223c      	movs	r2, #60	; 0x3c
 8000f34:	4621      	mov	r1, r4
 8000f36:	a811      	add	r0, sp, #68	; 0x44
  gain = 1 + ( rf / ri );
 8000f38:	4f5a      	ldr	r7, [pc, #360]	; (80010a4 <main+0x17c>)
  uint8_t tempTickStr[ 64 ] = "";
 8000f3a:	9410      	str	r4, [sp, #64]	; 0x40
 8000f3c:	f004 f990 	bl	8005260 <memset>
  HAL_Init();
 8000f40:	f002 fb98 	bl	8003674 <HAL_Init>
  SystemClock_Config();
 8000f44:	f7ff ffbc 	bl	8000ec0 <SystemClock_Config>
  MX_GPIO_Init();
 8000f48:	f7ff feec 	bl	8000d24 <MX_GPIO_Init>
  MX_CAN_Init();
 8000f4c:	f7ff fe6c 	bl	8000c28 <MX_CAN_Init>
  MX_SPI1_Init();
 8000f50:	f000 f97a 	bl	8001248 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f54:	f000 fad0 	bl	80014f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f58:	f000 fab2 	bl	80014c0 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000f5c:	f7ff fec8 	bl	8000cf0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f60:	f7ff fdbe 	bl	8000ae0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000f64:	f000 fa54 	bl	8001410 <MX_TIM4_Init>
  gain = 1 + ( rf / ri );
 8000f68:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <main+0x180>)
  HAL_ADCEx_Calibration_Start ( &hadc1 );
 8000f6a:	4850      	ldr	r0, [pc, #320]	; (80010ac <main+0x184>)
  gain = 1 + ( rf / ri );
 8000f6c:	e9c3 6700 	strd	r6, r7, [r3]
  HAL_ADCEx_Calibration_Start ( &hadc1 );
 8000f70:	f002 fe1a 	bl	8003ba8 <HAL_ADCEx_Calibration_Start>
  fr=f_mount                           ( &FatFs, "", 1 );
 8000f74:	2201      	movs	r2, #1
 8000f76:	494e      	ldr	r1, [pc, #312]	; (80010b0 <main+0x188>)
 8000f78:	484e      	ldr	r0, [pc, #312]	; (80010b4 <main+0x18c>)
 8000f7a:	f002 f893 	bl	80030a4 <f_mount>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f7e:	4d4e      	ldr	r5, [pc, #312]	; (80010b8 <main+0x190>)
  fr=f_mount                           ( &FatFs, "", 1 );
 8000f80:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <main+0x194>)
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
  fr=f_mount                           ( &FatFs, "", 1 );
 8000f84:	7018      	strb	r0, [r3, #0]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f86:	2108      	movs	r1, #8
 8000f88:	4628      	mov	r0, r5
 8000f8a:	f003 f975 	bl	8004278 <HAL_GPIO_WritePin>
  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000f8e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8000f92:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  Lcd_PortType ports[] = {
 8000f96:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <main+0x198>)
 8000f98:	ae06      	add	r6, sp, #24
  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000f9a:	f8cd e008 	str.w	lr, [sp, #8]
  Lcd_PinType pins[] = {DB4_Pin, DB5_Pin, DB6_Pin, DB7_Pin};
 8000f9e:	f103 0710 	add.w	r7, r3, #16
  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000fa2:	9403      	str	r4, [sp, #12]
  Lcd_PortType ports[] = {
 8000fa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000fa6:	9501      	str	r5, [sp, #4]
  Lcd_PortType ports[] = {
 8000fa8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {DB4_Pin, DB5_Pin, DB6_Pin, DB7_Pin};
 8000fac:	e897 0003 	ldmia.w	r7, {r0, r1}
 8000fb0:	aa04      	add	r2, sp, #16
 8000fb2:	e882 0003 	stmia.w	r2, {r0, r1}
  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000fb6:	462b      	mov	r3, r5
 8000fb8:	4631      	mov	r1, r6
 8000fba:	f8cd c000 	str.w	ip, [sp]
 8000fbe:	a80a      	add	r0, sp, #40	; 0x28
 8000fc0:	f7ff fd24 	bl	8000a0c <Lcd_create>
  Lcd_string(&lcd, "4ilo");
 8000fc4:	a80a      	add	r0, sp, #40	; 0x28
 8000fc6:	493f      	ldr	r1, [pc, #252]	; (80010c4 <main+0x19c>)
 8000fc8:	f7ff fd44 	bl	8000a54 <Lcd_string>
  HAL_TIM_Base_Start_IT ( &htim4 );
 8000fcc:	483e      	ldr	r0, [pc, #248]	; (80010c8 <main+0x1a0>)
 8000fce:	f003 fec7 	bl	8004d60 <HAL_TIM_Base_Start_IT>
 8000fd2:	4f3e      	ldr	r7, [pc, #248]	; (80010cc <main+0x1a4>)
 8000fd4:	4e3e      	ldr	r6, [pc, #248]	; (80010d0 <main+0x1a8>)
	  if ( ( HAL_GetTick ( ) - cntr1sec ) > 999 )
 8000fd6:	f002 fb6b 	bl	80036b0 <HAL_GetTick>
 8000fda:	1b00      	subs	r0, r0, r4
 8000fdc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000fe0:	d3f9      	bcc.n	8000fd6 <main+0xae>
	        cntr1sec = HAL_GetTick ( );
 8000fe2:	f002 fb65 	bl	80036b0 <HAL_GetTick>
 8000fe6:	4604      	mov	r4, r0
	        HAL_GPIO_WritePin ( LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET );
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	4628      	mov	r0, r5
 8000fee:	f003 f943 	bl	8004278 <HAL_GPIO_WritePin>
	        Lcd_clear ( &lcd );
 8000ff2:	a80a      	add	r0, sp, #40	; 0x28
 8000ff4:	f7ff fd70 	bl	8000ad8 <Lcd_clear>
            sprintf ( ( char* ) tempTickStr, "%lu", cntr1sec );
 8000ff8:	4622      	mov	r2, r4
 8000ffa:	4936      	ldr	r1, [pc, #216]	; (80010d4 <main+0x1ac>)
 8000ffc:	a810      	add	r0, sp, #64	; 0x40
 8000ffe:	f004 f937 	bl	8005270 <siprintf>
            Lcd_cursor ( &lcd, 0, 0 );
 8001002:	2200      	movs	r2, #0
 8001004:	a80a      	add	r0, sp, #40	; 0x28
 8001006:	4611      	mov	r1, r2
 8001008:	f7ff fd5c 	bl	8000ac4 <Lcd_cursor>
            Lcd_string ( &lcd, ( char* ) tempTickStr );
 800100c:	a910      	add	r1, sp, #64	; 0x40
 800100e:	a80a      	add	r0, sp, #40	; 0x28
 8001010:	f7ff fd20 	bl	8000a54 <Lcd_string>
            Lcd_cursor ( &lcd, 1, 0 );
 8001014:	2200      	movs	r2, #0
 8001016:	2101      	movs	r1, #1
 8001018:	a80a      	add	r0, sp, #40	; 0x28
 800101a:	f7ff fd53 	bl	8000ac4 <Lcd_cursor>
            Lcd_int ( &lcd, ( uint32_t ) voltFilt );
 800101e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001022:	f7ff fc6b 	bl	80008fc <__aeabi_d2uiz>
 8001026:	4601      	mov	r1, r0
 8001028:	a80a      	add	r0, sp, #40	; 0x28
 800102a:	f7ff fd3b 	bl	8000aa4 <Lcd_int>
            Lcd_cursor ( &lcd, 1, 8 );
 800102e:	2208      	movs	r2, #8
 8001030:	2101      	movs	r1, #1
 8001032:	a80a      	add	r0, sp, #40	; 0x28
 8001034:	f7ff fd46 	bl	8000ac4 <Lcd_cursor>
            Lcd_int ( &lcd, ( uint32_t ) currFilt );
 8001038:	e9d6 0100 	ldrd	r0, r1, [r6]
 800103c:	f7ff fc5e 	bl	80008fc <__aeabi_d2uiz>
 8001040:	4601      	mov	r1, r0
 8001042:	a80a      	add	r0, sp, #40	; 0x28
 8001044:	f7ff fd2e 	bl	8000aa4 <Lcd_int>
            sprintf ( ( char* ) tempTickStr, "%lu\t%lu\t%lu\r\n", cntr1sec, ( uint32_t ) voltFilt, ( uint32_t ) currFilt );
 8001048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800104c:	f7ff fc56 	bl	80008fc <__aeabi_d2uiz>
 8001050:	4680      	mov	r8, r0
 8001052:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001056:	f7ff fc51 	bl	80008fc <__aeabi_d2uiz>
 800105a:	4643      	mov	r3, r8
 800105c:	9000      	str	r0, [sp, #0]
 800105e:	4622      	mov	r2, r4
 8001060:	491d      	ldr	r1, [pc, #116]	; (80010d8 <main+0x1b0>)
 8001062:	a810      	add	r0, sp, #64	; 0x40
 8001064:	f004 f904 	bl	8005270 <siprintf>
            if ( HAL_GetTick ( ) > 20000 )
 8001068:	f002 fb22 	bl	80036b0 <HAL_GetTick>
 800106c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001070:	4298      	cmp	r0, r3
 8001072:	d805      	bhi.n	8001080 <main+0x158>
            HAL_GPIO_WritePin ( LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET );
 8001074:	2200      	movs	r2, #0
 8001076:	2140      	movs	r1, #64	; 0x40
 8001078:	4628      	mov	r0, r5
 800107a:	f003 f8fd 	bl	8004278 <HAL_GPIO_WritePin>
 800107e:	e7aa      	b.n	8000fd6 <main+0xae>
                if ( SD_Card_File_Write_Append ( "test1.txt", ( char* ) tempTickStr, "", 3 ) == FALSE )
 8001080:	2303      	movs	r3, #3
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <main+0x188>)
 8001084:	a910      	add	r1, sp, #64	; 0x40
 8001086:	4815      	ldr	r0, [pc, #84]	; (80010dc <main+0x1b4>)
 8001088:	f7ff feae 	bl	8000de8 <SD_Card_File_Write_Append>
 800108c:	2800      	cmp	r0, #0
 800108e:	d1f1      	bne.n	8001074 <main+0x14c>
                    HAL_GPIO_WritePin ( LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET );
 8001090:	4628      	mov	r0, r5
 8001092:	2201      	movs	r2, #1
 8001094:	2120      	movs	r1, #32
 8001096:	f003 f8ef 	bl	8004278 <HAL_GPIO_WritePin>
                    HAL_GPIO_TogglePin ( LED2_GPIO_Port, LED2_Pin );
 800109a:	2110      	movs	r1, #16
 800109c:	4628      	mov	r0, r5
 800109e:	f003 f8ef 	bl	8004280 <HAL_GPIO_TogglePin>
 80010a2:	e7e7      	b.n	8001074 <main+0x14c>
 80010a4:	40350000 	.word	0x40350000
 80010a8:	200000a8 	.word	0x200000a8
 80010ac:	200002e0 	.word	0x200002e0
 80010b0:	08005af0 	.word	0x08005af0
 80010b4:	2000037c 	.word	0x2000037c
 80010b8:	40010c00 	.word	0x40010c00
 80010bc:	200005d0 	.word	0x200005d0
 80010c0:	08005aac 	.word	0x08005aac
 80010c4:	08005aec 	.word	0x08005aec
 80010c8:	20000650 	.word	0x20000650
 80010cc:	200000b8 	.word	0x200000b8
 80010d0:	200000a0 	.word	0x200000a0
 80010d4:	08005af4 	.word	0x08005af4
 80010d8:	08005af8 	.word	0x08005af8
 80010dc:	08005b08 	.word	0x08005b08

080010e0 <Delay_NOP>:

void Delay_NOP ( uint16_t DelayCount )
{
    uint16_t nopcounter;

    for (nopcounter = 0; nopcounter < DelayCount; nopcounter++)
 80010e0:	b128      	cbz	r0, 80010ee <Delay_NOP+0xe>
 80010e2:	2300      	movs	r3, #0
    {
        __NOP();
 80010e4:	bf00      	nop
 80010e6:	3301      	adds	r3, #1
    for (nopcounter = 0; nopcounter < DelayCount; nopcounter++)
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4290      	cmp	r0, r2
 80010ec:	d8fa      	bhi.n	80010e4 <Delay_NOP+0x4>
    }
}
 80010ee:	4770      	bx	lr

080010f0 <HAL_TIM_PeriodElapsedCallback>:

    return ( current );
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80010f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* 1 millisecond timer */
    if ( htim->Instance == TIM4 )
 80010f4:	6802      	ldr	r2, [r0, #0]
 80010f6:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x10>

        HAL_ADC_Start_DMA ( &hadc1, ( uint32_t * ) aADCxConvertedData, ADC_CONVERTED_DATA_BUFFER_SIZE );

        HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
    }
}
 80010fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        volt = aADCxConvertedData[0];
 8001100:	4c48      	ldr	r4, [pc, #288]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x134>)
        HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	4848      	ldr	r0, [pc, #288]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001108:	f003 f8b6 	bl	8004278 <HAL_GPIO_WritePin>
        volt = aADCxConvertedData[0];
 800110c:	8820      	ldrh	r0, [r4, #0]
 800110e:	f7ff f969 	bl	80003e4 <__aeabi_ui2d>
 8001112:	4680      	mov	r8, r0
    current = adcValue; /* to cast operation in double domain */
 8001114:	88a0      	ldrh	r0, [r4, #4]
        volt = aADCxConvertedData[0];
 8001116:	4689      	mov	r9, r1
    current = adcValue; /* to cast operation in double domain */
 8001118:	f7ff f964 	bl	80003e4 <__aeabi_ui2d>
    current = ( ( current * adcVoltageRef ) / adcUpValue );
 800111c:	a336      	add	r3, pc, #216	; (adr r3, 80011f8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff f9d9 	bl	80004d8 <__aeabi_dmul>
 8001126:	a336      	add	r3, pc, #216	; (adr r3, 8001200 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fafe 	bl	800072c <__aeabi_ddiv>
    current /= gain;
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x13c>)
        voltFilt = ( volt * filterAlpha ) + ( ( 1 - filterAlpha ) * voltFilt );
 8001132:	4d3f      	ldr	r5, [pc, #252]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x140>)
    current /= gain;
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff faf8 	bl	800072c <__aeabi_ddiv>
    current /= rshunt;
 800113c:	a332      	add	r3, pc, #200	; (adr r3, 8001208 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff faf3 	bl	800072c <__aeabi_ddiv>
        volt = ( volt * adcVoltageRef ) / adcUpValue;
 8001146:	a32c      	add	r3, pc, #176	; (adr r3, 80011f8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
    current /= rshunt;
 800114c:	4606      	mov	r6, r0
 800114e:	460f      	mov	r7, r1
        curr = adcToCurrentMilliamp(aADCxConvertedData[2]);
 8001150:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001238 <HAL_TIM_PeriodElapsedCallback+0x148>
        volt = ( volt * adcVoltageRef ) / adcUpValue;
 8001154:	4640      	mov	r0, r8
        curr = adcToCurrentMilliamp(aADCxConvertedData[2]);
 8001156:	e9cc 6700 	strd	r6, r7, [ip]
        volt = ( volt * adcVoltageRef ) / adcUpValue;
 800115a:	4649      	mov	r1, r9
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	a327      	add	r3, pc, #156	; (adr r3, 8001200 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fae1 	bl	800072c <__aeabi_ddiv>
        voltFilt = ( volt * filterAlpha ) + ( ( 1 - filterAlpha ) * voltFilt );
 800116a:	a329      	add	r3, pc, #164	; (adr r3, 8001210 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
        volt = ( volt * adcVoltageRef ) / adcUpValue;
 8001170:	4680      	mov	r8, r0
 8001172:	4689      	mov	r9, r1
        voltFilt = ( volt * filterAlpha ) + ( ( 1 - filterAlpha ) * voltFilt );
 8001174:	e9d5 0100 	ldrd	r0, r1, [r5]
        volt = ( volt * adcVoltageRef ) / adcUpValue;
 8001178:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800123c <HAL_TIM_PeriodElapsedCallback+0x14c>
 800117c:	e9cc 8900 	strd	r8, r9, [ip]
        voltFilt = ( volt * filterAlpha ) + ( ( 1 - filterAlpha ) * voltFilt );
 8001180:	f7ff f9aa 	bl	80004d8 <__aeabi_dmul>
 8001184:	a324      	add	r3, pc, #144	; (adr r3, 8001218 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	4682      	mov	sl, r0
 800118c:	468b      	mov	fp, r1
 800118e:	4640      	mov	r0, r8
 8001190:	4649      	mov	r1, r9
 8001192:	f7ff f9a1 	bl	80004d8 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4650      	mov	r0, sl
 800119c:	4659      	mov	r1, fp
 800119e:	f7fe ffe5 	bl	800016c <__adddf3>
        currFilt = ( curr * filterAlpha ) + ( ( 1 - filterAlpha ) * currFilt );
 80011a2:	a31b      	add	r3, pc, #108	; (adr r3, 8001210 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f8df a094 	ldr.w	sl, [pc, #148]	; 8001240 <HAL_TIM_PeriodElapsedCallback+0x150>
        voltFilt = ( volt * filterAlpha ) + ( ( 1 - filterAlpha ) * voltFilt );
 80011ac:	e9c5 0100 	strd	r0, r1, [r5]
        currFilt = ( curr * filterAlpha ) + ( ( 1 - filterAlpha ) * currFilt );
 80011b0:	e9da 0100 	ldrd	r0, r1, [sl]
 80011b4:	f7ff f990 	bl	80004d8 <__aeabi_dmul>
 80011b8:	a317      	add	r3, pc, #92	; (adr r3, 8001218 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	4680      	mov	r8, r0
 80011c0:	4689      	mov	r9, r1
 80011c2:	4630      	mov	r0, r6
 80011c4:	4639      	mov	r1, r7
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	460b      	mov	r3, r1
 80011cc:	4602      	mov	r2, r0
 80011ce:	4649      	mov	r1, r9
 80011d0:	4640      	mov	r0, r8
 80011d2:	f7fe ffcb 	bl	800016c <__adddf3>
        HAL_ADC_Start_DMA ( &hadc1, ( uint32_t * ) aADCxConvertedData, ADC_CONVERTED_DATA_BUFFER_SIZE );
 80011d6:	2203      	movs	r2, #3
        currFilt = ( curr * filterAlpha ) + ( ( 1 - filterAlpha ) * currFilt );
 80011d8:	e9ca 0100 	strd	r0, r1, [sl]
        HAL_ADC_Start_DMA ( &hadc1, ( uint32_t * ) aADCxConvertedData, ADC_CONVERTED_DATA_BUFFER_SIZE );
 80011dc:	4621      	mov	r1, r4
 80011de:	4815      	ldr	r0, [pc, #84]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80011e0:	f002 fb8e 	bl	8003900 <HAL_ADC_Start_DMA>
}
 80011e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	480e      	ldr	r0, [pc, #56]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80011ee:	f003 b843 	b.w	8004278 <HAL_GPIO_WritePin>
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40a9c800 	.word	0x40a9c800
 8001200:	00000000 	.word	0x00000000
 8001204:	40affe00 	.word	0x40affe00
 8001208:	9999999a 	.word	0x9999999a
 800120c:	3fa99999 	.word	0x3fa99999
 8001210:	cccccccd 	.word	0xcccccccd
 8001214:	3feccccc 	.word	0x3feccccc
 8001218:	9999999a 	.word	0x9999999a
 800121c:	3fb99999 	.word	0x3fb99999
 8001220:	40000800 	.word	0x40000800
 8001224:	2000008c 	.word	0x2000008c
 8001228:	40010c00 	.word	0x40010c00
 800122c:	200000a8 	.word	0x200000a8
 8001230:	200000b8 	.word	0x200000b8
 8001234:	200002e0 	.word	0x200002e0
 8001238:	20000098 	.word	0x20000098
 800123c:	200000b0 	.word	0x200000b0
 8001240:	200000a0 	.word	0x200000a0

08001244 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001248:	b570      	push	{r4, r5, r6, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124a:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	2200      	movs	r2, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001250:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001254:	2428      	movs	r4, #40	; 0x28
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8001256:	210a      	movs	r1, #10
  hspi1.Instance = SPI1;
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_SPI1_Init+0x40>)
 800125a:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_SPI1_Init+0x44>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800125c:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi1.Instance = SPI1;
 8001260:	e9c3 0600 	strd	r0, r6, [r3]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001264:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8001266:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001268:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800126c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001270:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001276:	f003 fd27 	bl	8004cc8 <HAL_SPI_Init>
 800127a:	b900      	cbnz	r0, 800127e <MX_SPI1_Init+0x36>
  {
    Error_Handler();
  }

}
 800127c:	bd70      	pop	{r4, r5, r6, pc}
 800127e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8001282:	f7ff bfdf 	b.w	8001244 <Error_Handler>
 8001286:	bf00      	nop
 8001288:	200005f8 	.word	0x200005f8
 800128c:	40013000 	.word	0x40013000

08001290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001290:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_SPI_MspInit+0x6c>)
{
 8001298:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 800129a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80012a0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(spiHandle->Instance==SPI1)
 80012a4:	d001      	beq.n	80012aa <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012a6:	b006      	add	sp, #24
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012aa:	21a0      	movs	r1, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ae:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80012b4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	4812      	ldr	r0, [pc, #72]	; (8001300 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012bc:	619a      	str	r2, [r3, #24]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012c4:	9200      	str	r2, [sp, #0]
 80012c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	699a      	ldr	r2, [r3, #24]
 80012ca:	f042 0204 	orr.w	r2, r2, #4
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012d2:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f002 fecf 	bl	8004084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012e6:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	a902      	add	r1, sp, #8
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f002 fec7 	bl	8004084 <HAL_GPIO_Init>
}
 80012f6:	b006      	add	sp, #24
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
 80012fa:	bf00      	nop
 80012fc:	40013000 	.word	0x40013000
 8001300:	40010800 	.word	0x40010800

08001304 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_MspInit+0x3c>)
{
 8001306:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001308:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800130c:	f042 0201 	orr.w	r2, r2, #1
 8001310:	619a      	str	r2, [r3, #24]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	f002 0201 	and.w	r2, r2, #1
 8001318:	9200      	str	r2, [sp, #0]
 800131a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001322:	61da      	str	r2, [r3, #28]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800132e:	684b      	ldr	r3, [r1, #4]
 8001330:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001338:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	b002      	add	sp, #8
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000

08001348 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop

0800134c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134c:	e7fe      	b.n	800134c <HardFault_Handler>
 800134e:	bf00      	nop

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler>
 8001352:	bf00      	nop

08001354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001354:	e7fe      	b.n	8001354 <BusFault_Handler>
 8001356:	bf00      	nop

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	e7fe      	b.n	8001358 <UsageFault_Handler>
 800135a:	bf00      	nop

0800135c <SVC_Handler>:
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <DebugMon_Handler>:
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <PendSV_Handler>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f002 b996 	b.w	8003698 <HAL_IncTick>

0800136c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800136c:	4801      	ldr	r0, [pc, #4]	; (8001374 <DMA1_Channel1_IRQHandler+0x8>)
 800136e:	f002 bdf3 	b.w	8003f58 <HAL_DMA_IRQHandler>
 8001372:	bf00      	nop
 8001374:	20000310 	.word	0x20000310

08001378 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001378:	4801      	ldr	r0, [pc, #4]	; (8001380 <TIM4_IRQHandler+0x8>)
 800137a:	f003 bdaf 	b.w	8004edc <HAL_TIM_IRQHandler>
 800137e:	bf00      	nop
 8001380:	20000650 	.word	0x20000650

08001384 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <_sbrk+0x34>)
{
 8001386:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8001388:	6813      	ldr	r3, [r2, #0]
 800138a:	b133      	cbz	r3, 800139a <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800138c:	4669      	mov	r1, sp
 800138e:	4418      	add	r0, r3
 8001390:	4288      	cmp	r0, r1
 8001392:	d809      	bhi.n	80013a8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001394:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <_sbrk+0x38>)
 800139c:	460b      	mov	r3, r1
 800139e:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80013a0:	4669      	mov	r1, sp
 80013a2:	4418      	add	r0, r3
 80013a4:	4288      	cmp	r0, r1
 80013a6:	d9f5      	bls.n	8001394 <_sbrk+0x10>
		errno = ENOMEM;
 80013a8:	f003 ff30 	bl	800520c <__errno>
 80013ac:	220c      	movs	r2, #12
		return (caddr_t) -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 80013b2:	6002      	str	r2, [r0, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd08      	pop	{r3, pc}
 80013b8:	200000c0 	.word	0x200000c0
 80013bc:	20000718 	.word	0x20000718

080013c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c0:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80013c2:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013c6:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 80013ce:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013d0:	480e      	ldr	r0, [pc, #56]	; (800140c <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 80013d2:	f041 0101 	orr.w	r1, r1, #1
 80013d6:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 80013d8:	6859      	ldr	r1, [r3, #4]
 80013da:	400a      	ands	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013e8:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80013f8:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 80013fa:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013fc:	6084      	str	r4, [r0, #8]
#endif 
}
 80013fe:	bc30      	pop	{r4, r5}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	f8ff0000 	.word	0xf8ff0000
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001410:	2300      	movs	r3, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 71;
 8001412:	2047      	movs	r0, #71	; 0x47
{
 8001414:	b510      	push	{r4, lr}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 999;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001416:	2180      	movs	r1, #128	; 0x80
  htim4.Init.Period = 999;
 8001418:	f240 34e7 	movw	r4, #999	; 0x3e7
  htim4.Instance = TIM4;
 800141c:	4a16      	ldr	r2, [pc, #88]	; (8001478 <MX_TIM4_Init+0x68>)
{
 800141e:	b086      	sub	sp, #24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001420:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001422:	9300      	str	r3, [sp, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001424:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001428:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142a:	9301      	str	r3, [sp, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	6093      	str	r3, [r2, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	6113      	str	r3, [r2, #16]
  htim4.Instance = TIM4;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_TIM4_Init+0x6c>)
  htim4.Init.Period = 999;
 8001432:	60d4      	str	r4, [r2, #12]
  htim4.Instance = TIM4;
 8001434:	e9c2 3000 	strd	r3, r0, [r2]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001438:	4610      	mov	r0, r2
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800143a:	6191      	str	r1, [r2, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800143c:	f003 fe34 	bl	80050a8 <HAL_TIM_Base_Init>
 8001440:	b9b0      	cbnz	r0, 8001470 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001446:	a902      	add	r1, sp, #8
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <MX_TIM4_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800144c:	f003 fc98 	bl	8004d80 <HAL_TIM_ConfigClockSource>
 8001450:	b958      	cbnz	r0, 800146a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001454:	4669      	mov	r1, sp
 8001456:	4808      	ldr	r0, [pc, #32]	; (8001478 <MX_TIM4_Init+0x68>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145c:	f003 fe40 	bl	80050e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	b108      	cbz	r0, 8001466 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001462:	f7ff feef 	bl	8001244 <Error_Handler>
  }

}
 8001466:	b006      	add	sp, #24
 8001468:	bd10      	pop	{r4, pc}
    Error_Handler();
 800146a:	f7ff feeb 	bl	8001244 <Error_Handler>
 800146e:	e7f0      	b.n	8001452 <MX_TIM4_Init+0x42>
    Error_Handler();
 8001470:	f7ff fee8 	bl	8001244 <Error_Handler>
 8001474:	e7e5      	b.n	8001442 <MX_TIM4_Init+0x32>
 8001476:	bf00      	nop
 8001478:	20000650 	.word	0x20000650
 800147c:	40000800 	.word	0x40000800

08001480 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 8001480:	6802      	ldr	r2, [r0, #0]
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_TIM_Base_MspInit+0x3c>)
 8001484:	429a      	cmp	r2, r3
 8001486:	d000      	beq.n	800148a <HAL_TIM_Base_MspInit+0xa>
 8001488:	4770      	bx	lr
  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 800148c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
{
 8001490:	b510      	push	{r4, lr}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001492:	69dc      	ldr	r4, [r3, #28]
{
 8001494:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001496:	f044 0404 	orr.w	r4, r4, #4
 800149a:	61dc      	str	r4, [r3, #28]
 800149c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800149e:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014a6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014aa:	f002 fc81 	bl	8003db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014ae:	201e      	movs	r0, #30
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014b0:	b002      	add	sp, #8
 80014b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014b6:	f002 bcb1 	b.w	8003e1c <HAL_NVIC_EnableIRQ>
 80014ba:	bf00      	nop
 80014bc:	40000800 	.word	0x40000800

080014c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014c0:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 115200;
 80014c4:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014c8:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART1_UART_Init+0x30>)
 80014cc:	4c09      	ldr	r4, [pc, #36]	; (80014f4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ce:	4618      	mov	r0, r3
  huart1.Instance = USART1;
 80014d0:	e9c3 4500 	strd	r4, r5, [r3]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d6:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014da:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e0:	f003 fe64 	bl	80051ac <HAL_UART_Init>
 80014e4:	b900      	cbnz	r0, 80014e8 <MX_USART1_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 80014e6:	bd38      	pop	{r3, r4, r5, pc}
 80014e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80014ec:	f7ff beaa 	b.w	8001244 <Error_Handler>
 80014f0:	20000690 	.word	0x20000690
 80014f4:	40013800 	.word	0x40013800

080014f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014f8:	b538      	push	{r3, r4, r5, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	2200      	movs	r2, #0
  huart2.Init.BaudRate = 115200;
 80014fc:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART2_UART_Init+0x30>)
 8001504:	4c09      	ldr	r4, [pc, #36]	; (800152c <MX_USART2_UART_Init+0x34>)
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4618      	mov	r0, r3
  huart2.Instance = USART2;
 8001508:	e9c3 4500 	strd	r4, r5, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800150c:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001518:	f003 fe48 	bl	80051ac <HAL_UART_Init>
 800151c:	b900      	cbnz	r0, 8001520 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 800151e:	bd38      	pop	{r3, r4, r5, pc}
 8001520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001524:	f7ff be8e 	b.w	8001244 <Error_Handler>
 8001528:	200006d0 	.word	0x200006d0
 800152c:	40004400 	.word	0x40004400

08001530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001530:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8001534:	6803      	ldr	r3, [r0, #0]
 8001536:	4a29      	ldr	r2, [pc, #164]	; (80015dc <HAL_UART_MspInit+0xac>)
{
 8001538:	b088      	sub	sp, #32
  if(uartHandle->Instance==USART1)
 800153a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001540:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8001544:	d029      	beq.n	800159a <HAL_UART_MspInit+0x6a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <HAL_UART_MspInit+0xb0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d001      	beq.n	8001550 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800154c:	b008      	add	sp, #32
 800154e:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001550:	2104      	movs	r1, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001554:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_UART_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	69da      	ldr	r2, [r3, #28]
 800155c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001560:	61da      	str	r2, [r3, #28]
 8001562:	69da      	ldr	r2, [r3, #28]
 8001564:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001568:	9202      	str	r2, [sp, #8]
 800156a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	430a      	orrs	r2, r1
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001574:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	400b      	ands	r3, r1
 8001578:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f002 fd7f 	bl	8004084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001586:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	a904      	add	r1, sp, #16
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001590:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f002 fd77 	bl	8004084 <HAL_GPIO_Init>
}
 8001596:	b008      	add	sp, #32
 8001598:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159a:	f44f 7100 	mov.w	r1, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a0:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_UART_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ac:	619a      	str	r2, [r3, #24]
 80015ae:	699a      	ldr	r2, [r3, #24]
 80015b0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015b4:	9200      	str	r2, [sp, #0]
 80015b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	f042 0204 	orr.w	r2, r2, #4
 80015be:	619a      	str	r2, [r3, #24]
 80015c0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c2:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f002 fd57 	bl	8004084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015da:	e7d5      	b.n	8001588 <HAL_UART_MspInit+0x58>
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40004400 	.word	0x40004400
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010800 	.word	0x40010800

080015ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015ee:	e003      	b.n	80015f8 <LoopCopyDataInit>

080015f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015f6:	3104      	adds	r1, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001600:	d3f6      	bcc.n	80015f0 <CopyDataInit>
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001604:	e002      	b.n	800160c <LoopFillZerobss>

08001606 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001608:	f842 3b04 	str.w	r3, [r2], #4

0800160c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800160e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001610:	d3f9      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001612:	f7ff fed5 	bl	80013c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001616:	f003 fdff 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161a:	f7ff fc85 	bl	8000f28 <main>
  bx lr
 800161e:	4770      	bx	lr
  ldr r3, =_sidata
 8001620:	08005b8c 	.word	0x08005b8c
  ldr r0, =_sdata
 8001624:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001628:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800162c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001630:	20000718 	.word	0x20000718

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)	/* 1:Ready, 0:Timeout */
{
 8001638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800163c:	4f12      	ldr	r7, [pc, #72]	; (8001688 <wait_ready+0x50>)
 800163e:	4e13      	ldr	r6, [pc, #76]	; (800168c <wait_ready+0x54>)
 8001640:	b082      	sub	sp, #8
	static uint8_t traBuf[1];
	static uint8_t recBuf[1];

	traBuf[0] = val;

	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001642:	46ba      	mov	sl, r7
 8001644:	46b1      	mov	r9, r6
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
 8001646:	f241 3488 	movw	r4, #5000	; 0x1388
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800164a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8001690 <wait_ready+0x58>
 800164e:	e006      	b.n	800165e <wait_ready+0x26>
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
 8001650:	3c01      	subs	r4, #1
		__delay_us(1000);
 8001652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
 8001656:	b2a4      	uxth	r4, r4
		__delay_us(1000);
 8001658:	f7ff fd42 	bl	80010e0 <Delay_NOP>
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
 800165c:	b184      	cbz	r4, 8001680 <wait_ready+0x48>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800165e:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001660:	25ff      	movs	r5, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	464a      	mov	r2, r9
 8001666:	2301      	movs	r3, #1
 8001668:	4651      	mov	r1, sl
 800166a:	4640      	mov	r0, r8
	traBuf[0] = val;
 800166c:	703d      	strb	r5, [r7, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800166e:	f003 fb6b 	bl	8004d48 <HAL_SPI_TransmitReceive>
		if (sd_rx() == 0xFF) break;
 8001672:	7833      	ldrb	r3, [r6, #0]
 8001674:	42ab      	cmp	r3, r5
 8001676:	d1eb      	bne.n	8001650 <wait_ready+0x18>
 8001678:	2001      	movs	r0, #1
}
 800167a:	b002      	add	sp, #8
 800167c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001680:	4620      	mov	r0, r4
 8001682:	b002      	add	sp, #8
 8001684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001688:	200000cc 	.word	0x200000cc
 800168c:	200000c8 	.word	0x200000c8
 8001690:	200005f8 	.word	0x200005f8

08001694 <deselect>:
	SD_CS_SetHigh();	/* Set CS# high */
 8001694:	2201      	movs	r2, #1
{
 8001696:	b530      	push	{r4, r5, lr}
	SD_CS_SetHigh();	/* Set CS# high */
 8001698:	4611      	mov	r1, r2
{
 800169a:	b083      	sub	sp, #12
	SD_CS_SetHigh();	/* Set CS# high */
 800169c:	4807      	ldr	r0, [pc, #28]	; (80016bc <deselect+0x28>)
 800169e:	f002 fdeb 	bl	8004278 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80016a2:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 80016a4:	25ff      	movs	r5, #255	; 0xff
 80016a6:	4c06      	ldr	r4, [pc, #24]	; (80016c0 <deselect+0x2c>)
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4621      	mov	r1, r4
 80016ac:	2301      	movs	r3, #1
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <deselect+0x30>)
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <deselect+0x34>)
	traBuf[0] = val;
 80016b2:	7025      	strb	r5, [r4, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80016b4:	f003 fb48 	bl	8004d48 <HAL_SPI_TransmitReceive>
}
 80016b8:	b003      	add	sp, #12
 80016ba:	bd30      	pop	{r4, r5, pc}
 80016bc:	40010c00 	.word	0x40010c00
 80016c0:	200000cc 	.word	0x200000cc
 80016c4:	200000c8 	.word	0x200000c8
 80016c8:	200005f8 	.word	0x200005f8

080016cc <select>:
{
 80016cc:	b530      	push	{r4, r5, lr}
	SD_CS_SetLow();	/* Set CS# low */
 80016ce:	2200      	movs	r2, #0
{
 80016d0:	b085      	sub	sp, #20
	SD_CS_SetLow();	/* Set CS# low */
 80016d2:	2101      	movs	r1, #1
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <select+0x3c>)
 80016d6:	f002 fdcf 	bl	8004278 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80016da:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 80016dc:	25ff      	movs	r5, #255	; 0xff
 80016de:	4c0b      	ldr	r4, [pc, #44]	; (800170c <select+0x40>)
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4621      	mov	r1, r4
 80016e4:	2301      	movs	r3, #1
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <select+0x44>)
 80016e8:	480a      	ldr	r0, [pc, #40]	; (8001714 <select+0x48>)
	traBuf[0] = val;
 80016ea:	7025      	strb	r5, [r4, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80016ec:	f003 fb2c 	bl	8004d48 <HAL_SPI_TransmitReceive>
	if (wait_ready()) return 1;	/* Wait for card ready */
 80016f0:	f7ff ffa2 	bl	8001638 <wait_ready>
 80016f4:	b110      	cbz	r0, 80016fc <select+0x30>
 80016f6:	2001      	movs	r0, #1
}
 80016f8:	b005      	add	sp, #20
 80016fa:	bd30      	pop	{r4, r5, pc}
 80016fc:	9003      	str	r0, [sp, #12]
	deselect();
 80016fe:	f7ff ffc9 	bl	8001694 <deselect>
	return 0;	/* Timeout */
 8001702:	9803      	ldr	r0, [sp, #12]
}
 8001704:	b005      	add	sp, #20
 8001706:	bd30      	pop	{r4, r5, pc}
 8001708:	40010c00 	.word	0x40010c00
 800170c:	200000cc 	.word	0x200000cc
 8001710:	200000c8 	.word	0x200000c8
 8001714:	200005f8 	.word	0x200005f8

08001718 <send_cmd>:
{
 8001718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800171c:	4688      	mov	r8, r1
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 800171e:	0601      	lsls	r1, r0, #24
{
 8001720:	b083      	sub	sp, #12
 8001722:	4607      	mov	r7, r0
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 8001724:	f100 8081 	bmi.w	800182a <send_cmd+0x112>
	if (cmd != CMD12) {
 8001728:	2f0c      	cmp	r7, #12
 800172a:	d005      	beq.n	8001738 <send_cmd+0x20>
		deselect();
 800172c:	f7ff ffb2 	bl	8001694 <deselect>
		if (!select()) return 0xFF;
 8001730:	f7ff ffcc 	bl	80016cc <select>
 8001734:	2800      	cmp	r0, #0
 8001736:	d063      	beq.n	8001800 <send_cmd+0xe8>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001738:	2464      	movs	r4, #100	; 0x64
	traBuf[0] = val;
 800173a:	4d40      	ldr	r5, [pc, #256]	; (800183c <send_cmd+0x124>)
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800173c:	4e40      	ldr	r6, [pc, #256]	; (8001840 <send_cmd+0x128>)
	sd_tx(0x40 | cmd);				/* Start + Command index */
 800173e:	f047 0c40 	orr.w	ip, r7, #64	; 0x40
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001742:	4629      	mov	r1, r5
 8001744:	4632      	mov	r2, r6
 8001746:	2301      	movs	r3, #1
 8001748:	9400      	str	r4, [sp, #0]
 800174a:	483e      	ldr	r0, [pc, #248]	; (8001844 <send_cmd+0x12c>)
	traBuf[0] = val;
 800174c:	f885 c000 	strb.w	ip, [r5]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001750:	f003 fafa 	bl	8004d48 <HAL_SPI_TransmitReceive>
	sd_tx((BYTE)(arg >> 24));		/* Argument[31..24] */
 8001754:	ea4f 6c18 	mov.w	ip, r8, lsr #24
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001758:	4632      	mov	r2, r6
 800175a:	4629      	mov	r1, r5
 800175c:	2301      	movs	r3, #1
 800175e:	9400      	str	r4, [sp, #0]
 8001760:	4838      	ldr	r0, [pc, #224]	; (8001844 <send_cmd+0x12c>)
	sd_tx((BYTE)(arg >> 24));		/* Argument[31..24] */
 8001762:	f885 c000 	strb.w	ip, [r5]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001766:	f003 faef 	bl	8004d48 <HAL_SPI_TransmitReceive>
	sd_tx((BYTE)(arg >> 16));		/* Argument[23..16] */
 800176a:	ea4f 4c18 	mov.w	ip, r8, lsr #16
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800176e:	4632      	mov	r2, r6
 8001770:	4629      	mov	r1, r5
 8001772:	2301      	movs	r3, #1
 8001774:	9400      	str	r4, [sp, #0]
 8001776:	4833      	ldr	r0, [pc, #204]	; (8001844 <send_cmd+0x12c>)
	sd_tx((BYTE)(arg >> 16));		/* Argument[23..16] */
 8001778:	f885 c000 	strb.w	ip, [r5]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800177c:	f003 fae4 	bl	8004d48 <HAL_SPI_TransmitReceive>
	sd_tx((BYTE)(arg >> 8));		/* Argument[15..8] */
 8001780:	ea4f 2c18 	mov.w	ip, r8, lsr #8
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001784:	4632      	mov	r2, r6
 8001786:	4629      	mov	r1, r5
 8001788:	2301      	movs	r3, #1
 800178a:	9400      	str	r4, [sp, #0]
 800178c:	482d      	ldr	r0, [pc, #180]	; (8001844 <send_cmd+0x12c>)
	sd_tx((BYTE)(arg >> 8));		/* Argument[15..8] */
 800178e:	f885 c000 	strb.w	ip, [r5]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001792:	f003 fad9 	bl	8004d48 <HAL_SPI_TransmitReceive>
 8001796:	9400      	str	r4, [sp, #0]
 8001798:	4632      	mov	r2, r6
 800179a:	4629      	mov	r1, r5
 800179c:	2301      	movs	r3, #1
 800179e:	4829      	ldr	r0, [pc, #164]	; (8001844 <send_cmd+0x12c>)
	sd_tx((BYTE)arg);				/* Argument[7..0] */
 80017a0:	f885 8000 	strb.w	r8, [r5]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80017a4:	f003 fad0 	bl	8004d48 <HAL_SPI_TransmitReceive>
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) + Stop */
 80017a8:	b337      	cbz	r7, 80017f8 <send_cmd+0xe0>
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) Stop */
 80017aa:	2f08      	cmp	r7, #8
 80017ac:	d12c      	bne.n	8001808 <send_cmd+0xf0>
	traBuf[0] = val;
 80017ae:	2787      	movs	r7, #135	; 0x87
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80017b0:	2301      	movs	r3, #1
 80017b2:	9400      	str	r4, [sp, #0]
 80017b4:	4632      	mov	r2, r6
 80017b6:	4629      	mov	r1, r5
 80017b8:	4822      	ldr	r0, [pc, #136]	; (8001844 <send_cmd+0x12c>)
	traBuf[0] = val;
 80017ba:	702f      	strb	r7, [r5, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80017bc:	f003 fac4 	bl	8004d48 <HAL_SPI_TransmitReceive>
{
 80017c0:	240a      	movs	r4, #10
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80017c2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8001840 <send_cmd+0x128>
 80017c6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800183c <send_cmd+0x124>
 80017ca:	4f1e      	ldr	r7, [pc, #120]	; (8001844 <send_cmd+0x12c>)
 80017cc:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 80017ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	464a      	mov	r2, r9
 80017d6:	2301      	movs	r3, #1
 80017d8:	4641      	mov	r1, r8
 80017da:	4638      	mov	r0, r7
	traBuf[0] = val;
 80017dc:	f885 c000 	strb.w	ip, [r5]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80017e0:	f003 fab2 	bl	8004d48 <HAL_SPI_TransmitReceive>

	return ( recBuf[0] );
 80017e4:	7830      	ldrb	r0, [r6, #0]
 80017e6:	1e63      	subs	r3, r4, #1
	while ((res & 0x80) && --n);
 80017e8:	0602      	lsls	r2, r0, #24
 80017ea:	d502      	bpl.n	80017f2 <send_cmd+0xda>
 80017ec:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80017f0:	d1ec      	bne.n	80017cc <send_cmd+0xb4>
}
 80017f2:	b003      	add	sp, #12
 80017f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	traBuf[0] = val;
 80017f8:	2795      	movs	r7, #149	; 0x95
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80017fa:	9400      	str	r4, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	e7d9      	b.n	80017b4 <send_cmd+0x9c>
		if (!select()) return 0xFF;
 8001800:	20ff      	movs	r0, #255	; 0xff
}
 8001802:	b003      	add	sp, #12
 8001804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	traBuf[0] = val;
 8001808:	f04f 0801 	mov.w	r8, #1
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800180c:	9400      	str	r4, [sp, #0]
 800180e:	4643      	mov	r3, r8
 8001810:	4632      	mov	r2, r6
 8001812:	4629      	mov	r1, r5
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <send_cmd+0x12c>)
	traBuf[0] = val;
 8001816:	f885 8000 	strb.w	r8, [r5]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800181a:	f003 fa95 	bl	8004d48 <HAL_SPI_TransmitReceive>
	if (cmd == CMD12) sd_rx();		/* Skip a stuff byte when stop reading */
 800181e:	2f0c      	cmp	r7, #12
 8001820:	d1ce      	bne.n	80017c0 <send_cmd+0xa8>
	traBuf[0] = val;
 8001822:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001824:	9400      	str	r4, [sp, #0]
 8001826:	4643      	mov	r3, r8
 8001828:	e7c4      	b.n	80017b4 <send_cmd+0x9c>
		res = send_cmd(CMD55, 0);
 800182a:	2100      	movs	r1, #0
 800182c:	2037      	movs	r0, #55	; 0x37
 800182e:	f7ff ff73 	bl	8001718 <send_cmd>
		if (res > 1) return res;
 8001832:	2801      	cmp	r0, #1
 8001834:	d8dd      	bhi.n	80017f2 <send_cmd+0xda>
		cmd &= 0x7F;
 8001836:	f007 077f 	and.w	r7, r7, #127	; 0x7f
 800183a:	e775      	b.n	8001728 <send_cmd+0x10>
 800183c:	200000cc 	.word	0x200000cc
 8001840:	200000c8 	.word	0x200000c8
 8001844:	200005f8 	.word	0x200005f8

08001848 <rcvr_datablock>:
{
 8001848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800184c:	4c2d      	ldr	r4, [pc, #180]	; (8001904 <rcvr_datablock+0xbc>)
 800184e:	4d2e      	ldr	r5, [pc, #184]	; (8001908 <rcvr_datablock+0xc0>)
 8001850:	b083      	sub	sp, #12
 8001852:	4606      	mov	r6, r0
 8001854:	468b      	mov	fp, r1
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001856:	46a2      	mov	sl, r4
 8001858:	46a9      	mov	r9, r5
{
 800185a:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800185e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800190c <rcvr_datablock+0xc4>
 8001862:	e006      	b.n	8001872 <rcvr_datablock+0x2a>
 8001864:	3f01      	subs	r7, #1
		__delay_us(1000);
 8001866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800186a:	b2bf      	uxth	r7, r7
 800186c:	f7ff fc38 	bl	80010e0 <Delay_NOP>
	for (tmr = 2000; tmr; tmr--) {	/* Wait for data packet in timeout of 200ms */
 8001870:	b187      	cbz	r7, 8001894 <rcvr_datablock+0x4c>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001872:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001874:	f04f 0cff 	mov.w	ip, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	464a      	mov	r2, r9
 800187c:	2301      	movs	r3, #1
 800187e:	4651      	mov	r1, sl
 8001880:	4640      	mov	r0, r8
	traBuf[0] = val;
 8001882:	f884 c000 	strb.w	ip, [r4]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001886:	f003 fa5f 	bl	8004d48 <HAL_SPI_TransmitReceive>
	return ( recBuf[0] );
 800188a:	782b      	ldrb	r3, [r5, #0]
		if (token != 0xFF) break;
 800188c:	2bff      	cmp	r3, #255	; 0xff
 800188e:	d0e9      	beq.n	8001864 <rcvr_datablock+0x1c>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
 8001890:	2bfe      	cmp	r3, #254	; 0xfe
 8001892:	d003      	beq.n	800189c <rcvr_datablock+0x54>
 8001894:	2000      	movs	r0, #0
}
 8001896:	b003      	add	sp, #12
 8001898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800189c:	f10b 37ff 	add.w	r7, fp, #4294967295
 80018a0:	b2bf      	uxth	r7, r7
 80018a2:	3701      	adds	r7, #1
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80018a4:	f8df b060 	ldr.w	fp, [pc, #96]	; 8001908 <rcvr_datablock+0xc0>
 80018a8:	f8df a058 	ldr.w	sl, [pc, #88]	; 8001904 <rcvr_datablock+0xbc>
 80018ac:	4437      	add	r7, r6
 80018ae:	f04f 0964 	mov.w	r9, #100	; 0x64
	traBuf[0] = val;
 80018b2:	f04f 08ff 	mov.w	r8, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80018b6:	2301      	movs	r3, #1
 80018b8:	f8cd 9000 	str.w	r9, [sp]
 80018bc:	465a      	mov	r2, fp
 80018be:	4651      	mov	r1, sl
 80018c0:	4812      	ldr	r0, [pc, #72]	; (800190c <rcvr_datablock+0xc4>)
	traBuf[0] = val;
 80018c2:	f884 8000 	strb.w	r8, [r4]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80018c6:	f003 fa3f 	bl	8004d48 <HAL_SPI_TransmitReceive>
	return ( recBuf[0] );
 80018ca:	782b      	ldrb	r3, [r5, #0]
		*buff++ = sd_rx();		/* Receive the data block into buffer */
 80018cc:	f806 3b01 	strb.w	r3, [r6], #1
	while (--btr);
 80018d0:	42b7      	cmp	r7, r6
 80018d2:	d1ec      	bne.n	80018ae <rcvr_datablock+0x66>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80018d4:	f8cd 9000 	str.w	r9, [sp]
 80018d8:	2301      	movs	r3, #1
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <rcvr_datablock+0xc0>)
 80018dc:	4909      	ldr	r1, [pc, #36]	; (8001904 <rcvr_datablock+0xbc>)
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <rcvr_datablock+0xc4>)
	traBuf[0] = val;
 80018e0:	f884 8000 	strb.w	r8, [r4]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80018e4:	f003 fa30 	bl	8004d48 <HAL_SPI_TransmitReceive>
 80018e8:	f8cd 9000 	str.w	r9, [sp]
 80018ec:	2301      	movs	r3, #1
 80018ee:	4a06      	ldr	r2, [pc, #24]	; (8001908 <rcvr_datablock+0xc0>)
 80018f0:	4904      	ldr	r1, [pc, #16]	; (8001904 <rcvr_datablock+0xbc>)
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <rcvr_datablock+0xc4>)
	traBuf[0] = val;
 80018f4:	f884 8000 	strb.w	r8, [r4]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80018f8:	f003 fa26 	bl	8004d48 <HAL_SPI_TransmitReceive>
 80018fc:	2001      	movs	r0, #1
}
 80018fe:	b003      	add	sp, #12
 8001900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001904:	200000cc 	.word	0x200000cc
 8001908:	200000c8 	.word	0x200000c8
 800190c:	200005f8 	.word	0x200005f8

08001910 <xmit_datablock>:
{
 8001910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001914:	b083      	sub	sp, #12
 8001916:	4604      	mov	r4, r0
 8001918:	460d      	mov	r5, r1
	if (!wait_ready()) return 0;
 800191a:	f7ff fe8d 	bl	8001638 <wait_ready>
 800191e:	b910      	cbnz	r0, 8001926 <xmit_datablock+0x16>
}
 8001920:	b003      	add	sp, #12
 8001922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001926:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001928:	4e24      	ldr	r6, [pc, #144]	; (80019bc <xmit_datablock+0xac>)
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4631      	mov	r1, r6
 800192e:	2301      	movs	r3, #1
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <xmit_datablock+0xb0>)
 8001932:	4824      	ldr	r0, [pc, #144]	; (80019c4 <xmit_datablock+0xb4>)
	traBuf[0] = val;
 8001934:	7035      	strb	r5, [r6, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001936:	f003 fa07 	bl	8004d48 <HAL_SPI_TransmitReceive>
	if (token != 0xFD) {	/* Is data token */
 800193a:	2dfd      	cmp	r5, #253	; 0xfd
 800193c:	d03a      	beq.n	80019b4 <xmit_datablock+0xa4>
 800193e:	f8df b080 	ldr.w	fp, [pc, #128]	; 80019c0 <xmit_datablock+0xb0>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001942:	46b2      	mov	sl, r6
 8001944:	46d9      	mov	r9, fp
 8001946:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80019c4 <xmit_datablock+0xb4>
 800194a:	f504 7700 	add.w	r7, r4, #512	; 0x200
 800194e:	2564      	movs	r5, #100	; 0x64
			sd_tx(*buff++);				/* Xmit the data block to the MMC */
 8001950:	f814 cb01 	ldrb.w	ip, [r4], #1
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001954:	2301      	movs	r3, #1
 8001956:	9500      	str	r5, [sp, #0]
 8001958:	464a      	mov	r2, r9
 800195a:	4651      	mov	r1, sl
 800195c:	4640      	mov	r0, r8
	traBuf[0] = val;
 800195e:	f886 c000 	strb.w	ip, [r6]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001962:	f003 f9f1 	bl	8004d48 <HAL_SPI_TransmitReceive>
		while (--i);
 8001966:	42bc      	cmp	r4, r7
 8001968:	d1f1      	bne.n	800194e <xmit_datablock+0x3e>
	traBuf[0] = val;
 800196a:	24ff      	movs	r4, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 800196c:	9500      	str	r5, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <xmit_datablock+0xb0>)
 8001972:	4912      	ldr	r1, [pc, #72]	; (80019bc <xmit_datablock+0xac>)
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <xmit_datablock+0xb4>)
	traBuf[0] = val;
 8001976:	7034      	strb	r4, [r6, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001978:	f003 f9e6 	bl	8004d48 <HAL_SPI_TransmitReceive>
 800197c:	9500      	str	r5, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <xmit_datablock+0xb0>)
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <xmit_datablock+0xac>)
 8001984:	480f      	ldr	r0, [pc, #60]	; (80019c4 <xmit_datablock+0xb4>)
	traBuf[0] = val;
 8001986:	7034      	strb	r4, [r6, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001988:	f003 f9de 	bl	8004d48 <HAL_SPI_TransmitReceive>
 800198c:	9500      	str	r5, [sp, #0]
 800198e:	2301      	movs	r3, #1
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <xmit_datablock+0xb0>)
 8001992:	490a      	ldr	r1, [pc, #40]	; (80019bc <xmit_datablock+0xac>)
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <xmit_datablock+0xb4>)
	traBuf[0] = val;
 8001996:	7034      	strb	r4, [r6, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001998:	f003 f9d6 	bl	8004d48 <HAL_SPI_TransmitReceive>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
 800199c:	f89b 0000 	ldrb.w	r0, [fp]
 80019a0:	f000 001f 	and.w	r0, r0, #31
	if (!wait_ready()) return 0;
 80019a4:	f1a0 0005 	sub.w	r0, r0, #5
 80019a8:	fab0 f080 	clz	r0, r0
 80019ac:	0940      	lsrs	r0, r0, #5
}
 80019ae:	b003      	add	sp, #12
 80019b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return 1;
 80019b4:	2001      	movs	r0, #1
}
 80019b6:	b003      	add	sp, #12
 80019b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019bc:	200000cc 	.word	0x200000cc
 80019c0:	200000c8 	.word	0x200000c8
 80019c4:	200005f8 	.word	0x200005f8

080019c8 <disk_initialize>:
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
 80019c8:	bb48      	cbnz	r0, 8001a1e <disk_initialize+0x56>
{
 80019ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 80019ce:	4d6e      	ldr	r5, [pc, #440]	; (8001b88 <disk_initialize+0x1c0>)
{
 80019d0:	b087      	sub	sp, #28
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
 80019d2:	7828      	ldrb	r0, [r5, #0]
 80019d4:	0782      	lsls	r2, r0, #30
 80019d6:	d41f      	bmi.n	8001a18 <disk_initialize+0x50>
 80019d8:	4c6c      	ldr	r4, [pc, #432]	; (8001b8c <disk_initialize+0x1c4>)
 80019da:	260a      	movs	r6, #10
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80019dc:	46a2      	mov	sl, r4
 80019de:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8001b94 <disk_initialize+0x1cc>
 80019e2:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001b98 <disk_initialize+0x1d0>
 80019e6:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 80019e8:	27ff      	movs	r7, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	464a      	mov	r2, r9
 80019ee:	2301      	movs	r3, #1
 80019f0:	4651      	mov	r1, sl
 80019f2:	4640      	mov	r0, r8
	traBuf[0] = val;
 80019f4:	7027      	strb	r7, [r4, #0]
 80019f6:	3e01      	subs	r6, #1
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 80019f8:	f003 f9a6 	bl	8004d48 <HAL_SPI_TransmitReceive>
	for (n = 10; n; n--) sd_rx();	/* 80 dummy clocks */
 80019fc:	403e      	ands	r6, r7
 80019fe:	d1f2      	bne.n	80019e6 <disk_initialize+0x1e>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 8001a00:	4631      	mov	r1, r6
 8001a02:	4630      	mov	r0, r6
 8001a04:	f7ff fe88 	bl	8001718 <send_cmd>
 8001a08:	2801      	cmp	r0, #1
 8001a0a:	4607      	mov	r7, r0
 8001a0c:	d009      	beq.n	8001a22 <disk_initialize+0x5a>
	CardType = ty;
 8001a0e:	4b60      	ldr	r3, [pc, #384]	; (8001b90 <disk_initialize+0x1c8>)
 8001a10:	701e      	strb	r6, [r3, #0]
	deselect();
 8001a12:	f7ff fe3f 	bl	8001694 <deselect>
 8001a16:	7828      	ldrb	r0, [r5, #0]
}
 8001a18:	b007      	add	sp, #28
 8001a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
 8001a1e:	2001      	movs	r0, #1
}
 8001a20:	4770      	bx	lr
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8001a22:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a26:	2008      	movs	r0, #8
 8001a28:	f7ff fe76 	bl	8001718 <send_cmd>
 8001a2c:	2801      	cmp	r0, #1
 8001a2e:	d126      	bne.n	8001a7e <disk_initialize+0xb6>
 8001a30:	4f58      	ldr	r7, [pc, #352]	; (8001b94 <disk_initialize+0x1cc>)
 8001a32:	ab05      	add	r3, sp, #20
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001a34:	46bb      	mov	fp, r7
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8001a36:	461e      	mov	r6, r3
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001a38:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8001b8c <disk_initialize+0x1c4>
 8001a3c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8001b98 <disk_initialize+0x1d0>
 8001a40:	9303      	str	r3, [sp, #12]
 8001a42:	f10d 0a18 	add.w	sl, sp, #24
 8001a46:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001a48:	f04f 0cff 	mov.w	ip, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	465a      	mov	r2, fp
 8001a50:	2301      	movs	r3, #1
 8001a52:	4649      	mov	r1, r9
 8001a54:	4640      	mov	r0, r8
	traBuf[0] = val;
 8001a56:	f884 c000 	strb.w	ip, [r4]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001a5a:	f003 f975 	bl	8004d48 <HAL_SPI_TransmitReceive>
			for (n = 0; n < 4; n++) ocr[n] = sd_rx();	/* Get trailing return value of R7 resp */
 8001a5e:	783b      	ldrb	r3, [r7, #0]
 8001a60:	f806 3b01 	strb.w	r3, [r6], #1
 8001a64:	45b2      	cmp	sl, r6
 8001a66:	d1ee      	bne.n	8001a46 <disk_initialize+0x7e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
 8001a68:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d03a      	beq.n	8001ae6 <disk_initialize+0x11e>
	CardType = ty;
 8001a70:	2200      	movs	r2, #0
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <disk_initialize+0x1c8>)
 8001a74:	701a      	strb	r2, [r3, #0]
	deselect();
 8001a76:	f7ff fe0d 	bl	8001694 <deselect>
 8001a7a:	7828      	ldrb	r0, [r5, #0]
 8001a7c:	e7cc      	b.n	8001a18 <disk_initialize+0x50>
			if (send_cmd(ACMD41, 0) <= 1) 	{
 8001a7e:	4631      	mov	r1, r6
 8001a80:	20a9      	movs	r0, #169	; 0xa9
 8001a82:	f7ff fe49 	bl	8001718 <send_cmd>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 8001a86:	2801      	cmp	r0, #1
 8001a88:	bf96      	itet	ls
 8001a8a:	27a9      	movls	r7, #169	; 0xa9
 8001a8c:	f04f 0801 	movhi.w	r8, #1
 8001a90:	f04f 0802 	movls.w	r8, #2
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 8001a94:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001a98:	e005      	b.n	8001aa6 <disk_initialize+0xde>
 8001a9a:	3c01      	subs	r4, #1
				__delay_ms(1);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	b2a4      	uxth	r4, r4
 8001aa0:	f001 fe0c 	bl	80036bc <HAL_Delay>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
 8001aa4:	b1cc      	cbz	r4, 8001ada <disk_initialize+0x112>
				if (send_cmd(cmd, 0) == 0) break;
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4638      	mov	r0, r7
 8001aaa:	f7ff fe35 	bl	8001718 <send_cmd>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d1f3      	bne.n	8001a9a <disk_initialize+0xd2>
 8001ab2:	4606      	mov	r6, r0
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 8001ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab8:	2010      	movs	r0, #16
 8001aba:	f7ff fe2d 	bl	8001718 <send_cmd>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d1a5      	bne.n	8001a0e <disk_initialize+0x46>
	CardType = ty;
 8001ac2:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <disk_initialize+0x1c8>)
 8001ac4:	f883 8000 	strb.w	r8, [r3]
	deselect();
 8001ac8:	f7ff fde4 	bl	8001694 <deselect>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
 8001acc:	7828      	ldrb	r0, [r5, #0]
 8001ace:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8001ad2:	7028      	strb	r0, [r5, #0]
}
 8001ad4:	b007      	add	sp, #28
 8001ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	CardType = ty;
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <disk_initialize+0x1c8>)
 8001adc:	701c      	strb	r4, [r3, #0]
	deselect();
 8001ade:	f7ff fdd9 	bl	8001694 <deselect>
 8001ae2:	7828      	ldrb	r0, [r5, #0]
 8001ae4:	e798      	b.n	8001a18 <disk_initialize+0x50>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
 8001ae6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001aea:	2baa      	cmp	r3, #170	; 0xaa
 8001aec:	d1c0      	bne.n	8001a70 <disk_initialize+0xa8>
 8001aee:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8001af2:	4633      	mov	r3, r6
 8001af4:	4646      	mov	r6, r8
 8001af6:	4698      	mov	r8, r3
 8001af8:	e006      	b.n	8001b08 <disk_initialize+0x140>
					__delay_ms(1);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f001 fdde 	bl	80036bc <HAL_Delay>
 8001b00:	1e73      	subs	r3, r6, #1
 8001b02:	b29e      	uxth	r6, r3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
 8001b04:	2e00      	cmp	r6, #0
 8001b06:	d038      	beq.n	8001b7a <disk_initialize+0x1b2>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
 8001b08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b0c:	20a9      	movs	r0, #169	; 0xa9
 8001b0e:	f7ff fe03 	bl	8001718 <send_cmd>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d1f1      	bne.n	8001afa <disk_initialize+0x132>
 8001b16:	4681      	mov	r9, r0
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8001b18:	4601      	mov	r1, r0
 8001b1a:	203a      	movs	r0, #58	; 0x3a
 8001b1c:	4646      	mov	r6, r8
 8001b1e:	f7ff fdfb 	bl	8001718 <send_cmd>
 8001b22:	b130      	cbz	r0, 8001b32 <disk_initialize+0x16a>
	CardType = ty;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <disk_initialize+0x1c8>)
 8001b26:	f883 9000 	strb.w	r9, [r3]
	deselect();
 8001b2a:	f7ff fdb3 	bl	8001694 <deselect>
 8001b2e:	7828      	ldrb	r0, [r5, #0]
 8001b30:	e772      	b.n	8001a18 <disk_initialize+0x50>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001b32:	f8df a060 	ldr.w	sl, [pc, #96]	; 8001b94 <disk_initialize+0x1cc>
 8001b36:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8001b8c <disk_initialize+0x1c4>
 8001b3a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001b98 <disk_initialize+0x1d0>
 8001b3e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001b42:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001b44:	f04f 0cff 	mov.w	ip, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4652      	mov	r2, sl
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4649      	mov	r1, r9
 8001b50:	4640      	mov	r0, r8
	traBuf[0] = val;
 8001b52:	f884 c000 	strb.w	ip, [r4]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001b56:	f003 f8f7 	bl	8004d48 <HAL_SPI_TransmitReceive>
					for (n = 0; n < 4; n++) ocr[n] = sd_rx();
 8001b5a:	783b      	ldrb	r3, [r7, #0]
 8001b5c:	f80b 3b01 	strb.w	r3, [fp], #1
 8001b60:	45b3      	cmp	fp, r6
 8001b62:	d1ee      	bne.n	8001b42 <disk_initialize+0x17a>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 8001b64:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001b68:	065b      	lsls	r3, r3, #25
	CardType = ty;
 8001b6a:	bf4c      	ite	mi
 8001b6c:	220c      	movmi	r2, #12
 8001b6e:	2204      	movpl	r2, #4
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <disk_initialize+0x1c8>)
 8001b72:	701a      	strb	r2, [r3, #0]
	deselect();
 8001b74:	f7ff fd8e 	bl	8001694 <deselect>
 8001b78:	e7a8      	b.n	8001acc <disk_initialize+0x104>
	CardType = ty;
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <disk_initialize+0x1c8>)
 8001b7c:	701e      	strb	r6, [r3, #0]
	deselect();
 8001b7e:	f7ff fd89 	bl	8001694 <deselect>
 8001b82:	7828      	ldrb	r0, [r5, #0]
 8001b84:	e748      	b.n	8001a18 <disk_initialize+0x50>
 8001b86:	bf00      	nop
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	200000cc 	.word	0x200000cc
 8001b90:	200000c4 	.word	0x200000c4
 8001b94:	200000c8 	.word	0x200000c8
 8001b98:	200005f8 	.word	0x200005f8

08001b9c <disk_status>:
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
 8001b9c:	b910      	cbnz	r0, 8001ba4 <disk_status+0x8>
	return Stat;
 8001b9e:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <disk_status+0xc>)
 8001ba0:	7818      	ldrb	r0, [r3, #0]
 8001ba2:	4770      	bx	lr
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
 8001ba4:	2001      	movs	r0, #1
}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000004 	.word	0x20000004

08001bac <disk_read>:
{
 8001bac:	b570      	push	{r4, r5, r6, lr}
	if (pdrv || !count) return RES_PARERR;
 8001bae:	b9c8      	cbnz	r0, 8001be4 <disk_read+0x38>
 8001bb0:	461c      	mov	r4, r3
 8001bb2:	b1bb      	cbz	r3, 8001be4 <disk_read+0x38>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <disk_read+0x6c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	07d8      	lsls	r0, r3, #31
 8001bba:	d42a      	bmi.n	8001c12 <disk_read+0x66>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <disk_read+0x70>)
 8001bbe:	460d      	mov	r5, r1
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	071b      	lsls	r3, r3, #28
 8001bc4:	bf58      	it	pl
 8001bc6:	0252      	lslpl	r2, r2, #9
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
 8001bc8:	2c02      	cmp	r4, #2
 8001bca:	bf34      	ite	cc
 8001bcc:	2611      	movcc	r6, #17
 8001bce:	2612      	movcs	r6, #18
	if (send_cmd(cmd, sector) == 0) {
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f7ff fda0 	bl	8001718 <send_cmd>
 8001bd8:	b150      	cbz	r0, 8001bf0 <disk_read+0x44>
 8001bda:	2401      	movs	r4, #1
	deselect();
 8001bdc:	f7ff fd5a 	bl	8001694 <deselect>
}
 8001be0:	4620      	mov	r0, r4
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
	if (pdrv || !count) return RES_PARERR;
 8001be4:	2404      	movs	r4, #4
}
 8001be6:	4620      	mov	r0, r4
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
			buff += 512;
 8001bea:	f505 7500 	add.w	r5, r5, #512	; 0x200
		} while (--count);
 8001bee:	b14c      	cbz	r4, 8001c04 <disk_read+0x58>
			if (!rcvr_datablock(buff, 512)) break;
 8001bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	f7ff fe27 	bl	8001848 <rcvr_datablock>
		} while (--count);
 8001bfa:	3c01      	subs	r4, #1
 8001bfc:	b2a4      	uxth	r4, r4
			if (!rcvr_datablock(buff, 512)) break;
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d1f3      	bne.n	8001bea <disk_read+0x3e>
 8001c02:	2401      	movs	r4, #1
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
 8001c04:	2e12      	cmp	r6, #18
 8001c06:	d1e9      	bne.n	8001bdc <disk_read+0x30>
 8001c08:	2100      	movs	r1, #0
 8001c0a:	200c      	movs	r0, #12
 8001c0c:	f7ff fd84 	bl	8001718 <send_cmd>
 8001c10:	e7e4      	b.n	8001bdc <disk_read+0x30>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c12:	2403      	movs	r4, #3
}
 8001c14:	4620      	mov	r0, r4
 8001c16:	bd70      	pop	{r4, r5, r6, pc}
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	200000c4 	.word	0x200000c4

08001c20 <disk_write>:
{
 8001c20:	b530      	push	{r4, r5, lr}
 8001c22:	b083      	sub	sp, #12
	if (pdrv || !count) return RES_PARERR;
 8001c24:	b9e8      	cbnz	r0, 8001c62 <disk_write+0x42>
 8001c26:	461c      	mov	r4, r3
 8001c28:	b1db      	cbz	r3, 8001c62 <disk_write+0x42>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <disk_write+0xb0>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	07dd      	lsls	r5, r3, #31
 8001c30:	d430      	bmi.n	8001c94 <disk_write+0x74>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001c32:	0758      	lsls	r0, r3, #29
 8001c34:	d432      	bmi.n	8001c9c <disk_write+0x7c>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
 8001c36:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <disk_write+0xb4>)
 8001c38:	460d      	mov	r5, r1
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	0719      	lsls	r1, r3, #28
 8001c3e:	bf58      	it	pl
 8001c40:	0252      	lslpl	r2, r2, #9
	if (count == 1) {	/* Single block write */
 8001c42:	2c01      	cmp	r4, #1
 8001c44:	d035      	beq.n	8001cb2 <disk_write+0x92>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 8001c46:	f013 0f06 	tst.w	r3, #6
 8001c4a:	d12b      	bne.n	8001ca4 <disk_write+0x84>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	2019      	movs	r0, #25
 8001c50:	f7ff fd62 	bl	8001718 <send_cmd>
 8001c54:	b168      	cbz	r0, 8001c72 <disk_write+0x52>
 8001c56:	2401      	movs	r4, #1
	deselect();
 8001c58:	f7ff fd1c 	bl	8001694 <deselect>
}
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	b003      	add	sp, #12
 8001c60:	bd30      	pop	{r4, r5, pc}
	if (pdrv || !count) return RES_PARERR;
 8001c62:	2404      	movs	r4, #4
}
 8001c64:	4620      	mov	r0, r4
 8001c66:	b003      	add	sp, #12
 8001c68:	bd30      	pop	{r4, r5, pc}
			} while (--count);
 8001c6a:	b29c      	uxth	r4, r3
				buff += 512;
 8001c6c:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8001c70:	b134      	cbz	r4, 8001c80 <disk_write+0x60>
				if (!xmit_datablock(buff, 0xFC)) break;
 8001c72:	21fc      	movs	r1, #252	; 0xfc
 8001c74:	4628      	mov	r0, r5
 8001c76:	f7ff fe4b 	bl	8001910 <xmit_datablock>
			} while (--count);
 8001c7a:	1e63      	subs	r3, r4, #1
				if (!xmit_datablock(buff, 0xFC)) break;
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d1f4      	bne.n	8001c6a <disk_write+0x4a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 8001c80:	21fd      	movs	r1, #253	; 0xfd
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7ff fe44 	bl	8001910 <xmit_datablock>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d0e4      	beq.n	8001c56 <disk_write+0x36>
 8001c8c:	3400      	adds	r4, #0
 8001c8e:	bf18      	it	ne
 8001c90:	2401      	movne	r4, #1
 8001c92:	e7e1      	b.n	8001c58 <disk_write+0x38>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c94:	2403      	movs	r4, #3
}
 8001c96:	4620      	mov	r0, r4
 8001c98:	b003      	add	sp, #12
 8001c9a:	bd30      	pop	{r4, r5, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001c9c:	2402      	movs	r4, #2
}
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	b003      	add	sp, #12
 8001ca2:	bd30      	pop	{r4, r5, pc}
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	2097      	movs	r0, #151	; 0x97
 8001ca8:	9201      	str	r2, [sp, #4]
 8001caa:	f7ff fd35 	bl	8001718 <send_cmd>
 8001cae:	9a01      	ldr	r2, [sp, #4]
 8001cb0:	e7cc      	b.n	8001c4c <disk_write+0x2c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	2018      	movs	r0, #24
 8001cb6:	f7ff fd2f 	bl	8001718 <send_cmd>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d1cb      	bne.n	8001c56 <disk_write+0x36>
			&& xmit_datablock(buff, 0xFE))
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	21fe      	movs	r1, #254	; 0xfe
 8001cc2:	f7ff fe25 	bl	8001910 <xmit_datablock>
 8001cc6:	fab0 f480 	clz	r4, r0
 8001cca:	0964      	lsrs	r4, r4, #5
 8001ccc:	e7c4      	b.n	8001c58 <disk_write+0x38>
 8001cce:	bf00      	nop
 8001cd0:	20000004 	.word	0x20000004
 8001cd4:	200000c4 	.word	0x200000c4

08001cd8 <disk_ioctl>:
{
 8001cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cdc:	b086      	sub	sp, #24
	if (pdrv) return RES_PARERR;
 8001cde:	b9b0      	cbnz	r0, 8001d0e <disk_ioctl+0x36>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ce0:	4b94      	ldr	r3, [pc, #592]	; (8001f34 <disk_ioctl+0x25c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	07db      	lsls	r3, r3, #31
 8001ce6:	d40d      	bmi.n	8001d04 <disk_ioctl+0x2c>
 8001ce8:	4615      	mov	r5, r2
	switch (cmd) {
 8001cea:	290e      	cmp	r1, #14
 8001cec:	f200 80cd 	bhi.w	8001e8a <disk_ioctl+0x1b2>
 8001cf0:	e8df f001 	tbb	[pc, r1]
 8001cf4:	3bcb72a4 	.word	0x3bcb72a4
 8001cf8:	cbcbcbcb 	.word	0xcbcbcbcb
 8001cfc:	afbecbcb 	.word	0xafbecbcb
 8001d00:	1bc3      	.short	0x1bc3
 8001d02:	12          	.byte	0x12
 8001d03:	00          	.byte	0x00
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d04:	2403      	movs	r4, #3
}
 8001d06:	4620      	mov	r0, r4
 8001d08:	b006      	add	sp, #24
 8001d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (pdrv) return RES_PARERR;
 8001d0e:	2404      	movs	r4, #4
}
 8001d10:	4620      	mov	r0, r4
 8001d12:	b006      	add	sp, #24
 8001d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
 8001d18:	2100      	movs	r1, #0
 8001d1a:	208d      	movs	r0, #141	; 0x8d
 8001d1c:	f7ff fcfc 	bl	8001718 <send_cmd>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	f000 80d8 	beq.w	8001ed6 <disk_ioctl+0x1fe>
	res = RES_ERROR;
 8001d26:	2401      	movs	r4, #1
 8001d28:	e08d      	b.n	8001e46 <disk_ioctl+0x16e>
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	203a      	movs	r0, #58	; 0x3a
 8001d2e:	f7ff fcf3 	bl	8001718 <send_cmd>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d1f7      	bne.n	8001d26 <disk_ioctl+0x4e>
 8001d36:	4f80      	ldr	r7, [pc, #512]	; (8001f38 <disk_ioctl+0x260>)
 8001d38:	4c80      	ldr	r4, [pc, #512]	; (8001f3c <disk_ioctl+0x264>)
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001d3a:	46ba      	mov	sl, r7
 8001d3c:	46a1      	mov	r9, r4
 8001d3e:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8001f44 <disk_ioctl+0x26c>
 8001d42:	1d2e      	adds	r6, r5, #4
 8001d44:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001d46:	f04f 0cff 	mov.w	ip, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4651      	mov	r1, sl
 8001d52:	4640      	mov	r0, r8
	traBuf[0] = val;
 8001d54:	f887 c000 	strb.w	ip, [r7]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001d58:	f002 fff6 	bl	8004d48 <HAL_SPI_TransmitReceive>
	return ( recBuf[0] );
 8001d5c:	7823      	ldrb	r3, [r4, #0]
			for (n = 4; n; n--) *ptr++ = sd_rx();
 8001d5e:	f805 3b01 	strb.w	r3, [r5], #1
 8001d62:	42ae      	cmp	r6, r5
 8001d64:	d1ee      	bne.n	8001d44 <disk_ioctl+0x6c>
			res = RES_OK;
 8001d66:	2400      	movs	r4, #0
 8001d68:	e06d      	b.n	8001e46 <disk_ioctl+0x16e>
		if (CardType & CT_SD2) {	/* SDv2? */
 8001d6a:	4e75      	ldr	r6, [pc, #468]	; (8001f40 <disk_ioctl+0x268>)
 8001d6c:	7831      	ldrb	r1, [r6, #0]
 8001d6e:	f011 0104 	ands.w	r1, r1, #4
 8001d72:	f000 808c 	beq.w	8001e8e <disk_ioctl+0x1b6>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8001d76:	2100      	movs	r1, #0
 8001d78:	208d      	movs	r0, #141	; 0x8d
 8001d7a:	f7ff fccd 	bl	8001718 <send_cmd>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d1d1      	bne.n	8001d26 <disk_ioctl+0x4e>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001d82:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001d84:	24ff      	movs	r4, #255	; 0xff
 8001d86:	4f6c      	ldr	r7, [pc, #432]	; (8001f38 <disk_ioctl+0x260>)
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4639      	mov	r1, r7
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	4a6b      	ldr	r2, [pc, #428]	; (8001f3c <disk_ioctl+0x264>)
 8001d90:	486c      	ldr	r0, [pc, #432]	; (8001f44 <disk_ioctl+0x26c>)
	traBuf[0] = val;
 8001d92:	703c      	strb	r4, [r7, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001d94:	f002 ffd8 	bl	8004d48 <HAL_SPI_TransmitReceive>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8001d98:	2110      	movs	r1, #16
 8001d9a:	a802      	add	r0, sp, #8
 8001d9c:	f7ff fd54 	bl	8001848 <rcvr_datablock>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d0c0      	beq.n	8001d26 <disk_ioctl+0x4e>
 8001da4:	2430      	movs	r4, #48	; 0x30
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001da6:	46ba      	mov	sl, r7
 8001da8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001f3c <disk_ioctl+0x264>
 8001dac:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8001f44 <disk_ioctl+0x26c>
 8001db0:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001db2:	26ff      	movs	r6, #255	; 0xff
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	464a      	mov	r2, r9
 8001db8:	2301      	movs	r3, #1
 8001dba:	4651      	mov	r1, sl
 8001dbc:	4640      	mov	r0, r8
	traBuf[0] = val;
 8001dbe:	703e      	strb	r6, [r7, #0]
 8001dc0:	3c01      	subs	r4, #1
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001dc2:	f002 ffc1 	bl	8004d48 <HAL_SPI_TransmitReceive>
					for (n = 64 - 16; n; n--) sd_rx();	/* Purge trailing data */
 8001dc6:	4034      	ands	r4, r6
 8001dc8:	d1f2      	bne.n	8001db0 <disk_ioctl+0xd8>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8001dca:	2310      	movs	r3, #16
 8001dcc:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8001dd0:	0912      	lsrs	r2, r2, #4
 8001dd2:	4093      	lsls	r3, r2
 8001dd4:	602b      	str	r3, [r5, #0]
 8001dd6:	e036      	b.n	8001e46 <disk_ioctl+0x16e>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2009      	movs	r0, #9
 8001ddc:	f7ff fc9c 	bl	8001718 <send_cmd>
 8001de0:	4604      	mov	r4, r0
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d19f      	bne.n	8001d26 <disk_ioctl+0x4e>
 8001de6:	2110      	movs	r1, #16
 8001de8:	a802      	add	r0, sp, #8
 8001dea:	f7ff fd2d 	bl	8001848 <rcvr_datablock>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d099      	beq.n	8001d26 <disk_ioctl+0x4e>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8001df2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001df6:	099b      	lsrs	r3, r3, #6
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d07f      	beq.n	8001efc <disk_ioctl+0x224>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001dfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001e00:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8001e04:	f89d 000e 	ldrb.w	r0, [sp, #14]
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e08:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001e0c:	f89d 1011 	ldrb.w	r1, [sp, #17]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	eb03 1396 	add.w	r3, r3, r6, lsr #6
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e16:	f89d 6012 	ldrb.w	r6, [sp, #18]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001e1a:	0280      	lsls	r0, r0, #10
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e1c:	f002 020f 	and.w	r2, r2, #15
 8001e20:	0049      	lsls	r1, r1, #1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001e22:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e26:	eb02 12d6 	add.w	r2, r2, r6, lsr #7
 8001e2a:	f001 0106 	and.w	r1, r1, #6
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001e2e:	4403      	add	r3, r0
				*(DWORD*)buff = csize << (n - 9);
 8001e30:	440a      	add	r2, r1
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001e32:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 8001e34:	3a07      	subs	r2, #7
 8001e36:	4093      	lsls	r3, r2
 8001e38:	602b      	str	r3, [r5, #0]
 8001e3a:	e004      	b.n	8001e46 <disk_ioctl+0x16e>
		if (select()) res = RES_OK;
 8001e3c:	f7ff fc46 	bl	80016cc <select>
 8001e40:	fab0 f480 	clz	r4, r0
 8001e44:	0964      	lsrs	r4, r4, #5
	deselect();
 8001e46:	f7ff fc25 	bl	8001694 <deselect>
}
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	b006      	add	sp, #24
 8001e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
 8001e52:	2100      	movs	r1, #0
 8001e54:	2009      	movs	r0, #9
 8001e56:	f7ff fc5f 	bl	8001718 <send_cmd>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	f47f af63 	bne.w	8001d26 <disk_ioctl+0x4e>
			&& rcvr_datablock(ptr, 16))
 8001e60:	4628      	mov	r0, r5
 8001e62:	2110      	movs	r1, #16
 8001e64:	f7ff fcf0 	bl	8001848 <rcvr_datablock>
		if (select()) res = RES_OK;
 8001e68:	fab0 f480 	clz	r4, r0
 8001e6c:	0964      	lsrs	r4, r4, #5
 8001e6e:	e7ea      	b.n	8001e46 <disk_ioctl+0x16e>
		*ptr = CardType;
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <disk_ioctl+0x268>)
		res = RES_OK;
 8001e72:	2400      	movs	r4, #0
		*ptr = CardType;
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	7013      	strb	r3, [r2, #0]
		break;
 8001e78:	e7e5      	b.n	8001e46 <disk_ioctl+0x16e>
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	200a      	movs	r0, #10
 8001e7e:	f7ff fc4b 	bl	8001718 <send_cmd>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	f47f af4f 	bne.w	8001d26 <disk_ioctl+0x4e>
 8001e88:	e7ea      	b.n	8001e60 <disk_ioctl+0x188>
		res = RES_PARERR;
 8001e8a:	2404      	movs	r4, #4
 8001e8c:	e7db      	b.n	8001e46 <disk_ioctl+0x16e>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8001e8e:	2009      	movs	r0, #9
 8001e90:	f7ff fc42 	bl	8001718 <send_cmd>
 8001e94:	4607      	mov	r7, r0
 8001e96:	2800      	cmp	r0, #0
 8001e98:	f47f af45 	bne.w	8001d26 <disk_ioctl+0x4e>
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	a802      	add	r0, sp, #8
 8001ea0:	f7ff fcd2 	bl	8001848 <rcvr_datablock>
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	f43f af3e 	beq.w	8001d26 <disk_ioctl+0x4e>
				if (CardType & CT_SD1) {	/* SDv1 */
 8001eaa:	7833      	ldrb	r3, [r6, #0]
 8001eac:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8001eb0:	f013 0402 	ands.w	r4, r3, #2
 8001eb4:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8001eb8:	d030      	beq.n	8001f1c <disk_ioctl+0x244>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8001eba:	0053      	lsls	r3, r2, #1
 8001ebc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8001ec0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001ec4:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 8001ec8:	0992      	lsrs	r2, r2, #6
 8001eca:	3301      	adds	r3, #1
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	4093      	lsls	r3, r2
				res = RES_OK;
 8001ed0:	463c      	mov	r4, r7
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8001ed2:	602b      	str	r3, [r5, #0]
 8001ed4:	e7b7      	b.n	8001e46 <disk_ioctl+0x16e>
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001ed6:	2364      	movs	r3, #100	; 0x64
	traBuf[0] = val;
 8001ed8:	24ff      	movs	r4, #255	; 0xff
 8001eda:	4817      	ldr	r0, [pc, #92]	; (8001f38 <disk_ioctl+0x260>)
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4601      	mov	r1, r0
	traBuf[0] = val;
 8001ee0:	7004      	strb	r4, [r0, #0]
	HAL_SPI_TransmitReceive(hspi,traBuf,recBuf,1,100);
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <disk_ioctl+0x264>)
 8001ee6:	4817      	ldr	r0, [pc, #92]	; (8001f44 <disk_ioctl+0x26c>)
 8001ee8:	f002 ff2e 	bl	8004d48 <HAL_SPI_TransmitReceive>
			if (rcvr_datablock(ptr, 64))
 8001eec:	4628      	mov	r0, r5
 8001eee:	2140      	movs	r1, #64	; 0x40
 8001ef0:	f7ff fcaa 	bl	8001848 <rcvr_datablock>
		if (select()) res = RES_OK;
 8001ef4:	fab0 f480 	clz	r4, r0
 8001ef8:	0964      	lsrs	r4, r4, #5
 8001efa:	e7a4      	b.n	8001e46 <disk_ioctl+0x16e>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8001efc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001f00:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8001f04:	0412      	lsls	r2, r2, #16
 8001f06:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001f0a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8001f0e:	3201      	adds	r2, #1
 8001f10:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001f14:	4413      	add	r3, r2
				*(DWORD*)buff = csize << 10;
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	602b      	str	r3, [r5, #0]
 8001f1a:	e794      	b.n	8001e46 <disk_ioctl+0x16e>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8001f1c:	00c1      	lsls	r1, r0, #3
 8001f1e:	f3c2 0384 	ubfx	r3, r2, #2, #5
 8001f22:	f001 0218 	and.w	r2, r1, #24
 8001f26:	3301      	adds	r3, #1
 8001f28:	eb02 1250 	add.w	r2, r2, r0, lsr #5
 8001f2c:	fb02 3303 	mla	r3, r2, r3, r3
 8001f30:	602b      	str	r3, [r5, #0]
 8001f32:	e788      	b.n	8001e46 <disk_ioctl+0x16e>
 8001f34:	20000004 	.word	0x20000004
 8001f38:	200000cc 	.word	0x200000cc
 8001f3c:	200000c8 	.word	0x200000c8
 8001f40:	200000c4 	.word	0x200000c4
 8001f44:	200005f8 	.word	0x200005f8

08001f48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8001f48:	b430      	push	{r4, r5}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001f4a:	6804      	ldr	r4, [r0, #0]
 8001f4c:	b1d4      	cbz	r4, 8001f84 <get_ldnumber+0x3c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001f4e:	7825      	ldrb	r5, [r4, #0]
 8001f50:	2d1f      	cmp	r5, #31
 8001f52:	d90a      	bls.n	8001f6a <get_ldnumber+0x22>
 8001f54:	2d3a      	cmp	r5, #58	; 0x3a
 8001f56:	d015      	beq.n	8001f84 <get_ldnumber+0x3c>
 8001f58:	4623      	mov	r3, r4
 8001f5a:	e002      	b.n	8001f62 <get_ldnumber+0x1a>
 8001f5c:	2a3a      	cmp	r2, #58	; 0x3a
 8001f5e:	d007      	beq.n	8001f70 <get_ldnumber+0x28>
 8001f60:	460b      	mov	r3, r1
 8001f62:	785a      	ldrb	r2, [r3, #1]
 8001f64:	1c59      	adds	r1, r3, #1
 8001f66:	2a1f      	cmp	r2, #31
 8001f68:	d8f8      	bhi.n	8001f5c <get_ldnumber+0x14>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8001f6a:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8001f6c:	bc30      	pop	{r4, r5}
 8001f6e:	4770      	bx	lr
			i = *tp++ - '0'; 
 8001f70:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8001f72:	42a1      	cmp	r1, r4
 8001f74:	d106      	bne.n	8001f84 <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8001f76:	2d30      	cmp	r5, #48	; 0x30
 8001f78:	d104      	bne.n	8001f84 <get_ldnumber+0x3c>
}
 8001f7a:	bc30      	pop	{r4, r5}
					*path = ++tt;
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	6003      	str	r3, [r0, #0]
					vol = (int)i;
 8001f80:	2000      	movs	r0, #0
}
 8001f82:	4770      	bx	lr
	int vol = -1;
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f88:	bc30      	pop	{r4, r5}
 8001f8a:	4770      	bx	lr

08001f8c <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8001f8c:	b188      	cbz	r0, 8001fb2 <validate+0x26>
{
 8001f8e:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8001f90:	6803      	ldr	r3, [r0, #0]
 8001f92:	b12b      	cbz	r3, 8001fa0 <validate+0x14>
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	b11a      	cbz	r2, 8001fa0 <validate+0x14>
 8001f98:	8882      	ldrh	r2, [r0, #4]
 8001f9a:	88d9      	ldrh	r1, [r3, #6]
 8001f9c:	4291      	cmp	r1, r2
 8001f9e:	d001      	beq.n	8001fa4 <validate+0x18>
		return FR_INVALID_OBJECT;
 8001fa0:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8001fa2:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8001fa4:	7858      	ldrb	r0, [r3, #1]
 8001fa6:	f7ff fdf9 	bl	8001b9c <disk_status>
 8001faa:	f010 0001 	ands.w	r0, r0, #1
 8001fae:	d1f7      	bne.n	8001fa0 <validate+0x14>
}
 8001fb0:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
 8001fb2:	2009      	movs	r0, #9
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <sync_window.part.1>:
FRESULT sync_window (	/* FR_OK:succeeded, !=0:error */
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8001fba:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8001fbc:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* FR_OK:succeeded, !=0:error */
 8001fc0:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8001fc2:	4632      	mov	r2, r6
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	7840      	ldrb	r0, [r0, #1]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f7ff fe29 	bl	8001c20 <disk_write>
 8001fce:	b9b8      	cbnz	r0, 8002000 <sync_window.part.1+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001fd0:	6a22      	ldr	r2, [r4, #32]
 8001fd2:	69a3      	ldr	r3, [r4, #24]
 8001fd4:	1ab2      	subs	r2, r6, r2
 8001fd6:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8001fd8:	7120      	strb	r0, [r4, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001fda:	d20f      	bcs.n	8001ffc <sync_window.part.1+0x44>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001fdc:	78e5      	ldrb	r5, [r4, #3]
 8001fde:	2d01      	cmp	r5, #1
 8001fe0:	d801      	bhi.n	8001fe6 <sync_window.part.1+0x2e>
 8001fe2:	e00b      	b.n	8001ffc <sync_window.part.1+0x44>
 8001fe4:	69a3      	ldr	r3, [r4, #24]
					wsect += fs->fsize;
 8001fe6:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001fe8:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8001fea:	4632      	mov	r2, r6
 8001fec:	2301      	movs	r3, #1
 8001fee:	4639      	mov	r1, r7
 8001ff0:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001ff2:	b2ad      	uxth	r5, r5
					disk_write(fs->drv, fs->win, wsect, 1);
 8001ff4:	f7ff fe14 	bl	8001c20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001ff8:	2d01      	cmp	r5, #1
 8001ffa:	d1f3      	bne.n	8001fe4 <sync_window.part.1+0x2c>
	FRESULT res = FR_OK;
 8001ffc:	2000      	movs	r0, #0
}
 8001ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = FR_DISK_ERR;
 8002000:	2001      	movs	r0, #1
}
 8002002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002004 <sync_fs>:
{
 8002004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002006:	7903      	ldrb	r3, [r0, #4]
{
 8002008:	4605      	mov	r5, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800200a:	b95b      	cbnz	r3, 8002024 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800200c:	782b      	ldrb	r3, [r5, #0]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d00f      	beq.n	8002032 <sync_fs+0x2e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8002012:	2200      	movs	r2, #0
 8002014:	7868      	ldrb	r0, [r5, #1]
 8002016:	4611      	mov	r1, r2
 8002018:	f7ff fe5e 	bl	8001cd8 <disk_ioctl>
 800201c:	3000      	adds	r0, #0
 800201e:	bf18      	it	ne
 8002020:	2001      	movne	r0, #1
}
 8002022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002024:	f7ff ffc8 	bl	8001fb8 <sync_window.part.1>
	if (res == FR_OK) {
 8002028:	2800      	cmp	r0, #0
 800202a:	d1fa      	bne.n	8002022 <sync_fs+0x1e>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800202c:	782b      	ldrb	r3, [r5, #0]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d1ef      	bne.n	8002012 <sync_fs+0xe>
 8002032:	796b      	ldrb	r3, [r5, #5]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d1ec      	bne.n	8002012 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8002038:	f105 0130 	add.w	r1, r5, #48	; 0x30
	BYTE *d = (BYTE*)dst;
 800203c:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
 800203e:	2400      	movs	r4, #0
 8002040:	f505 720c 	add.w	r2, r5, #560	; 0x230
 8002044:	f803 4b01 	strb.w	r4, [r3], #1
	while (cnt--)
 8002048:	4293      	cmp	r3, r2
 800204a:	d1fb      	bne.n	8002044 <sync_fs+0x40>
			ST_WORD(fs->win + BS_55AA, 0xAA55);
 800204c:	f64a 2655 	movw	r6, #43605	; 0xaa55
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
 8002050:	e9d5 3003 	ldrd	r3, r0, [r5, #12]
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
 8002054:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8002058:	f885 0218 	strb.w	r0, [r5, #536]	; 0x218
 800205c:	f885 7219 	strb.w	r7, [r5, #537]	; 0x219
 8002060:	0c07      	lsrs	r7, r0, #16
 8002062:	0e00      	lsrs	r0, r0, #24
 8002064:	f885 021b 	strb.w	r0, [r5, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
 8002068:	f3c3 2007 	ubfx	r0, r3, #8, #8
			fs->winsect = fs->volbase + 1;
 800206c:	69ea      	ldr	r2, [r5, #28]
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
 800206e:	f885 321c 	strb.w	r3, [r5, #540]	; 0x21c
 8002072:	f885 021d 	strb.w	r0, [r5, #541]	; 0x21d
 8002076:	0c18      	lsrs	r0, r3, #16
 8002078:	0e1b      	lsrs	r3, r3, #24
 800207a:	f885 021e 	strb.w	r0, [r5, #542]	; 0x21e
 800207e:	f885 321f 	strb.w	r3, [r5, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
 8002082:	4808      	ldr	r0, [pc, #32]	; (80020a4 <sync_fs+0xa0>)
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <sync_fs+0xa4>)
			fs->winsect = fs->volbase + 1;
 8002086:	3201      	adds	r2, #1
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
 8002088:	6328      	str	r0, [r5, #48]	; 0x30
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
 800208a:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
 800208e:	f885 721a 	strb.w	r7, [r5, #538]	; 0x21a
			fs->winsect = fs->volbase + 1;
 8002092:	62ea      	str	r2, [r5, #44]	; 0x2c
			ST_WORD(fs->win + BS_55AA, 0xAA55);
 8002094:	f8a5 622e 	strh.w	r6, [r5, #558]	; 0x22e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002098:	2301      	movs	r3, #1
 800209a:	7868      	ldrb	r0, [r5, #1]
 800209c:	f7ff fdc0 	bl	8001c20 <disk_write>
			fs->fsi_flag = 0;
 80020a0:	716c      	strb	r4, [r5, #5]
 80020a2:	e7b6      	b.n	8002012 <sync_fs+0xe>
 80020a4:	41615252 	.word	0x41615252
 80020a8:	61417272 	.word	0x61417272

080020ac <move_window.part.2>:
FRESULT move_window (	/* FR_OK(0):succeeded, !=0:error */
 80020ac:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80020ae:	7903      	ldrb	r3, [r0, #4]
FRESULT move_window (	/* FR_OK(0):succeeded, !=0:error */
 80020b0:	4604      	mov	r4, r0
 80020b2:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80020b4:	b113      	cbz	r3, 80020bc <move_window.part.2+0x10>
 80020b6:	f7ff ff7f 	bl	8001fb8 <sync_window.part.1>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80020ba:	b968      	cbnz	r0, 80020d8 <move_window.part.2+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80020bc:	462a      	mov	r2, r5
 80020be:	2301      	movs	r3, #1
 80020c0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80020c4:	7860      	ldrb	r0, [r4, #1]
 80020c6:	f7ff fd71 	bl	8001bac <disk_read>
				res = FR_DISK_ERR;
 80020ca:	2800      	cmp	r0, #0
 80020cc:	bf16      	itet	ne
 80020ce:	f04f 35ff 	movne.w	r5, #4294967295
 80020d2:	2000      	moveq	r0, #0
 80020d4:	2001      	movne	r0, #1
			fs->winsect = sector;
 80020d6:	62e5      	str	r5, [r4, #44]	; 0x2c
}
 80020d8:	bd38      	pop	{r3, r4, r5, pc}
 80020da:	bf00      	nop

080020dc <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
 80020e0:	2200      	movs	r2, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80020e2:	4299      	cmp	r1, r3
{
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80020e8:	7102      	strb	r2, [r0, #4]
 80020ea:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80020ec:	d11a      	bne.n	8002124 <check_fs+0x48>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80020ee:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80020f2:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
 80020f6:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80020fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10e      	bne.n	8002120 <check_fs+0x44>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002102:	f8d4 3066 	ldr.w	r3, [r4, #102]	; 0x66
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <check_fs+0x58>)
 8002108:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800210c:	4293      	cmp	r3, r2
 800210e:	d00f      	beq.n	8002130 <check_fs+0x54>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002110:	f8d4 0082 	ldr.w	r0, [r4, #130]	; 0x82
 8002114:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8002118:	1a80      	subs	r0, r0, r2
 800211a:	bf18      	it	ne
 800211c:	2001      	movne	r0, #1
}
 800211e:	bd10      	pop	{r4, pc}
		return 2;
 8002120:	2002      	movs	r0, #2
}
 8002122:	bd10      	pop	{r4, pc}
 8002124:	f7ff ffc2 	bl	80020ac <move_window.part.2>
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002128:	2800      	cmp	r0, #0
 800212a:	d0e0      	beq.n	80020ee <check_fs+0x12>
		return 3;
 800212c:	2003      	movs	r0, #3
}
 800212e:	bd10      	pop	{r4, pc}
		return 0;
 8002130:	2000      	movs	r0, #0
}
 8002132:	bd10      	pop	{r4, pc}
 8002134:	00544146 	.word	0x00544146

08002138 <find_volume>:
{
 8002138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800213c:	2300      	movs	r3, #0
{
 800213e:	4607      	mov	r7, r0
 8002140:	b084      	sub	sp, #16
	vol = get_ldnumber(path);
 8002142:	4608      	mov	r0, r1
	*rfs = 0;
 8002144:	603b      	str	r3, [r7, #0]
{
 8002146:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
 8002148:	f7ff fefe 	bl	8001f48 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800214c:	1e05      	subs	r5, r0, #0
 800214e:	f2c0 80b5 	blt.w	80022bc <find_volume+0x184>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002152:	4b99      	ldr	r3, [pc, #612]	; (80023b8 <find_volume+0x280>)
 8002154:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002158:	2c00      	cmp	r4, #0
 800215a:	f000 80d4 	beq.w	8002306 <find_volume+0x1ce>
	*rfs = fs;							/* Return pointer to the file system object */
 800215e:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002160:	7823      	ldrb	r3, [r4, #0]
 8002162:	b17b      	cbz	r3, 8002184 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8002164:	7860      	ldrb	r0, [r4, #1]
 8002166:	f7ff fd19 	bl	8001b9c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800216a:	07c3      	lsls	r3, r0, #31
 800216c:	d40a      	bmi.n	8002184 <find_volume+0x4c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800216e:	2e00      	cmp	r6, #0
 8002170:	f000 80d6 	beq.w	8002320 <find_volume+0x1e8>
 8002174:	f010 0004 	ands.w	r0, r0, #4
 8002178:	f000 80a1 	beq.w	80022be <find_volume+0x186>
				return FR_WRITE_PROTECTED;
 800217c:	200a      	movs	r0, #10
}
 800217e:	b004      	add	sp, #16
 8002180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002184:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002186:	b2e8      	uxtb	r0, r5
 8002188:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 800218a:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800218c:	f7ff fc1c 	bl	80019c8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002190:	07c7      	lsls	r7, r0, #31
 8002192:	f100 8097 	bmi.w	80022c4 <find_volume+0x18c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8002196:	b10e      	cbz	r6, 800219c <find_volume+0x64>
 8002198:	0745      	lsls	r5, r0, #29
 800219a:	d4ef      	bmi.n	800217c <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800219c:	2100      	movs	r1, #0
 800219e:	4620      	mov	r0, r4
 80021a0:	f7ff ff9c 	bl	80020dc <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80021a4:	2801      	cmp	r0, #1
 80021a6:	f000 8091 	beq.w	80022cc <find_volume+0x194>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80021aa:	2803      	cmp	r0, #3
 80021ac:	f000 80b6 	beq.w	800231c <find_volume+0x1e4>
	bsect = 0;
 80021b0:	4606      	mov	r6, r0
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80021b2:	2800      	cmp	r0, #0
 80021b4:	f040 80a3 	bne.w	80022fe <find_volume+0x1c6>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80021b8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80021bc:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80021c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	f040 8099 	bne.w	80022fe <find_volume+0x1c6>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 80021cc:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80021d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 80021d4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80021d8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 80021dc:	bf08      	it	eq
 80021de:	6d63      	ldreq	r3, [r4, #84]	; 0x54
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80021e0:	1e51      	subs	r1, r2, #1
 80021e2:	2901      	cmp	r1, #1
	fs->fsize = fasize;
 80021e4:	61a3      	str	r3, [r4, #24]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80021e6:	70e2      	strb	r2, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80021e8:	f200 8089 	bhi.w	80022fe <find_volume+0x1c6>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80021ec:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80021f0:	70a1      	strb	r1, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80021f2:	2900      	cmp	r1, #0
 80021f4:	f000 8083 	beq.w	80022fe <find_volume+0x1c6>
 80021f8:	1e48      	subs	r0, r1, #1
 80021fa:	4208      	tst	r0, r1
 80021fc:	d17f      	bne.n	80022fe <find_volume+0x1c6>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80021fe:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
 8002202:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8002206:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800220a:	0728      	lsls	r0, r5, #28
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800220c:	8125      	strh	r5, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800220e:	d176      	bne.n	80022fe <find_volume+0x1c6>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8002210:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 8002214:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002218:	f894 c03f 	ldrb.w	ip, [r4, #63]	; 0x3f
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 800221c:	ea50 2007 	orrs.w	r0, r0, r7, lsl #8
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002220:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8002224:	bf08      	it	eq
 8002226:	6d20      	ldreq	r0, [r4, #80]	; 0x50
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002228:	ea57 2c0c 	orrs.w	ip, r7, ip, lsl #8
 800222c:	d067      	beq.n	80022fe <find_volume+0x1c6>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800222e:	fb03 f202 	mul.w	r2, r3, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002232:	eb0c 1715 	add.w	r7, ip, r5, lsr #4
 8002236:	4417      	add	r7, r2
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002238:	42b8      	cmp	r0, r7
 800223a:	d360      	bcc.n	80022fe <find_volume+0x1c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800223c:	1bc0      	subs	r0, r0, r7
 800223e:	fbb0 f1f1 	udiv	r1, r0, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002242:	2900      	cmp	r1, #0
 8002244:	d05b      	beq.n	80022fe <find_volume+0x1c6>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002246:	f640 7ef5 	movw	lr, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800224a:	f64f 78f5 	movw	r8, #65525	; 0xfff5
 800224e:	eb0c 0006 	add.w	r0, ip, r6
 8002252:	4437      	add	r7, r6
	fmt = FS_FAT12;
 8002254:	4571      	cmp	r1, lr
 8002256:	bf8c      	ite	hi
 8002258:	f04f 0e02 	movhi.w	lr, #2
 800225c:	f04f 0e01 	movls.w	lr, #1
 8002260:	f101 0c02 	add.w	ip, r1, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002264:	4541      	cmp	r1, r8
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002266:	f8c4 c014 	str.w	ip, [r4, #20]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800226a:	e9c4 6007 	strd	r6, r0, [r4, #28]
	fs->database = bsect + sysect;						/* Data start sector */
 800226e:	62a7      	str	r7, [r4, #40]	; 0x28
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002270:	d958      	bls.n	8002324 <find_volume+0x1ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002272:	2d00      	cmp	r5, #0
 8002274:	d143      	bne.n	80022fe <find_volume+0x1c6>
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002276:	ea4f 028c 	mov.w	r2, ip, lsl #2
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 800227a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800227c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8002280:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8002284:	6261      	str	r1, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002286:	d33a      	bcc.n	80022fe <find_volume+0x1c6>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
	fs->fsi_flag = 0x80;
 800228c:	2180      	movs	r1, #128	; 0x80
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 800228e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
 8002292:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002296:	6122      	str	r2, [r4, #16]
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 8002298:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800229c:	2b01      	cmp	r3, #1
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800229e:	60e2      	str	r2, [r4, #12]
	fs->fsi_flag = 0x80;
 80022a0:	7161      	strb	r1, [r4, #5]
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 80022a2:	d05d      	beq.n	8002360 <find_volume+0x228>
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
 80022a4:	f04f 0e03 	mov.w	lr, #3
	fs->id = ++Fsid;	/* File system mount ID */
 80022a8:	4a44      	ldr	r2, [pc, #272]	; (80023bc <find_volume+0x284>)
	fs->fs_type = fmt;	/* FAT sub-type */
 80022aa:	f884 e000 	strb.w	lr, [r4]
	fs->id = ++Fsid;	/* File system mount ID */
 80022ae:	8813      	ldrh	r3, [r2, #0]
	return FR_OK;
 80022b0:	2000      	movs	r0, #0
	fs->id = ++Fsid;	/* File system mount ID */
 80022b2:	3301      	adds	r3, #1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8013      	strh	r3, [r2, #0]
 80022b8:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 80022ba:	e000      	b.n	80022be <find_volume+0x186>
	if (vol < 0) return FR_INVALID_DRIVE;
 80022bc:	200b      	movs	r0, #11
}
 80022be:	b004      	add	sp, #16
 80022c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80022c4:	2003      	movs	r0, #3
}
 80022c6:	b004      	add	sp, #16
 80022c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022cc:	466d      	mov	r5, sp
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80022ce:	4629      	mov	r1, r5
 80022d0:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 80022d4:	f204 2036 	addw	r0, r4, #566	; 0x236
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80022d8:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80022dc:	b102      	cbz	r2, 80022e0 <find_volume+0x1a8>
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80022e2:	4283      	cmp	r3, r0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80022e4:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80022e8:	d1f6      	bne.n	80022d8 <find_volume+0x1a0>
 80022ea:	f105 0710 	add.w	r7, r5, #16
			bsect = br[i];
 80022ee:	f855 6b04 	ldr.w	r6, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80022f2:	b966      	cbnz	r6, 800230e <find_volume+0x1d6>
 80022f4:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80022f6:	42bd      	cmp	r5, r7
 80022f8:	d1f9      	bne.n	80022ee <find_volume+0x1b6>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80022fa:	2803      	cmp	r0, #3
 80022fc:	d00e      	beq.n	800231c <find_volume+0x1e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80022fe:	200d      	movs	r0, #13
}
 8002300:	b004      	add	sp, #16
 8002302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002306:	200c      	movs	r0, #12
}
 8002308:	b004      	add	sp, #16
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800230e:	4631      	mov	r1, r6
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff fee3 	bl	80020dc <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002316:	2800      	cmp	r0, #0
 8002318:	d1ed      	bne.n	80022f6 <find_volume+0x1be>
 800231a:	e74d      	b.n	80021b8 <find_volume+0x80>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800231c:	2001      	movs	r0, #1
 800231e:	e7ce      	b.n	80022be <find_volume+0x186>
			return FR_OK;				/* The file system object is valid */
 8002320:	4630      	mov	r0, r6
 8002322:	e7cc      	b.n	80022be <find_volume+0x186>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002324:	2d00      	cmp	r5, #0
 8002326:	d0ea      	beq.n	80022fe <find_volume+0x1c6>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002328:	4402      	add	r2, r0
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800232a:	f1be 0f02 	cmp.w	lr, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800232e:	6262      	str	r2, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002330:	d013      	beq.n	800235a <find_volume+0x222>
 8002332:	f04f 0e01 	mov.w	lr, #1
 8002336:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800233a:	f00c 0201 	and.w	r2, ip, #1
 800233e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002342:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8002346:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 800234a:	d3d8      	bcc.n	80022fe <find_volume+0x1c6>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 8002350:	2280      	movs	r2, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002352:	e9c4 3303 	strd	r3, r3, [r4, #12]
	fs->fsi_flag = 0x80;
 8002356:	7162      	strb	r2, [r4, #5]
 8002358:	e7a6      	b.n	80022a8 <find_volume+0x170>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800235a:	ea4f 024c 	mov.w	r2, ip, lsl #1
 800235e:	e7f0      	b.n	8002342 <find_volume+0x20a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002360:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		&& move_window(fs, bsect + 1) == FR_OK)
 8002362:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002364:	4299      	cmp	r1, r3
 8002366:	d004      	beq.n	8002372 <find_volume+0x23a>
 8002368:	4620      	mov	r0, r4
 800236a:	f7ff fe9f 	bl	80020ac <move_window.part.2>
		&& move_window(fs, bsect + 1) == FR_OK)
 800236e:	2800      	cmp	r0, #0
 8002370:	d198      	bne.n	80022a4 <find_volume+0x16c>
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002372:	f64a 2255 	movw	r2, #43605	; 0xaa55
		fs->fsi_flag = 0;
 8002376:	2000      	movs	r0, #0
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002378:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
 800237c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
		fs->fsi_flag = 0;
 8002380:	7160      	strb	r0, [r4, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002382:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002386:	4293      	cmp	r3, r2
 8002388:	d18c      	bne.n	80022a4 <find_volume+0x16c>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <find_volume+0x288>)
 800238c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800238e:	429a      	cmp	r2, r3
 8002390:	d188      	bne.n	80022a4 <find_volume+0x16c>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
 8002392:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8002396:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800239a:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 800239e:	3320      	adds	r3, #32
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f47f af7f 	bne.w	80022a4 <find_volume+0x16c>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
 80023a6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
 80023aa:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80023ae:	f04f 0e03 	mov.w	lr, #3
 80023b2:	e9c4 3203 	strd	r3, r2, [r4, #12]
 80023b6:	e777      	b.n	80022a8 <find_volume+0x170>
 80023b8:	200000d0 	.word	0x200000d0
 80023bc:	200000d4 	.word	0x200000d4
 80023c0:	41615252 	.word	0x41615252

080023c4 <get_fat.part.4>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch (fs->fs_type) {
 80023c6:	7803      	ldrb	r3, [r0, #0]
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 80023c8:	4606      	mov	r6, r0
		switch (fs->fs_type) {
 80023ca:	2b02      	cmp	r3, #2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 80023cc:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 80023ce:	d040      	beq.n	8002452 <get_fat.part.4+0x8e>
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d023      	beq.n	800241c <get_fat.part.4+0x58>
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d001      	beq.n	80023dc <get_fat.part.4+0x18>
			val = 1;	/* Internal error */
 80023d8:	2001      	movs	r0, #1
}
 80023da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
 80023dc:	b28d      	uxth	r5, r1
 80023de:	eb05 0555 	add.w	r5, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80023e2:	6a03      	ldr	r3, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 80023e4:	b2ad      	uxth	r5, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 80023e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80023e8:	eb03 2155 	add.w	r1, r3, r5, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80023ec:	4291      	cmp	r1, r2
 80023ee:	d14b      	bne.n	8002488 <get_fat.part.4+0xc4>
			wc = fs->win[bc++ % SS(fs)];
 80023f0:	1c6f      	adds	r7, r5, #1
 80023f2:	b2bf      	uxth	r7, r7
 80023f4:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80023f8:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80023fc:	4435      	add	r5, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 80023fe:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8002400:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002404:	d147      	bne.n	8002496 <get_fat.part.4+0xd2>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002406:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800240a:	443e      	add	r6, r7
 800240c:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002410:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8002412:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002416:	d544      	bpl.n	80024a2 <get_fat.part.4+0xde>
 8002418:	0900      	lsrs	r0, r0, #4
}
 800241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800241c:	6a01      	ldr	r1, [r0, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800241e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002420:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002424:	4299      	cmp	r1, r3
 8002426:	d128      	bne.n	800247a <get_fat.part.4+0xb6>
			p = &fs->win[clst * 4 % SS(fs)];
 8002428:	00a4      	lsls	r4, r4, #2
 800242a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800242e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8002432:	4433      	add	r3, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002434:	7898      	ldrb	r0, [r3, #2]
 8002436:	78d9      	ldrb	r1, [r3, #3]
 8002438:	4434      	add	r4, r6
 800243a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800243e:	0400      	lsls	r0, r0, #16
 8002440:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	4310      	orrs	r0, r2
 8002448:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800244c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8002450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002452:	6a01      	ldr	r1, [r0, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002454:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002456:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800245a:	4299      	cmp	r1, r3
 800245c:	d002      	beq.n	8002464 <get_fat.part.4+0xa0>
 800245e:	f7ff fe25 	bl	80020ac <move_window.part.2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002462:	b970      	cbnz	r0, 8002482 <get_fat.part.4+0xbe>
			p = &fs->win[clst * 2 % SS(fs)];
 8002464:	0064      	lsls	r4, r4, #1
 8002466:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			val = LD_WORD(p);
 800246a:	4426      	add	r6, r4
 800246c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8002470:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8002474:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800247a:	f7ff fe17 	bl	80020ac <move_window.part.2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800247e:	2800      	cmp	r0, #0
 8002480:	d0d2      	beq.n	8002428 <get_fat.part.4+0x64>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002482:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002488:	f7ff fe10 	bl	80020ac <move_window.part.2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800248c:	2800      	cmp	r0, #0
 800248e:	d1f8      	bne.n	8002482 <get_fat.part.4+0xbe>
 8002490:	6a33      	ldr	r3, [r6, #32]
 8002492:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002494:	e7ac      	b.n	80023f0 <get_fat.part.4+0x2c>
 8002496:	4630      	mov	r0, r6
 8002498:	f7ff fe08 	bl	80020ac <move_window.part.2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800249c:	2800      	cmp	r0, #0
 800249e:	d0b2      	beq.n	8002406 <get_fat.part.4+0x42>
 80024a0:	e7ef      	b.n	8002482 <get_fat.part.4+0xbe>
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80024a2:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 80024a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024a8 <dir_sdi>:
{
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4605      	mov	r5, r0
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80024ac:	6880      	ldr	r0, [r0, #8]
	dp->index = (WORD)idx;	/* Current index */
 80024ae:	80e9      	strh	r1, [r5, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80024b0:	2801      	cmp	r0, #1
 80024b2:	d01e      	beq.n	80024f2 <dir_sdi+0x4a>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	4282      	cmp	r2, r0
 80024ba:	d91a      	bls.n	80024f2 <dir_sdi+0x4a>
 80024bc:	460c      	mov	r4, r1
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80024be:	b1d0      	cbz	r0, 80024f6 <dir_sdi+0x4e>
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80024c0:	789e      	ldrb	r6, [r3, #2]
 80024c2:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 80024c4:	42b4      	cmp	r4, r6
 80024c6:	d330      	bcc.n	800252a <dir_sdi+0x82>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80024c8:	2801      	cmp	r0, #1
 80024ca:	d912      	bls.n	80024f2 <dir_sdi+0x4a>
 80024cc:	4282      	cmp	r2, r0
 80024ce:	d910      	bls.n	80024f2 <dir_sdi+0x4a>
 80024d0:	e001      	b.n	80024d6 <dir_sdi+0x2e>
		while (idx >= ic) {	/* Follow cluster chain */
 80024d2:	42a6      	cmp	r6, r4
 80024d4:	d829      	bhi.n	800252a <dir_sdi+0x82>
 80024d6:	4601      	mov	r1, r0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff73 	bl	80023c4 <get_fat.part.4>
			idx -= ic;
 80024de:	1ba4      	subs	r4, r4, r6
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80024e0:	1c43      	adds	r3, r0, #1
			idx -= ic;
 80024e2:	b2a4      	uxth	r4, r4
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80024e4:	d02c      	beq.n	8002540 <dir_sdi+0x98>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80024e6:	2801      	cmp	r0, #1
 80024e8:	d903      	bls.n	80024f2 <dir_sdi+0x4a>
 80024ea:	682b      	ldr	r3, [r5, #0]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	4282      	cmp	r2, r0
 80024f0:	d8ef      	bhi.n	80024d2 <dir_sdi+0x2a>
	if (!sect) return FR_INT_ERR;
 80024f2:	2002      	movs	r0, #2
}
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80024f6:	7819      	ldrb	r1, [r3, #0]
 80024f8:	2903      	cmp	r1, #3
 80024fa:	d011      	beq.n	8002520 <dir_sdi+0x78>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80024fc:	891a      	ldrh	r2, [r3, #8]
 80024fe:	42a2      	cmp	r2, r4
 8002500:	d9f7      	bls.n	80024f2 <dir_sdi+0x4a>
		sect = dp->fs->dirbase;
 8002502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	dp->clust = clst;	/* Current cluster# */
 8002504:	60e8      	str	r0, [r5, #12]
	if (!sect) return FR_INT_ERR;
 8002506:	2a00      	cmp	r2, #0
 8002508:	d0f3      	beq.n	80024f2 <dir_sdi+0x4a>
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800250a:	f004 000f 	and.w	r0, r4, #15
 800250e:	3330      	adds	r3, #48	; 0x30
 8002510:	eb03 1340 	add.w	r3, r3, r0, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002514:	eb02 1414 	add.w	r4, r2, r4, lsr #4
 8002518:	e9c5 4304 	strd	r4, r3, [r5, #16]
	return FR_OK;
 800251c:	2000      	movs	r0, #0
}
 800251e:	bd70      	pop	{r4, r5, r6, pc}
		clst = dp->fs->dirbase;
 8002520:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002522:	2900      	cmp	r1, #0
 8002524:	d0ea      	beq.n	80024fc <dir_sdi+0x54>
 8002526:	4608      	mov	r0, r1
 8002528:	e7ca      	b.n	80024c0 <dir_sdi+0x18>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800252a:	3a02      	subs	r2, #2
	clst -= 2;
 800252c:	1e81      	subs	r1, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800252e:	4291      	cmp	r1, r2
 8002530:	d301      	bcc.n	8002536 <dir_sdi+0x8e>
	dp->clust = clst;	/* Current cluster# */
 8002532:	60e8      	str	r0, [r5, #12]
 8002534:	e7dd      	b.n	80024f2 <dir_sdi+0x4a>
	return clst * fs->csize + fs->database;
 8002536:	789a      	ldrb	r2, [r3, #2]
 8002538:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800253a:	fb01 6202 	mla	r2, r1, r2, r6
 800253e:	e7e1      	b.n	8002504 <dir_sdi+0x5c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002540:	2001      	movs	r0, #1
}
 8002542:	bd70      	pop	{r4, r5, r6, pc}

08002544 <put_fat.part.5>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8002544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		switch (fs->fs_type) {
 8002548:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800254a:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 800254c:	2b02      	cmp	r3, #2
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800254e:	460d      	mov	r5, r1
 8002550:	4617      	mov	r7, r2
		switch (fs->fs_type) {
 8002552:	d059      	beq.n	8002608 <put_fat.part.5+0xc4>
 8002554:	2b03      	cmp	r3, #3
 8002556:	d036      	beq.n	80025c6 <put_fat.part.5+0x82>
 8002558:	2b01      	cmp	r3, #1
 800255a:	d002      	beq.n	8002562 <put_fat.part.5+0x1e>
			res = FR_INT_ERR;
 800255c:	2002      	movs	r0, #2
}
 800255e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bc = (UINT)clst; bc += bc / 2;
 8002562:	b28e      	uxth	r6, r1
 8002564:	eb06 0656 	add.w	r6, r6, r6, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002568:	6a03      	ldr	r3, [r0, #32]
			bc = (UINT)clst; bc += bc / 2;
 800256a:	b2b6      	uxth	r6, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 800256c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800256e:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002572:	4291      	cmp	r1, r2
 8002574:	d161      	bne.n	800263a <put_fat.part.5+0xf6>
			p = &fs->win[bc++ % SS(fs)];
 8002576:	f106 0801 	add.w	r8, r6, #1
 800257a:	fa1f f888 	uxth.w	r8, r8
 800257e:	eb03 2158 	add.w	r1, r3, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002582:	07eb      	lsls	r3, r5, #31
			p = &fs->win[bc++ % SS(fs)];
 8002584:	f3c6 0608 	ubfx	r6, r6, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002588:	d563      	bpl.n	8002652 <put_fat.part.5+0x10e>
			fs->wflag = 1;
 800258a:	2001      	movs	r0, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800258c:	4426      	add	r6, r4
 800258e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002592:	428a      	cmp	r2, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800259c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
			fs->wflag = 1;
 80025a0:	7120      	strb	r0, [r4, #4]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80025a2:	d004      	beq.n	80025ae <put_fat.part.5+0x6a>
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff fd81 	bl	80020ac <move_window.part.2>
			if (res != FR_OK) break;
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d1d7      	bne.n	800255e <put_fat.part.5+0x1a>
			p = &fs->win[bc % SS(fs)];
 80025ae:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80025b2:	f3c7 1207 	ubfx	r2, r7, #4, #8
 80025b6:	44a0      	add	r8, r4
			fs->wflag = 1;
 80025b8:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80025ba:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			fs->wflag = 1;
 80025be:	7123      	strb	r3, [r4, #4]
 80025c0:	2000      	movs	r0, #0
}
 80025c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80025c6:	6a01      	ldr	r1, [r0, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80025c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80025ca:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80025ce:	4299      	cmp	r1, r3
 80025d0:	d13a      	bne.n	8002648 <put_fat.part.5+0x104>
			fs->wflag = 1;
 80025d2:	2601      	movs	r6, #1
			p = &fs->win[clst * 4 % SS(fs)];
 80025d4:	00ad      	lsls	r5, r5, #2
 80025d6:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 80025da:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80025de:	4421      	add	r1, r4
			val |= LD_DWORD(p) & 0xF0000000;
 80025e0:	78cb      	ldrb	r3, [r1, #3]
 80025e2:	4425      	add	r5, r4
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025ea:	ea43 0207 	orr.w	r2, r3, r7
			ST_DWORD(p, val);
 80025ee:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
 80025f2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80025f6:	0c13      	lsrs	r3, r2, #16
 80025f8:	0e12      	lsrs	r2, r2, #24
 80025fa:	7048      	strb	r0, [r1, #1]
 80025fc:	708b      	strb	r3, [r1, #2]
 80025fe:	70ca      	strb	r2, [r1, #3]
			fs->wflag = 1;
 8002600:	7126      	strb	r6, [r4, #4]
 8002602:	2000      	movs	r0, #0
}
 8002604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002608:	6a01      	ldr	r1, [r0, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800260a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800260c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002610:	4299      	cmp	r1, r3
 8002612:	d003      	beq.n	800261c <put_fat.part.5+0xd8>
 8002614:	f7ff fd4a 	bl	80020ac <move_window.part.2>
			if (res != FR_OK) break;
 8002618:	2800      	cmp	r0, #0
 800261a:	d1a0      	bne.n	800255e <put_fat.part.5+0x1a>
			fs->wflag = 1;
 800261c:	2301      	movs	r3, #1
			p = &fs->win[clst * 2 % SS(fs)];
 800261e:	409d      	lsls	r5, r3
 8002620:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8002624:	4425      	add	r5, r4
 8002626:	f3c7 2207 	ubfx	r2, r7, #8, #8
 800262a:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
 800262e:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
			fs->wflag = 1;
 8002632:	7123      	strb	r3, [r4, #4]
 8002634:	2000      	movs	r0, #0
}
 8002636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800263a:	f7ff fd37 	bl	80020ac <move_window.part.2>
			if (res != FR_OK) break;
 800263e:	2800      	cmp	r0, #0
 8002640:	d18d      	bne.n	800255e <put_fat.part.5+0x1a>
 8002642:	6a23      	ldr	r3, [r4, #32]
 8002644:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002646:	e796      	b.n	8002576 <put_fat.part.5+0x32>
 8002648:	f7ff fd30 	bl	80020ac <move_window.part.2>
			if (res != FR_OK) break;
 800264c:	2800      	cmp	r0, #0
 800264e:	d0c0      	beq.n	80025d2 <put_fat.part.5+0x8e>
 8002650:	e785      	b.n	800255e <put_fat.part.5+0x1a>
			fs->wflag = 1;
 8002652:	2301      	movs	r3, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002654:	4426      	add	r6, r4
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002656:	428a      	cmp	r2, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002658:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
			fs->wflag = 1;
 800265c:	7123      	strb	r3, [r4, #4]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800265e:	d10a      	bne.n	8002676 <put_fat.part.5+0x132>
			p = &fs->win[bc % SS(fs)];
 8002660:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002664:	44a0      	add	r8, r4
 8002666:	f898 2030 	ldrb.w	r2, [r8, #48]	; 0x30
 800266a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800266e:	f022 020f 	bic.w	r2, r2, #15
 8002672:	433a      	orrs	r2, r7
 8002674:	e7a0      	b.n	80025b8 <put_fat.part.5+0x74>
 8002676:	4620      	mov	r0, r4
 8002678:	f7ff fd18 	bl	80020ac <move_window.part.2>
			if (res != FR_OK) break;
 800267c:	2800      	cmp	r0, #0
 800267e:	f47f af6e 	bne.w	800255e <put_fat.part.5+0x1a>
 8002682:	e7ed      	b.n	8002660 <put_fat.part.5+0x11c>

08002684 <create_chain>:
{
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8002688:	460f      	mov	r7, r1
 800268a:	b9f1      	cbnz	r1, 80026ca <create_chain+0x46>
		scl = fs->last_clust;			/* Get suggested start point */
 800268c:	68c6      	ldr	r6, [r0, #12]
 800268e:	6943      	ldr	r3, [r0, #20]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8002690:	bb66      	cbnz	r6, 80026ec <create_chain+0x68>
 8002692:	2601      	movs	r6, #1
 8002694:	4634      	mov	r4, r6
 8002696:	e010      	b.n	80026ba <create_chain+0x36>
			if (ncl > scl) return 0;	/* No free cluster */
 8002698:	2e01      	cmp	r6, #1
 800269a:	d92b      	bls.n	80026f4 <create_chain+0x70>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800269c:	2b02      	cmp	r3, #2
 800269e:	d911      	bls.n	80026c4 <create_chain+0x40>
			ncl = 2;
 80026a0:	2402      	movs	r4, #2
 80026a2:	4621      	mov	r1, r4
 80026a4:	4628      	mov	r0, r5
 80026a6:	f7ff fe8d 	bl	80023c4 <get_fat.part.4>
		if (cs == 0) break;				/* Found a free cluster */
 80026aa:	b330      	cbz	r0, 80026fa <create_chain+0x76>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80026ac:	1c41      	adds	r1, r0, #1
 80026ae:	d030      	beq.n	8002712 <create_chain+0x8e>
 80026b0:	2801      	cmp	r0, #1
 80026b2:	d007      	beq.n	80026c4 <create_chain+0x40>
		if (ncl == scl) return 0;		/* No free cluster */
 80026b4:	42a6      	cmp	r6, r4
 80026b6:	d01d      	beq.n	80026f4 <create_chain+0x70>
 80026b8:	696b      	ldr	r3, [r5, #20]
		ncl++;							/* Next cluster */
 80026ba:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80026bc:	429c      	cmp	r4, r3
 80026be:	d2eb      	bcs.n	8002698 <create_chain+0x14>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80026c0:	2c01      	cmp	r4, #1
 80026c2:	d8ee      	bhi.n	80026a2 <create_chain+0x1e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80026c4:	2401      	movs	r4, #1
}
 80026c6:	4620      	mov	r0, r4
 80026c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80026ca:	2901      	cmp	r1, #1
 80026cc:	d9fa      	bls.n	80026c4 <create_chain+0x40>
 80026ce:	6943      	ldr	r3, [r0, #20]
 80026d0:	4299      	cmp	r1, r3
 80026d2:	d2f7      	bcs.n	80026c4 <create_chain+0x40>
 80026d4:	f7ff fe76 	bl	80023c4 <get_fat.part.4>
		if (cs < 2) return 1;			/* Invalid value */
 80026d8:	2801      	cmp	r0, #1
 80026da:	4604      	mov	r4, r0
 80026dc:	d9f2      	bls.n	80026c4 <create_chain+0x40>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80026de:	3001      	adds	r0, #1
 80026e0:	d017      	beq.n	8002712 <create_chain+0x8e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80026e2:	696b      	ldr	r3, [r5, #20]
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	d8ee      	bhi.n	80026c6 <create_chain+0x42>
 80026e8:	463e      	mov	r6, r7
 80026ea:	e7d3      	b.n	8002694 <create_chain+0x10>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80026ec:	429e      	cmp	r6, r3
 80026ee:	bf28      	it	cs
 80026f0:	2601      	movcs	r6, #1
 80026f2:	e7cf      	b.n	8002694 <create_chain+0x10>
			if (ncl > scl) return 0;	/* No free cluster */
 80026f4:	2400      	movs	r4, #0
}
 80026f6:	4620      	mov	r0, r4
 80026f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80026fa:	696b      	ldr	r3, [r5, #20]
 80026fc:	42a3      	cmp	r3, r4
 80026fe:	d9e1      	bls.n	80026c4 <create_chain+0x40>
 8002700:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002704:	4621      	mov	r1, r4
 8002706:	4628      	mov	r0, r5
 8002708:	f7ff ff1c 	bl	8002544 <put_fat.part.5>
	if (res == FR_OK && clst != 0) {
 800270c:	b128      	cbz	r0, 800271a <create_chain+0x96>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800270e:	2801      	cmp	r0, #1
 8002710:	d1d8      	bne.n	80026c4 <create_chain+0x40>
 8002712:	f04f 34ff 	mov.w	r4, #4294967295
}
 8002716:	4620      	mov	r0, r4
 8002718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_OK && clst != 0) {
 800271a:	b15f      	cbz	r7, 8002734 <create_chain+0xb0>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800271c:	2f01      	cmp	r7, #1
 800271e:	d9d1      	bls.n	80026c4 <create_chain+0x40>
 8002720:	696b      	ldr	r3, [r5, #20]
 8002722:	429f      	cmp	r7, r3
 8002724:	d2ce      	bcs.n	80026c4 <create_chain+0x40>
 8002726:	4639      	mov	r1, r7
 8002728:	4622      	mov	r2, r4
 800272a:	4628      	mov	r0, r5
 800272c:	f7ff ff0a 	bl	8002544 <put_fat.part.5>
	if (res == FR_OK) {
 8002730:	2800      	cmp	r0, #0
 8002732:	d1ec      	bne.n	800270e <create_chain+0x8a>
		if (fs->free_clust != 0xFFFFFFFF) {
 8002734:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
 8002736:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	d0c4      	beq.n	80026c6 <create_chain+0x42>
			fs->fsi_flag |= 1;
 800273c:	796a      	ldrb	r2, [r5, #5]
			fs->free_clust--;
 800273e:	3b01      	subs	r3, #1
			fs->fsi_flag |= 1;
 8002740:	f042 0201 	orr.w	r2, r2, #1
			fs->free_clust--;
 8002744:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8002746:	716a      	strb	r2, [r5, #5]
 8002748:	e7bd      	b.n	80026c6 <create_chain+0x42>
 800274a:	bf00      	nop

0800274c <dir_next>:
{
 800274c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
 8002750:	88c4      	ldrh	r4, [r0, #6]
 8002752:	3401      	adds	r4, #1
 8002754:	b2a4      	uxth	r4, r4
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002756:	2c00      	cmp	r4, #0
 8002758:	d03b      	beq.n	80027d2 <dir_next+0x86>
 800275a:	6903      	ldr	r3, [r0, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d038      	beq.n	80027d2 <dir_next+0x86>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8002760:	f014 070f 	ands.w	r7, r4, #15
 8002764:	4605      	mov	r5, r0
 8002766:	460e      	mov	r6, r1
 8002768:	6800      	ldr	r0, [r0, #0]
 800276a:	d127      	bne.n	80027bc <dir_next+0x70>
		if (!dp->clust) {		/* Static table */
 800276c:	68e9      	ldr	r1, [r5, #12]
		dp->sect++;					/* Next sector */
 800276e:	3301      	adds	r3, #1
 8002770:	612b      	str	r3, [r5, #16]
		if (!dp->clust) {		/* Static table */
 8002772:	b359      	cbz	r1, 80027cc <dir_next+0x80>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002774:	7883      	ldrb	r3, [r0, #2]
 8002776:	3b01      	subs	r3, #1
 8002778:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
 800277c:	d11e      	bne.n	80027bc <dir_next+0x70>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800277e:	2901      	cmp	r1, #1
 8002780:	d92a      	bls.n	80027d8 <dir_next+0x8c>
 8002782:	6943      	ldr	r3, [r0, #20]
 8002784:	4299      	cmp	r1, r3
 8002786:	d227      	bcs.n	80027d8 <dir_next+0x8c>
 8002788:	f7ff fe1c 	bl	80023c4 <get_fat.part.4>
				if (clst <= 1) return FR_INT_ERR;
 800278c:	2801      	cmp	r0, #1
 800278e:	4680      	mov	r8, r0
 8002790:	d922      	bls.n	80027d8 <dir_next+0x8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002792:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002796:	d060      	beq.n	800285a <dir_next+0x10e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8002798:	6828      	ldr	r0, [r5, #0]
 800279a:	6943      	ldr	r3, [r0, #20]
 800279c:	4543      	cmp	r3, r8
 800279e:	d91d      	bls.n	80027dc <dir_next+0x90>
 80027a0:	f1a8 0602 	sub.w	r6, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80027a4:	3b02      	subs	r3, #2
 80027a6:	429e      	cmp	r6, r3
 80027a8:	bf28      	it	cs
 80027aa:	2600      	movcs	r6, #0
				dp->clust = clst;				/* Initialize data for new cluster */
 80027ac:	f8c5 800c 	str.w	r8, [r5, #12]
	return clst * fs->csize + fs->database;
 80027b0:	bf3e      	ittt	cc
 80027b2:	7883      	ldrbcc	r3, [r0, #2]
 80027b4:	6a82      	ldrcc	r2, [r0, #40]	; 0x28
 80027b6:	fb06 2603 	mlacc	r6, r6, r3, r2
				dp->sect = clust2sect(dp->fs, clst);
 80027ba:	612e      	str	r6, [r5, #16]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80027bc:	3030      	adds	r0, #48	; 0x30
 80027be:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80027c2:	6168      	str	r0, [r5, #20]
	dp->index = (WORD)i;	/* Current index */
 80027c4:	80ec      	strh	r4, [r5, #6]
	return FR_OK;
 80027c6:	2000      	movs	r0, #0
}
 80027c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80027cc:	8903      	ldrh	r3, [r0, #8]
 80027ce:	42a3      	cmp	r3, r4
 80027d0:	d8f4      	bhi.n	80027bc <dir_next+0x70>
		return FR_NO_FILE;
 80027d2:	2004      	movs	r0, #4
}
 80027d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst <= 1) return FR_INT_ERR;
 80027d8:	2002      	movs	r0, #2
 80027da:	e7fb      	b.n	80027d4 <dir_next+0x88>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80027dc:	2e00      	cmp	r6, #0
 80027de:	d0f8      	beq.n	80027d2 <dir_next+0x86>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80027e0:	68e9      	ldr	r1, [r5, #12]
 80027e2:	f7ff ff4f 	bl	8002684 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80027e6:	4680      	mov	r8, r0
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d038      	beq.n	800285e <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;
 80027ec:	2801      	cmp	r0, #1
 80027ee:	d0f3      	beq.n	80027d8 <dir_next+0x8c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80027f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80027f4:	d031      	beq.n	800285a <dir_next+0x10e>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80027f6:	6829      	ldr	r1, [r5, #0]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80027f8:	790b      	ldrb	r3, [r1, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d139      	bne.n	8002872 <dir_next+0x126>
		*d++ = (BYTE)val;
 80027fe:	2200      	movs	r2, #0
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
 8002800:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8002804:	f501 710c 	add.w	r1, r1, #560	; 0x230
		*d++ = (BYTE)val;
 8002808:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
 800280c:	428b      	cmp	r3, r1
 800280e:	d1fb      	bne.n	8002808 <dir_next+0xbc>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002810:	6829      	ldr	r1, [r5, #0]
	clst -= 2;
 8002812:	f1a8 0602 	sub.w	r6, r8, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002816:	694b      	ldr	r3, [r1, #20]
 8002818:	788a      	ldrb	r2, [r1, #2]
 800281a:	3b02      	subs	r3, #2
 800281c:	429e      	cmp	r6, r3
 800281e:	bf2e      	itee	cs
 8002820:	2300      	movcs	r3, #0
	return clst * fs->csize + fs->database;
 8002822:	6a8b      	ldrcc	r3, [r1, #40]	; 0x28
 8002824:	fb06 3302 	mlacc	r3, r6, r2, r3
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002828:	62cb      	str	r3, [r1, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800282a:	b1d2      	cbz	r2, 8002862 <dir_next+0x116>
 800282c:	f04f 0a00 	mov.w	sl, #0
						dp->fs->wflag = 1;
 8002830:	f04f 0901 	mov.w	r9, #1
 8002834:	e006      	b.n	8002844 <dir_next+0xf8>
						dp->fs->winsect++;
 8002836:	6829      	ldr	r1, [r5, #0]
 8002838:	6acb      	ldr	r3, [r1, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800283a:	788a      	ldrb	r2, [r1, #2]
						dp->fs->winsect++;
 800283c:	3301      	adds	r3, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800283e:	4552      	cmp	r2, sl
						dp->fs->winsect++;
 8002840:	62cb      	str	r3, [r1, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002842:	d90f      	bls.n	8002864 <dir_next+0x118>
						dp->fs->wflag = 1;
 8002844:	f881 9004 	strb.w	r9, [r1, #4]
 8002848:	4608      	mov	r0, r1
 800284a:	f7ff fbb5 	bl	8001fb8 <sync_window.part.1>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800284e:	f10a 0a01 	add.w	sl, sl, #1
 8002852:	fa1f fa8a 	uxth.w	sl, sl
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8002856:	2800      	cmp	r0, #0
 8002858:	d0ed      	beq.n	8002836 <dir_next+0xea>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800285a:	2001      	movs	r0, #1
 800285c:	e7ba      	b.n	80027d4 <dir_next+0x88>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800285e:	2007      	movs	r0, #7
 8002860:	e7b8      	b.n	80027d4 <dir_next+0x88>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002862:	4692      	mov	sl, r2
					dp->fs->winsect -= c;						/* Rewind window offset */
 8002864:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002866:	4608      	mov	r0, r1
 8002868:	eba3 020a 	sub.w	r2, r3, sl
 800286c:	62ca      	str	r2, [r1, #44]	; 0x2c
 800286e:	694b      	ldr	r3, [r1, #20]
 8002870:	e798      	b.n	80027a4 <dir_next+0x58>
 8002872:	4608      	mov	r0, r1
 8002874:	f7ff fba0 	bl	8001fb8 <sync_window.part.1>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8002878:	2800      	cmp	r0, #0
 800287a:	d1ee      	bne.n	800285a <dir_next+0x10e>
 800287c:	6829      	ldr	r1, [r5, #0]
 800287e:	e7be      	b.n	80027fe <dir_next+0xb2>

08002880 <remove_chain.part.6>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	4604      	mov	r4, r0
 8002884:	460d      	mov	r5, r1
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8002886:	6963      	ldr	r3, [r4, #20]
 8002888:	429d      	cmp	r5, r3
 800288a:	d221      	bcs.n	80028d0 <remove_chain.part.6+0x50>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800288c:	2d01      	cmp	r5, #1
 800288e:	d921      	bls.n	80028d4 <remove_chain.part.6+0x54>
 8002890:	4629      	mov	r1, r5
 8002892:	4620      	mov	r0, r4
 8002894:	f7ff fd96 	bl	80023c4 <get_fat.part.4>
			if (nxt == 0) break;				/* Empty cluster? */
 8002898:	4606      	mov	r6, r0
 800289a:	b1c8      	cbz	r0, 80028d0 <remove_chain.part.6+0x50>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800289c:	2801      	cmp	r0, #1
 800289e:	d019      	beq.n	80028d4 <remove_chain.part.6+0x54>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80028a0:	1c41      	adds	r1, r0, #1
 80028a2:	d019      	beq.n	80028d8 <remove_chain.part.6+0x58>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80028a4:	6963      	ldr	r3, [r4, #20]
 80028a6:	429d      	cmp	r5, r3
 80028a8:	d214      	bcs.n	80028d4 <remove_chain.part.6+0x54>
 80028aa:	4629      	mov	r1, r5
 80028ac:	2200      	movs	r2, #0
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff fe48 	bl	8002544 <put_fat.part.5>
			if (res != FR_OK) break;
 80028b4:	b968      	cbnz	r0, 80028d2 <remove_chain.part.6+0x52>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80028b6:	6923      	ldr	r3, [r4, #16]
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 80028b8:	4635      	mov	r5, r6
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	d0e3      	beq.n	8002886 <remove_chain.part.6+0x6>
				fs->free_clust++;
 80028be:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 80028c0:	7962      	ldrb	r2, [r4, #5]
				fs->free_clust++;
 80028c2:	6123      	str	r3, [r4, #16]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80028c4:	6963      	ldr	r3, [r4, #20]
				fs->fsi_flag |= 1;
 80028c6:	f042 0201 	orr.w	r2, r2, #1
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80028ca:	429d      	cmp	r5, r3
				fs->fsi_flag |= 1;
 80028cc:	7162      	strb	r2, [r4, #5]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80028ce:	d3dd      	bcc.n	800288c <remove_chain.part.6+0xc>
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
 80028d0:	2000      	movs	r0, #0
}
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80028d4:	2002      	movs	r0, #2
}
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80028d8:	2001      	movs	r0, #1
 80028da:	e7fa      	b.n	80028d2 <remove_chain.part.6+0x52>

080028dc <dir_find.part.9>:
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
 80028dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80028e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e4:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
 80028e6:	4604      	mov	r4, r0
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80028e8:	461e      	mov	r6, r3
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80028ea:	463d      	mov	r5, r7
 80028ec:	8403      	strh	r3, [r0, #32]
 80028ee:	e008      	b.n	8002902 <dir_find.part.9+0x26>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80028f0:	280f      	cmp	r0, #15
 80028f2:	d02f      	beq.n	8002954 <dir_find.part.9+0x78>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80028f4:	25ff      	movs	r5, #255	; 0xff
 80028f6:	8426      	strh	r6, [r4, #32]
		res = dir_next(dp, 0);		/* Next entry */
 80028f8:	2100      	movs	r1, #0
 80028fa:	4620      	mov	r0, r4
 80028fc:	f7ff ff26 	bl	800274c <dir_next>
	} while (res == FR_OK);
 8002900:	bb30      	cbnz	r0, 8002950 <dir_find.part.9+0x74>
		res = move_window(dp->fs, dp->sect);
 8002902:	6820      	ldr	r0, [r4, #0]
 8002904:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002906:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002908:	4299      	cmp	r1, r3
 800290a:	d002      	beq.n	8002912 <dir_find.part.9+0x36>
 800290c:	f7ff fbce 	bl	80020ac <move_window.part.2>
		if (res != FR_OK) break;
 8002910:	b9f0      	cbnz	r0, 8002950 <dir_find.part.9+0x74>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8002912:	6961      	ldr	r1, [r4, #20]
		c = dir[DIR_Name];
 8002914:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002916:	2a00      	cmp	r2, #0
 8002918:	f000 8084 	beq.w	8002a24 <dir_find.part.9+0x148>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800291c:	2ae5      	cmp	r2, #229	; 0xe5
 800291e:	d0e9      	beq.n	80028f4 <dir_find.part.9+0x18>
		a = dir[DIR_Attr] & AM_MASK;
 8002920:	7acb      	ldrb	r3, [r1, #11]
 8002922:	f003 003f 	and.w	r0, r3, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002926:	071b      	lsls	r3, r3, #28
 8002928:	d4e2      	bmi.n	80028f0 <dir_find.part.9+0x14>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800292a:	280f      	cmp	r0, #15
 800292c:	d012      	beq.n	8002954 <dir_find.part.9+0x78>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800292e:	b305      	cbz	r5, 8002972 <dir_find.part.9+0x96>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8002930:	69a3      	ldr	r3, [r4, #24]
 8002932:	7ad8      	ldrb	r0, [r3, #11]
 8002934:	07c0      	lsls	r0, r0, #31
 8002936:	d4dd      	bmi.n	80028f4 <dir_find.part.9+0x18>
 8002938:	f103 050b 	add.w	r5, r3, #11
 800293c:	e001      	b.n	8002942 <dir_find.part.9+0x66>
 800293e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002942:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002946:	4290      	cmp	r0, r2
 8002948:	d1d4      	bne.n	80028f4 <dir_find.part.9+0x18>
 800294a:	42ab      	cmp	r3, r5
 800294c:	d1f7      	bne.n	800293e <dir_find.part.9+0x62>
 800294e:	2000      	movs	r0, #0
}
 8002950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dp->lfn) {
 8002954:	69e3      	ldr	r3, [r4, #28]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ce      	beq.n	80028f8 <dir_find.part.9+0x1c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800295a:	0650      	lsls	r0, r2, #25
 800295c:	d51b      	bpl.n	8002996 <dir_find.part.9+0xba>
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800295e:	88e0      	ldrh	r0, [r4, #6]
						sum = dir[LDIR_Chksum];
 8002960:	7b4f      	ldrb	r7, [r1, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8002962:	f002 05bf 	and.w	r5, r2, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8002966:	8420      	strh	r0, [r4, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8002968:	7b4a      	ldrb	r2, [r1, #13]
 800296a:	42ba      	cmp	r2, r7
 800296c:	d017      	beq.n	800299e <dir_find.part.9+0xc2>
 800296e:	25ff      	movs	r5, #255	; 0xff
 8002970:	e7c2      	b.n	80028f8 <dir_find.part.9+0x1c>
 8002972:	4608      	mov	r0, r1
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8002974:	4694      	mov	ip, r2
 8002976:	f101 0e0a 	add.w	lr, r1, #10
 800297a:	e001      	b.n	8002980 <dir_find.part.9+0xa4>
 800297c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8002980:	01eb      	lsls	r3, r5, #7
 8002982:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
 8002986:	4463      	add	r3, ip
 8002988:	4586      	cmp	lr, r0
 800298a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800298e:	d1f5      	bne.n	800297c <dir_find.part.9+0xa0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8002990:	42bd      	cmp	r5, r7
 8002992:	d1cd      	bne.n	8002930 <dir_find.part.9+0x54>
 8002994:	e7db      	b.n	800294e <dir_find.part.9+0x72>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8002996:	42aa      	cmp	r2, r5
 8002998:	d0e6      	beq.n	8002968 <dir_find.part.9+0x8c>
 800299a:	25ff      	movs	r5, #255	; 0xff
 800299c:	e7ac      	b.n	80028f8 <dir_find.part.9+0x1c>
	if (LD_WORD(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800299e:	7ec8      	ldrb	r0, [r1, #27]
 80029a0:	7e8a      	ldrb	r2, [r1, #26]
 80029a2:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
 80029a6:	d1e2      	bne.n	800296e <dir_find.part.9+0x92>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80029a8:	2001      	movs	r0, #1
 80029aa:	f891 9000 	ldrb.w	r9, [r1]
 80029ae:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8002a60 <dir_find.part.9+0x184>
 80029b2:	f009 023f 	and.w	r2, r9, #63	; 0x3f
 80029b6:	3a01      	subs	r2, #1
 80029b8:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 80029bc:	eb02 028c 	add.w	r2, r2, ip, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80029c0:	4682      	mov	sl, r0
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80029c2:	fa1f fc82 	uxth.w	ip, r2
 80029c6:	f10e 080c 	add.w	r8, lr, #12
 80029ca:	e01f      	b.n	8002a0c <dir_find.part.9+0x130>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80029cc:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 80029d0:	d8cd      	bhi.n	800296e <dir_find.part.9+0x92>
 80029d2:	f10c 0001 	add.w	r0, ip, #1
          if (wch < 0x80) {
 80029d6:	2a7f      	cmp	r2, #127	; 0x7f
 80029d8:	fa1f fb80 	uxth.w	fp, r0
 80029dc:	f833 001c 	ldrh.w	r0, [r3, ip, lsl #1]
 80029e0:	d823      	bhi.n	8002a2a <dir_find.part.9+0x14e>
                    if (wch >= 'a' && wch <= 'z') {
 80029e2:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
 80029e6:	f1bc 0f19 	cmp.w	ip, #25
                              wch &= ~0x20;
 80029ea:	bf9a      	itte	ls
 80029ec:	f022 0c20 	bicls.w	ip, r2, #32
 80029f0:	fa1f fc8c 	uxthls.w	ip, ip
                    if (wch >= 'a' && wch <= 'z') {
 80029f4:	4694      	movhi	ip, r2
          if (wch < 0x80) {
 80029f6:	287f      	cmp	r0, #127	; 0x7f
 80029f8:	d91b      	bls.n	8002a32 <dir_find.part.9+0x156>
          return 0;
 80029fa:	2000      	movs	r0, #0
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80029fc:	4584      	cmp	ip, r0
 80029fe:	d1b6      	bne.n	800296e <dir_find.part.9+0x92>
          if (wch < 0x80) {
 8002a00:	4692      	mov	sl, r2
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8002a02:	46dc      	mov	ip, fp
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002a04:	45f0      	cmp	r8, lr
 8002a06:	d01d      	beq.n	8002a44 <dir_find.part.9+0x168>
 8002a08:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002a0c:	180a      	adds	r2, r1, r0
 8002a0e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8002a12:	5c0a      	ldrb	r2, [r1, r0]
 8002a14:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {
 8002a18:	f1ba 0f00 	cmp.w	sl, #0
 8002a1c:	d1d6      	bne.n	80029cc <dir_find.part.9+0xf0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002a1e:	42b2      	cmp	r2, r6
 8002a20:	d0f0      	beq.n	8002a04 <dir_find.part.9+0x128>
 8002a22:	e7a4      	b.n	800296e <dir_find.part.9+0x92>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002a24:	2004      	movs	r0, #4
}
 8002a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (wch < 0x80) {
 8002a2a:	287f      	cmp	r0, #127	; 0x7f
 8002a2c:	d8e8      	bhi.n	8002a00 <dir_find.part.9+0x124>
          return 0;
 8002a2e:	f04f 0c00 	mov.w	ip, #0
                    if (wch >= 'a' && wch <= 'z') {
 8002a32:	f1a0 0a61 	sub.w	sl, r0, #97	; 0x61
 8002a36:	f1ba 0f19 	cmp.w	sl, #25
 8002a3a:	d8df      	bhi.n	80029fc <dir_find.part.9+0x120>
                              wch &= ~0x20;
 8002a3c:	f020 0020 	bic.w	r0, r0, #32
 8002a40:	b280      	uxth	r0, r0
 8002a42:	e7db      	b.n	80029fc <dir_find.part.9+0x120>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8002a44:	f019 0f40 	tst.w	r9, #64	; 0x40
 8002a48:	d006      	beq.n	8002a58 <dir_find.part.9+0x17c>
 8002a4a:	f1ba 0f00 	cmp.w	sl, #0
 8002a4e:	d003      	beq.n	8002a58 <dir_find.part.9+0x17c>
 8002a50:	f833 301c 	ldrh.w	r3, [r3, ip, lsl #1]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d18a      	bne.n	800296e <dir_find.part.9+0x92>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8002a58:	1e6b      	subs	r3, r5, #1
 8002a5a:	b2dd      	uxtb	r5, r3
 8002a5c:	e74c      	b.n	80028f8 <dir_find.part.9+0x1c>
 8002a5e:	bf00      	nop
 8002a60:	08005b2c 	.word	0x08005b2c

08002a64 <dir_register>:
{
 8002a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fn = dp->fn; lfn = dp->lfn;
 8002a68:	6987      	ldr	r7, [r0, #24]
{
 8002a6a:	b089      	sub	sp, #36	; 0x24
	fn = dp->fn; lfn = dp->lfn;
 8002a6c:	463b      	mov	r3, r7
{
 8002a6e:	4604      	mov	r4, r0
	fn = dp->fn; lfn = dp->lfn;
 8002a70:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8002a74:	aa05      	add	r2, sp, #20
 8002a76:	f107 000c 	add.w	r0, r7, #12
		*d++ = *s++;
 8002a7a:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 8002a7e:	4283      	cmp	r3, r0
		*d++ = *s++;
 8002a80:	f802 1b01 	strb.w	r1, [r2], #1
	while (cnt--)
 8002a84:	d1f9      	bne.n	8002a7a <dir_register+0x16>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8002a86:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002a8a:	07da      	lsls	r2, r3, #31
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f140 8096 	bpl.w	8002bbe <dir_register+0x15a>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8002a92:	2300      	movs	r3, #0
 8002a94:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8002a98:	4eb8      	ldr	r6, [pc, #736]	; (8002d7c <dir_register+0x318>)
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8002a9a:	72fb      	strb	r3, [r7, #11]
 8002a9c:	f107 39ff 	add.w	r9, r7, #4294967295
 8002aa0:	61e3      	str	r3, [r4, #28]
 8002aa2:	f107 0b0a 	add.w	fp, r7, #10
 8002aa6:	464a      	mov	r2, r9
 8002aa8:	fa1f f38a 	uxth.w	r3, sl
	const BYTE *s = (const BYTE*)src;
 8002aac:	a905      	add	r1, sp, #20
		*d++ = *s++;
 8002aae:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002ab2:	f802 0f01 	strb.w	r0, [r2, #1]!
	while (cnt--)
 8002ab6:	4593      	cmp	fp, r2
 8002ab8:	d1f9      	bne.n	8002aae <dir_register+0x4a>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8002aba:	f1ba 0f05 	cmp.w	sl, #5
 8002abe:	d919      	bls.n	8002af4 <dir_register+0x90>
 8002ac0:	f1a8 0502 	sub.w	r5, r8, #2
		while (*lfn) {	/* Create a CRC */
 8002ac4:	f835 1f02 	ldrh.w	r1, [r5, #2]!
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8002ac8:	4652      	mov	r2, sl
		while (*lfn) {	/* Create a CRC */
 8002aca:	b191      	cbz	r1, 8002af2 <dir_register+0x8e>
 8002acc:	2310      	movs	r3, #16
				sr = (sr << 1) + (wc & 1);
 8002ace:	f001 0001 	and.w	r0, r1, #1
 8002ad2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8002ad6:	3b01      	subs	r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8002ad8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002adc:	b29b      	uxth	r3, r3
				wc >>= 1;
 8002ade:	ea4f 0151 	mov.w	r1, r1, lsr #1
				if (sr & 0x10000) sr ^= 0x11021;
 8002ae2:	bf18      	it	ne
 8002ae4:	4072      	eorne	r2, r6
			for (i = 0; i < 16; i++) {
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f1      	bne.n	8002ace <dir_register+0x6a>
		while (*lfn) {	/* Create a CRC */
 8002aea:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 8002aee:	2900      	cmp	r1, #0
 8002af0:	d1ec      	bne.n	8002acc <dir_register+0x68>
		seq = (UINT)sr;
 8002af2:	b293      	uxth	r3, r2
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8002af4:	2107      	movs	r1, #7
		c = (seq % 16) + '0';
 8002af6:	f003 050f 	and.w	r5, r3, #15
 8002afa:	f105 0030 	add.w	r0, r5, #48	; 0x30
		if (c > '9') c += 7;
 8002afe:	2839      	cmp	r0, #57	; 0x39
		ns[i--] = c;
 8002b00:	aa08      	add	r2, sp, #32
 8002b02:	440a      	add	r2, r1
 8002b04:	f101 3cff 	add.w	ip, r1, #4294967295
		if (c > '9') c += 7;
 8002b08:	bf88      	it	hi
 8002b0a:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
		seq /= 16;
 8002b0e:	f3c3 130f 	ubfx	r3, r3, #4, #16
		ns[i--] = c;
 8002b12:	fa1f f18c 	uxth.w	r1, ip
 8002b16:	f802 0c14 	strb.w	r0, [r2, #-20]
	} while (seq);
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1eb      	bne.n	8002af6 <dir_register+0x92>
	ns[i] = '~';
 8002b1e:	207e      	movs	r0, #126	; 0x7e
 8002b20:	aa08      	add	r2, sp, #32
 8002b22:	440a      	add	r2, r1
 8002b24:	f802 0c14 	strb.w	r0, [r2, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	f000 8098 	beq.w	8002c5e <dir_register+0x1fa>
 8002b2e:	783a      	ldrb	r2, [r7, #0]
 8002b30:	2a20      	cmp	r2, #32
 8002b32:	f000 8094 	beq.w	8002c5e <dir_register+0x1fa>
			if (j == i - 1) break;
 8002b36:	1e4d      	subs	r5, r1, #1
 8002b38:	e00a      	b.n	8002b50 <dir_register+0xec>
		if (IsDBCS1(dst[j])) {
 8002b3a:	2a1c      	cmp	r2, #28
 8002b3c:	d914      	bls.n	8002b68 <dir_register+0x104>
 8002b3e:	469c      	mov	ip, r3
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002b40:	f10c 0201 	add.w	r2, ip, #1
 8002b44:	b293      	uxth	r3, r2
 8002b46:	4299      	cmp	r1, r3
 8002b48:	d912      	bls.n	8002b70 <dir_register+0x10c>
 8002b4a:	5cfa      	ldrb	r2, [r7, r3]
 8002b4c:	2a20      	cmp	r2, #32
 8002b4e:	d00f      	beq.n	8002b70 <dir_register+0x10c>
		if (IsDBCS1(dst[j])) {
 8002b50:	f102 0c7f 	add.w	ip, r2, #127	; 0x7f
 8002b54:	fa5f fc8c 	uxtb.w	ip, ip
 8002b58:	3220      	adds	r2, #32
 8002b5a:	1c58      	adds	r0, r3, #1
 8002b5c:	f1bc 0f1e 	cmp.w	ip, #30
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	fa1f fc80 	uxth.w	ip, r0
 8002b66:	d8e8      	bhi.n	8002b3a <dir_register+0xd6>
			if (j == i - 1) break;
 8002b68:	42ab      	cmp	r3, r5
 8002b6a:	d1e9      	bne.n	8002b40 <dir_register+0xdc>
 8002b6c:	e001      	b.n	8002b72 <dir_register+0x10e>
	} while (j < 8);
 8002b6e:	4603      	mov	r3, r0
 8002b70:	1c58      	adds	r0, r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002b72:	2907      	cmp	r1, #7
 8002b74:	aa08      	add	r2, sp, #32
 8002b76:	440a      	add	r2, r1
 8002b78:	bf8c      	ite	hi
 8002b7a:	2220      	movhi	r2, #32
 8002b7c:	f812 2c14 	ldrbls.w	r2, [r2, #-20]
 8002b80:	f101 0501 	add.w	r5, r1, #1
 8002b84:	b280      	uxth	r0, r0
 8002b86:	bf98      	it	ls
 8002b88:	b2a9      	uxthls	r1, r5
	} while (j < 8);
 8002b8a:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002b8c:	54fa      	strb	r2, [r7, r3]
	} while (j < 8);
 8002b8e:	d9ee      	bls.n	8002b6e <dir_register+0x10a>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002b90:	2100      	movs	r1, #0
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff fc88 	bl	80024a8 <dir_sdi>
	if (res != FR_OK) return res;
 8002b98:	b950      	cbnz	r0, 8002bb0 <dir_register+0x14c>
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff fe9e 	bl	80028dc <dir_find.part.9>
			if (res != FR_OK) break;
 8002ba0:	b930      	cbnz	r0, 8002bb0 <dir_register+0x14c>
 8002ba2:	f10a 0a01 	add.w	sl, sl, #1
		for (n = 1; n < 100; n++) {
 8002ba6:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8002baa:	f47f af7c 	bne.w	8002aa6 <dir_register+0x42>
 8002bae:	e073      	b.n	8002c98 <dir_register+0x234>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8002bb0:	2804      	cmp	r0, #4
 8002bb2:	4605      	mov	r5, r0
 8002bb4:	d14f      	bne.n	8002c56 <dir_register+0x1f2>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8002bb6:	9b00      	ldr	r3, [sp, #0]
 8002bb8:	72fb      	strb	r3, [r7, #11]
 8002bba:	f8c4 801c 	str.w	r8, [r4, #28]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8002bbe:	9b00      	ldr	r3, [sp, #0]
 8002bc0:	079b      	lsls	r3, r3, #30
 8002bc2:	d44e      	bmi.n	8002c62 <dir_register+0x1fe>
	res = dir_sdi(dp, 0);
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f7ff fc6e 	bl	80024a8 <dir_sdi>
		nent = 1;
 8002bcc:	2601      	movs	r6, #1
	if (res == FR_OK) {
 8002bce:	4605      	mov	r5, r0
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	d15f      	bne.n	8002c94 <dir_register+0x230>
		n = 0;
 8002bd4:	4607      	mov	r7, r0
 8002bd6:	e007      	b.n	8002be8 <dir_register+0x184>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8002bd8:	b19b      	cbz	r3, 8002c02 <dir_register+0x19e>
				n = 0;					/* Not a blank entry. Restart to search */
 8002bda:	2700      	movs	r7, #0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4620      	mov	r0, r4
 8002be0:	f7ff fdb4 	bl	800274c <dir_next>
		} while (res == FR_OK);
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d15c      	bne.n	8002ca2 <dir_register+0x23e>
			res = move_window(dp->fs, dp->sect);
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002bec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bee:	4299      	cmp	r1, r3
 8002bf0:	d003      	beq.n	8002bfa <dir_register+0x196>
 8002bf2:	f7ff fa5b 	bl	80020ac <move_window.part.2>
			if (res != FR_OK) break;
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d153      	bne.n	8002ca2 <dir_register+0x23e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8002bfa:	6963      	ldr	r3, [r4, #20]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2be5      	cmp	r3, #229	; 0xe5
 8002c00:	d1ea      	bne.n	8002bd8 <dir_register+0x174>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002c02:	3701      	adds	r7, #1
 8002c04:	b2bf      	uxth	r7, r7
 8002c06:	42be      	cmp	r6, r7
 8002c08:	d1e8      	bne.n	8002bdc <dir_register+0x178>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8002c0a:	3e01      	subs	r6, #1
 8002c0c:	b2b3      	uxth	r3, r6
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d151      	bne.n	8002cb8 <dir_register+0x254>
		res = move_window(dp->fs, dp->sect);
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002c18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c1a:	4299      	cmp	r1, r3
 8002c1c:	d143      	bne.n	8002ca6 <dir_register+0x242>
		*d++ = (BYTE)val;
 8002c1e:	2100      	movs	r1, #0
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8002c20:	6963      	ldr	r3, [r4, #20]
 8002c22:	f103 0220 	add.w	r2, r3, #32
		*d++ = (BYTE)val;
 8002c26:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d1fb      	bne.n	8002c26 <dir_register+0x1c2>
 8002c2e:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002c32:	f103 000b 	add.w	r0, r3, #11
 8002c36:	3a01      	subs	r2, #1
		*d++ = *s++;
 8002c38:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 8002c3c:	4283      	cmp	r3, r0
		*d++ = *s++;
 8002c3e:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 8002c42:	d1f9      	bne.n	8002c38 <dir_register+0x1d4>
			dp->fs->wflag = 1;
 8002c44:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8002c46:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
 8002c4a:	7adb      	ldrb	r3, [r3, #11]
 8002c4c:	f003 0318 	and.w	r3, r3, #24
 8002c50:	730b      	strb	r3, [r1, #12]
			dp->fs->wflag = 1;
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	711a      	strb	r2, [r3, #4]
}
 8002c56:	4628      	mov	r0, r5
 8002c58:	b009      	add	sp, #36	; 0x24
 8002c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5e:	2001      	movs	r0, #1
 8002c60:	e787      	b.n	8002b72 <dir_register+0x10e>
		for (n = 0; lfn[n]; n++) ;
 8002c62:	f8b8 3000 	ldrh.w	r3, [r8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ac      	beq.n	8002bc4 <dir_register+0x160>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8002c74:	2a00      	cmp	r2, #0
 8002c76:	d1f9      	bne.n	8002c6c <dir_register+0x208>
 8002c78:	4a41      	ldr	r2, [pc, #260]	; (8002d80 <dir_register+0x31c>)
 8002c7a:	f103 0619 	add.w	r6, r3, #25
	res = dir_sdi(dp, 0);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4620      	mov	r0, r4
 8002c82:	fba2 3606 	umull	r3, r6, r2, r6
 8002c86:	f7ff fc0f 	bl	80024a8 <dir_sdi>
 8002c8a:	f3c6 068f 	ubfx	r6, r6, #2, #16
	if (res == FR_OK) {
 8002c8e:	4605      	mov	r5, r0
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d09f      	beq.n	8002bd4 <dir_register+0x170>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002c94:	2d04      	cmp	r5, #4
 8002c96:	d1de      	bne.n	8002c56 <dir_register+0x1f2>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8002c98:	2507      	movs	r5, #7
}
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	b009      	add	sp, #36	; 0x24
 8002c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (res != FR_OK) break;
 8002ca2:	4605      	mov	r5, r0
 8002ca4:	e7f6      	b.n	8002c94 <dir_register+0x230>
 8002ca6:	f7ff fa01 	bl	80020ac <move_window.part.2>
		if (res == FR_OK) {
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d0b7      	beq.n	8002c1e <dir_register+0x1ba>
 8002cae:	4605      	mov	r5, r0
}
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	b009      	add	sp, #36	; 0x24
 8002cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->index - nent);
 8002cb8:	88e1      	ldrh	r1, [r4, #6]
 8002cba:	9b00      	ldr	r3, [sp, #0]
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	1ac9      	subs	r1, r1, r3
 8002cc0:	b289      	uxth	r1, r1
 8002cc2:	f7ff fbf1 	bl	80024a8 <dir_sdi>
		if (res == FR_OK) {
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d1f1      	bne.n	8002cae <dir_register+0x24a>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8002cca:	69a1      	ldr	r1, [r4, #24]
	BYTE sum = 0;
 8002ccc:	4683      	mov	fp, r0
 8002cce:	f101 000b 	add.w	r0, r1, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8002cd2:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8002cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cda:	ea43 035b 	orr.w	r3, r3, fp, lsr #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	4281      	cmp	r1, r0
 8002ce2:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8002ce6:	d1f4      	bne.n	8002cd2 <dir_register+0x26e>
	dir[LDIR_Type] = 0;
 8002ce8:	9501      	str	r5, [sp, #4]
				res = move_window(dp->fs, dp->sect);
 8002cea:	6820      	ldr	r0, [r4, #0]
 8002cec:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002cee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002cf0:	4299      	cmp	r1, r3
 8002cf2:	d003      	beq.n	8002cfc <dir_register+0x298>
 8002cf4:	f7ff f9da 	bl	80020ac <move_window.part.2>
				if (res != FR_OK) break;
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d1d8      	bne.n	8002cae <dir_register+0x24a>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8002cfc:	200f      	movs	r0, #15
	s = wc = 0;
 8002cfe:	2200      	movs	r2, #0
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8002d00:	f89d a000 	ldrb.w	sl, [sp]
 8002d04:	6967      	ldr	r7, [r4, #20]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8002d06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002d0a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8002d0e:	f8d4 801c 	ldr.w	r8, [r4, #28]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8002d12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8002d16:	72f8      	strb	r0, [r7, #11]
	dir[LDIR_Type] = 0;
 8002d18:	f04f 0000 	mov.w	r0, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8002d1c:	b299      	uxth	r1, r3
 8002d1e:	2501      	movs	r5, #1
	s = wc = 0;
 8002d20:	4613      	mov	r3, r2
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8002d22:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8002d26:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8002d84 <dir_register+0x320>
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8002d2a:	f887 b00d 	strb.w	fp, [r7, #13]
	dir[LDIR_Type] = 0;
 8002d2e:	7338      	strb	r0, [r7, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8002d30:	76b8      	strb	r0, [r7, #26]
 8002d32:	76f8      	strb	r0, [r7, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8002d34:	454a      	cmp	r2, r9
 8002d36:	f103 0301 	add.w	r3, r3, #1
 8002d3a:	bf1a      	itte	ne
 8002d3c:	1c4e      	addne	r6, r1, #1
 8002d3e:	f838 2011 	ldrhne.w	r2, [r8, r1, lsl #1]
 8002d42:	460e      	moveq	r6, r1
 8002d44:	b299      	uxth	r1, r3
 8002d46:	f101 31ff 	add.w	r1, r1, #4294967295
 8002d4a:	bf18      	it	ne
 8002d4c:	b2b6      	uxthne	r6, r6
 8002d4e:	4471      	add	r1, lr
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8002d50:	eb07 0c05 	add.w	ip, r7, r5
 8002d54:	0a10      	lsrs	r0, r2, #8
 8002d56:	557a      	strb	r2, [r7, r5]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f88c 0001 	strb.w	r0, [ip, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8002d5e:	b93a      	cbnz	r2, 8002d70 <dir_register+0x30c>
	} while (++s < 13);
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d818      	bhi.n	8002d96 <dir_register+0x332>
 8002d64:	f811 5f01 	ldrb.w	r5, [r1, #1]!
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8002d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	e7ef      	b.n	8002d50 <dir_register+0x2ec>
	} while (++s < 13);
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d809      	bhi.n	8002d88 <dir_register+0x324>
 8002d74:	4631      	mov	r1, r6
 8002d76:	f81e 5003 	ldrb.w	r5, [lr, r3]
 8002d7a:	e7db      	b.n	8002d34 <dir_register+0x2d0>
 8002d7c:	00011021 	.word	0x00011021
 8002d80:	4ec4ec4f 	.word	0x4ec4ec4f
 8002d84:	08005b2c 	.word	0x08005b2c
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8002d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d002      	beq.n	8002d96 <dir_register+0x332>
 8002d90:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8002d94:	b90b      	cbnz	r3, 8002d9a <dir_register+0x336>
 8002d96:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
				dp->fs->wflag = 1;
 8002d9a:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002d9c:	f887 a000 	strb.w	sl, [r7]
				dp->fs->wflag = 1;
 8002da0:	6823      	ldr	r3, [r4, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8002da2:	2100      	movs	r1, #0
				dp->fs->wflag = 1;
 8002da4:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff fcd0 	bl	800274c <dir_next>
			} while (res == FR_OK && --nent);
 8002dac:	2800      	cmp	r0, #0
 8002dae:	f47f af7e 	bne.w	8002cae <dir_register+0x24a>
 8002db2:	9b00      	ldr	r3, [sp, #0]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d195      	bne.n	8002cea <dir_register+0x286>
 8002dbe:	9d01      	ldr	r5, [sp, #4]
 8002dc0:	e728      	b.n	8002c14 <dir_register+0x1b0>
 8002dc2:	bf00      	nop

08002dc4 <follow_path>:
{
 8002dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002dc8:	780b      	ldrb	r3, [r1, #0]
{
 8002dca:	460c      	mov	r4, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002dcc:	2b2f      	cmp	r3, #47	; 0x2f
{
 8002dce:	4605      	mov	r5, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8002dd0:	d054      	beq.n	8002e7c <follow_path+0xb8>
 8002dd2:	2b5c      	cmp	r3, #92	; 0x5c
 8002dd4:	d052      	beq.n	8002e7c <follow_path+0xb8>
	dp->sclust = 0;							/* Always start from the root directory */
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	60ae      	str	r6, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002dda:	7823      	ldrb	r3, [r4, #0]
 8002ddc:	2b1f      	cmp	r3, #31
 8002dde:	d802      	bhi.n	8002de6 <follow_path+0x22>
 8002de0:	e052      	b.n	8002e88 <follow_path+0xc4>
 8002de2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8002de6:	2b2f      	cmp	r3, #47	; 0x2f
 8002de8:	d0fb      	beq.n	8002de2 <follow_path+0x1e>
 8002dea:	2b5c      	cmp	r3, #92	; 0x5c
 8002dec:	d0f9      	beq.n	8002de2 <follow_path+0x1e>
		w = p[si++];					/* Get a character */
 8002dee:	b299      	uxth	r1, r3
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8002df0:	291f      	cmp	r1, #31
 8002df2:	d940      	bls.n	8002e76 <follow_path+0xb2>
 8002df4:	292f      	cmp	r1, #47	; 0x2f
 8002df6:	d03e      	beq.n	8002e76 <follow_path+0xb2>
 8002df8:	295c      	cmp	r1, #92	; 0x5c
 8002dfa:	d03c      	beq.n	8002e76 <follow_path+0xb2>
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8002dfc:	f103 027f 	add.w	r2, r3, #127	; 0x7f
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	2a1e      	cmp	r2, #30
 8002e04:	d937      	bls.n	8002e76 <follow_path+0xb2>
 8002e06:	3320      	adds	r3, #32
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b1c      	cmp	r3, #28
 8002e0c:	d933      	bls.n	8002e76 <follow_path+0xb2>
          if (wch < 0x80) {
 8002e0e:	297f      	cmp	r1, #127	; 0x7f
 8002e10:	d831      	bhi.n	8002e76 <follow_path+0xb2>
	lfn = dp->lfn;
 8002e12:	69ef      	ldr	r7, [r5, #28]
	while (*str && *str != chr) str++;
 8002e14:	2922      	cmp	r1, #34	; 0x22
 8002e16:	4626      	mov	r6, r4
 8002e18:	f1a7 0002 	sub.w	r0, r7, #2
		w = p[si++];					/* Get a character */
 8002e1c:	f04f 0c01 	mov.w	ip, #1
	while (*str && *str != chr) str++;
 8002e20:	d029      	beq.n	8002e76 <follow_path+0xb2>
 8002e22:	232a      	movs	r3, #42	; 0x2a
 8002e24:	4a9d      	ldr	r2, [pc, #628]	; (800309c <follow_path+0x2d8>)
 8002e26:	428b      	cmp	r3, r1
 8002e28:	d025      	beq.n	8002e76 <follow_path+0xb2>
 8002e2a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f9      	bne.n	8002e26 <follow_path+0x62>
		lfn[di++] = w;					/* Store the Unicode character */
 8002e32:	f820 1f02 	strh.w	r1, [r0, #2]!
		w = p[si++];					/* Get a character */
 8002e36:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8002e3a:	f10c 0301 	add.w	r3, ip, #1
 8002e3e:	b291      	uxth	r1, r2
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8002e40:	291f      	cmp	r1, #31
		w = p[si++];					/* Get a character */
 8002e42:	b29b      	uxth	r3, r3
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8002e44:	f240 80ff 	bls.w	8003046 <follow_path+0x282>
 8002e48:	292f      	cmp	r1, #47	; 0x2f
 8002e4a:	d024      	beq.n	8002e96 <follow_path+0xd2>
 8002e4c:	295c      	cmp	r1, #92	; 0x5c
 8002e4e:	d022      	beq.n	8002e96 <follow_path+0xd2>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d00f      	beq.n	8002e76 <follow_path+0xb2>
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8002e56:	f102 0c7f 	add.w	ip, r2, #127	; 0x7f
 8002e5a:	fa5f fc8c 	uxtb.w	ip, ip
 8002e5e:	f1bc 0f1e 	cmp.w	ip, #30
 8002e62:	d908      	bls.n	8002e76 <follow_path+0xb2>
 8002e64:	3220      	adds	r2, #32
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	2a1c      	cmp	r2, #28
 8002e6a:	d904      	bls.n	8002e76 <follow_path+0xb2>
          if (wch < 0x80) {
 8002e6c:	297f      	cmp	r1, #127	; 0x7f
 8002e6e:	d802      	bhi.n	8002e76 <follow_path+0xb2>
	while (*str && *str != chr) str++;
 8002e70:	2922      	cmp	r1, #34	; 0x22
          if (wch < 0x80) {
 8002e72:	469c      	mov	ip, r3
	while (*str && *str != chr) str++;
 8002e74:	d1d5      	bne.n	8002e22 <follow_path+0x5e>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8002e76:	2006      	movs	r0, #6
}
 8002e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	dp->sclust = 0;							/* Always start from the root directory */
 8002e7c:	2600      	movs	r6, #0
		path++;
 8002e7e:	3401      	adds	r4, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8002e80:	60ae      	str	r6, [r5, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002e82:	7823      	ldrb	r3, [r4, #0]
 8002e84:	2b1f      	cmp	r3, #31
 8002e86:	d8ae      	bhi.n	8002de6 <follow_path+0x22>
		res = dir_sdi(dp, 0);
 8002e88:	4631      	mov	r1, r6
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	f7ff fb0c 	bl	80024a8 <dir_sdi>
		dp->dir = 0;
 8002e90:	616e      	str	r6, [r5, #20]
}
 8002e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8002e96:	2600      	movs	r6, #0
	*path = &p[si];						/* Return pointer to the next segment */
 8002e98:	441c      	add	r4, r3
 8002e9a:	4662      	mov	r2, ip
 8002e9c:	eb07 004c 	add.w	r0, r7, ip, lsl #1
 8002ea0:	fa1f f38c 	uxth.w	r3, ip
		w = lfn[di - 1];
 8002ea4:	f830 1d02 	ldrh.w	r1, [r0, #-2]!
		if (w != ' ' && w != '.') break;
 8002ea8:	2920      	cmp	r1, #32
 8002eaa:	d001      	beq.n	8002eb0 <follow_path+0xec>
 8002eac:	292e      	cmp	r1, #46	; 0x2e
 8002eae:	d104      	bne.n	8002eba <follow_path+0xf6>
 8002eb0:	3a01      	subs	r2, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8002eb2:	b293      	uxth	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f5      	bne.n	8002ea4 <follow_path+0xe0>
 8002eb8:	e7dd      	b.n	8002e76 <follow_path+0xb2>
	lfn[di] = 0;						/* LFN is created */
 8002eba:	2000      	movs	r0, #0
	mem_set(dp->fn, ' ', 11);
 8002ebc:	69a9      	ldr	r1, [r5, #24]
	lfn[di] = 0;						/* LFN is created */
 8002ebe:	f827 0012 	strh.w	r0, [r7, r2, lsl #1]
		*d++ = (BYTE)val;
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f101 000b 	add.w	r0, r1, #11
 8002ec8:	f801 2b01 	strb.w	r2, [r1], #1
	while (cnt--)
 8002ecc:	4281      	cmp	r1, r0
 8002ece:	d1fb      	bne.n	8002ec8 <follow_path+0x104>
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	e000      	b.n	8002ed6 <follow_path+0x112>
 8002ed4:	3101      	adds	r1, #1
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8002ed6:	b28a      	uxth	r2, r1
 8002ed8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8002edc:	b288      	uxth	r0, r1
 8002ede:	2a20      	cmp	r2, #32
 8002ee0:	d0f8      	beq.n	8002ed4 <follow_path+0x110>
 8002ee2:	2a2e      	cmp	r2, #46	; 0x2e
 8002ee4:	d0f6      	beq.n	8002ed4 <follow_path+0x110>
	if (si) cf |= NS_LOSS | NS_LFN;
 8002ee6:	b108      	cbz	r0, 8002eec <follow_path+0x128>
 8002ee8:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8002eec:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8002ef0:	eb03 010e 	add.w	r1, r3, lr
 8002ef4:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8002ef8:	f103 3cff 	add.w	ip, r3, #4294967295
 8002efc:	292e      	cmp	r1, #46	; 0x2e
 8002efe:	d003      	beq.n	8002f08 <follow_path+0x144>
 8002f00:	fa1f f38c 	uxth.w	r3, ip
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f3      	bne.n	8002ef0 <follow_path+0x12c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8002f08:	f04f 0c00 	mov.w	ip, #0
 8002f0c:	f04f 0e08 	mov.w	lr, #8
 8002f10:	4661      	mov	r1, ip
		w = lfn[si++];					/* Get an LFN character */
 8002f12:	3001      	adds	r0, #1
 8002f14:	b280      	uxth	r0, r0
		if (!w) break;					/* Break on end of the LFN */
 8002f16:	b3a2      	cbz	r2, 8002f82 <follow_path+0x1be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8002f18:	2a20      	cmp	r2, #32
 8002f1a:	d07f      	beq.n	800301c <follow_path+0x258>
 8002f1c:	2a2e      	cmp	r2, #46	; 0x2e
 8002f1e:	f000 8082 	beq.w	8003026 <follow_path+0x262>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8002f22:	45f4      	cmp	ip, lr
 8002f24:	d225      	bcs.n	8002f72 <follow_path+0x1ae>
 8002f26:	4283      	cmp	r3, r0
 8002f28:	d07f      	beq.n	800302a <follow_path+0x266>
		if (w >= 0x80) {				/* Non ASCII character */
 8002f2a:	2a7f      	cmp	r2, #127	; 0x7f
 8002f2c:	f200 808e 	bhi.w	800304c <follow_path+0x288>
	while (*str && *str != chr) str++;
 8002f30:	2a2b      	cmp	r2, #43	; 0x2b
 8002f32:	f000 808d 	beq.w	8003050 <follow_path+0x28c>
 8002f36:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8002f3a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80030a0 <follow_path+0x2dc>
 8002f3e:	4542      	cmp	r2, r8
 8002f40:	f000 8086 	beq.w	8003050 <follow_path+0x28c>
 8002f44:	f819 8f01 	ldrb.w	r8, [r9, #1]!
 8002f48:	f1b8 0f00 	cmp.w	r8, #0
 8002f4c:	d1f7      	bne.n	8002f3e <follow_path+0x17a>
				if (IsUpper(w)) {		/* ASCII large capital */
 8002f4e:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
 8002f52:	f1b8 0f19 	cmp.w	r8, #25
 8002f56:	f200 8094 	bhi.w	8003082 <follow_path+0x2be>
					b |= 2;
 8002f5a:	f041 0102 	orr.w	r1, r1, #2
 8002f5e:	fa5f f982 	uxtb.w	r9, r2
		dp->fn[i++] = (BYTE)w;
 8002f62:	69aa      	ldr	r2, [r5, #24]
 8002f64:	f10c 0801 	add.w	r8, ip, #1
 8002f68:	f802 900c 	strb.w	r9, [r2, ip]
 8002f6c:	fa1f fc88 	uxth.w	ip, r8
 8002f70:	e056      	b.n	8003020 <follow_path+0x25c>
			if (ni == 11) {				/* Long extension */
 8002f72:	f1be 0f0b 	cmp.w	lr, #11
 8002f76:	d07a      	beq.n	800306e <follow_path+0x2aa>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8002f78:	4283      	cmp	r3, r0
 8002f7a:	d059      	beq.n	8003030 <follow_path+0x26c>
 8002f7c:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
 8002f80:	d256      	bcs.n	8003030 <follow_path+0x26c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002f82:	69ab      	ldr	r3, [r5, #24]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	2ae5      	cmp	r2, #229	; 0xe5
 8002f88:	d102      	bne.n	8002f90 <follow_path+0x1cc>
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	69ab      	ldr	r3, [r5, #24]
	if (ni == 8) b <<= 2;
 8002f90:	f1be 0f08 	cmp.w	lr, #8
 8002f94:	bf04      	itt	eq
 8002f96:	0089      	lsleq	r1, r1, #2
 8002f98:	b2c9      	uxtbeq	r1, r1
 8002f9a:	f001 020c 	and.w	r2, r1, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8002f9e:	2a0c      	cmp	r2, #12
 8002fa0:	d04e      	beq.n	8003040 <follow_path+0x27c>
 8002fa2:	f001 0103 	and.w	r1, r1, #3
 8002fa6:	2903      	cmp	r1, #3
 8002fa8:	d04a      	beq.n	8003040 <follow_path+0x27c>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8002faa:	07b0      	lsls	r0, r6, #30
 8002fac:	d407      	bmi.n	8002fbe <follow_path+0x1fa>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8002fae:	2901      	cmp	r1, #1
 8002fb0:	bf08      	it	eq
 8002fb2:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8002fb6:	2a04      	cmp	r2, #4
 8002fb8:	bf08      	it	eq
 8002fba:	f046 0608 	orreq.w	r6, r6, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8002fbe:	72de      	strb	r6, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f7ff fa70 	bl	80024a8 <dir_sdi>
	if (res != FR_OK) return res;
 8002fc8:	b9e8      	cbnz	r0, 8003006 <follow_path+0x242>
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f7ff fc86 	bl	80028dc <dir_find.part.9>
			ns = dp->fn[NSFLAG];
 8002fd0:	69ab      	ldr	r3, [r5, #24]
 8002fd2:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8002fd4:	b9c8      	cbnz	r0, 800300a <follow_path+0x246>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002fd6:	0759      	lsls	r1, r3, #29
 8002fd8:	f53f af4e 	bmi.w	8002e78 <follow_path+0xb4>
			dir = dp->dir;						/* Follow the sub-directory */
 8002fdc:	696b      	ldr	r3, [r5, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8002fde:	7ada      	ldrb	r2, [r3, #11]
 8002fe0:	06d2      	lsls	r2, r2, #27
 8002fe2:	d541      	bpl.n	8003068 <follow_path+0x2a4>
			dp->sclust = ld_clust(dp->fs, dir);
 8002fe4:	682a      	ldr	r2, [r5, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002fe6:	7ed8      	ldrb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32)
 8002fe8:	7811      	ldrb	r1, [r2, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002fea:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 8002fec:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8002fee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 8002ff2:	d105      	bne.n	8003000 <follow_path+0x23c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8002ff4:	7d59      	ldrb	r1, [r3, #21]
 8002ff6:	7d1b      	ldrb	r3, [r3, #20]
 8002ff8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ffc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
			dp->sclust = ld_clust(dp->fs, dir);
 8003000:	60aa      	str	r2, [r5, #8]
 8003002:	7823      	ldrb	r3, [r4, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003004:	e6ef      	b.n	8002de6 <follow_path+0x22>
			ns = dp->fn[NSFLAG];
 8003006:	69ab      	ldr	r3, [r5, #24]
 8003008:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
 800300a:	2804      	cmp	r0, #4
 800300c:	f47f af34 	bne.w	8002e78 <follow_path+0xb4>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003010:	f013 0f04 	tst.w	r3, #4
 8003014:	bf08      	it	eq
 8003016:	2005      	moveq	r0, #5
}
 8003018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			cf |= NS_LOSS | NS_LFN; continue;
 800301c:	f046 0603 	orr.w	r6, r6, #3
 8003020:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8003024:	e775      	b.n	8002f12 <follow_path+0x14e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003026:	4283      	cmp	r3, r0
 8003028:	d1f8      	bne.n	800301c <follow_path+0x258>
			if (ni == 11) {				/* Long extension */
 800302a:	f1be 0f0b 	cmp.w	lr, #11
 800302e:	d01e      	beq.n	800306e <follow_path+0x2aa>
			b <<= 2; continue;
 8003030:	0089      	lsls	r1, r1, #2
 8003032:	b2c9      	uxtb	r1, r1
 8003034:	4618      	mov	r0, r3
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003036:	f04f 0e0b 	mov.w	lr, #11
 800303a:	f04f 0c08 	mov.w	ip, #8
 800303e:	e7ef      	b.n	8003020 <follow_path+0x25c>
		cf |= NS_LFN;
 8003040:	f046 0602 	orr.w	r6, r6, #2
 8003044:	e7bb      	b.n	8002fbe <follow_path+0x1fa>
	*path = &p[si];						/* Return pointer to the next segment */
 8003046:	441c      	add	r4, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003048:	2604      	movs	r6, #4
 800304a:	e726      	b.n	8002e9a <follow_path+0xd6>
			cf |= NS_LFN;				/* Force create LFN entry */
 800304c:	f046 0602 	orr.w	r6, r6, #2
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003050:	f04f 095f 	mov.w	r9, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8003054:	69aa      	ldr	r2, [r5, #24]
 8003056:	f10c 0801 	add.w	r8, ip, #1
 800305a:	f802 900c 	strb.w	r9, [r2, ip]
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800305e:	f046 0603 	orr.w	r6, r6, #3
		dp->fn[i++] = (BYTE)w;
 8003062:	fa1f fc88 	uxth.w	ip, r8
 8003066:	e7db      	b.n	8003020 <follow_path+0x25c>
				res = FR_NO_PATH; break;
 8003068:	2005      	movs	r0, #5
}
 800306a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800306e:	69ab      	ldr	r3, [r5, #24]
				cf |= NS_LOSS | NS_LFN; break;
 8003070:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	2ae5      	cmp	r2, #229	; 0xe5
 8003078:	d18f      	bne.n	8002f9a <follow_path+0x1d6>
 800307a:	2205      	movs	r2, #5
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	69ab      	ldr	r3, [r5, #24]
 8003080:	e78b      	b.n	8002f9a <follow_path+0x1d6>
					if (IsLower(w)) {	/* ASCII small capital */
 8003082:	f1a2 0861 	sub.w	r8, r2, #97	; 0x61
 8003086:	f1b8 0f19 	cmp.w	r8, #25
						b |= 1; w -= 0x20;
 800308a:	bf97      	itett	ls
 800308c:	3a20      	subls	r2, #32
 800308e:	fa5f f982 	uxtbhi.w	r9, r2
 8003092:	fa5f f982 	uxtbls.w	r9, r2
 8003096:	f041 0101 	orrls.w	r1, r1, #1
 800309a:	e762      	b.n	8002f62 <follow_path+0x19e>
 800309c:	08005b3d 	.word	0x08005b3d
 80030a0:	08005b49 	.word	0x08005b49

080030a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80030a4:	b510      	push	{r4, lr}
 80030a6:	b084      	sub	sp, #16
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80030a8:	ab04      	add	r3, sp, #16
 80030aa:	f843 1d04 	str.w	r1, [r3, #-4]!
{
 80030ae:	9001      	str	r0, [sp, #4]


	vol = get_ldnumber(&rp);
 80030b0:	4618      	mov	r0, r3
{
 80030b2:	4614      	mov	r4, r2
 80030b4:	9100      	str	r1, [sp, #0]
	vol = get_ldnumber(&rp);
 80030b6:	f7fe ff47 	bl	8001f48 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80030ba:	1e02      	subs	r2, r0, #0
 80030bc:	db14      	blt.n	80030e8 <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80030be:	490f      	ldr	r1, [pc, #60]	; (80030fc <f_mount+0x58>)
 80030c0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]

	if (cfs) {
 80030c4:	b10b      	cbz	r3, 80030ca <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80030c6:	2000      	movs	r0, #0
 80030c8:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 80030ca:	9b01      	ldr	r3, [sp, #4]
 80030cc:	b13b      	cbz	r3, 80030de <f_mount+0x3a>
		fs->fs_type = 0;				/* Clear new fs object */
 80030ce:	2000      	movs	r0, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80030d0:	2c01      	cmp	r4, #1
		fs->fs_type = 0;				/* Clear new fs object */
 80030d2:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 80030d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80030d8:	d009      	beq.n	80030ee <f_mount+0x4a>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80030da:	b004      	add	sp, #16
 80030dc:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80030de:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 80030e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80030e4:	b004      	add	sp, #16
 80030e6:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80030e8:	200b      	movs	r0, #11
}
 80030ea:	b004      	add	sp, #16
 80030ec:	bd10      	pop	{r4, pc}
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80030ee:	4602      	mov	r2, r0
 80030f0:	4669      	mov	r1, sp
 80030f2:	a801      	add	r0, sp, #4
 80030f4:	f7ff f820 	bl	8002138 <find_volume>
}
 80030f8:	b004      	add	sp, #16
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	200000d0 	.word	0x200000d0

08003100 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003104:	b08f      	sub	sp, #60	; 0x3c
 8003106:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8003108:	b340      	cbz	r0, 800315c <f_open+0x5c>
	fp->fs = 0;			/* Clear file object */
 800310a:	2300      	movs	r3, #0
 800310c:	4604      	mov	r4, r0
 800310e:	6003      	str	r3, [r0, #0]
 8003110:	4615      	mov	r5, r2
#endif

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8003112:	a805      	add	r0, sp, #20
 8003114:	f002 021e 	and.w	r2, r2, #30
 8003118:	a901      	add	r1, sp, #4
 800311a:	f7ff f80d 	bl	8002138 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800311e:	4606      	mov	r6, r0
 8003120:	b118      	cbz	r0, 800312a <f_open+0x2a>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8003122:	4630      	mov	r0, r6
 8003124:	b00f      	add	sp, #60	; 0x3c
 8003126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_BUF(dj);
 800312a:	4a54      	ldr	r2, [pc, #336]	; (800327c <f_open+0x17c>)
 800312c:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 800312e:	9901      	ldr	r1, [sp, #4]
 8003130:	a805      	add	r0, sp, #20
		INIT_BUF(dj);
 8003132:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
 8003136:	f7ff fe45 	bl	8002dc4 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800313a:	f005 081f 	and.w	r8, r5, #31
 800313e:	f005 031c 	and.w	r3, r5, #28
		if (res == FR_OK) {
 8003142:	b980      	cbnz	r0, 8003166 <f_open+0x66>
		dir = dj.dir;
 8003144:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (!dir)	/* Default directory itself */
 8003146:	2f00      	cmp	r7, #0
 8003148:	d07e      	beq.n	8003248 <f_open+0x148>
 800314a:	7afa      	ldrb	r2, [r7, #11]
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800314c:	b19b      	cbz	r3, 8003176 <f_open+0x76>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800314e:	f012 0f11 	tst.w	r2, #17
 8003152:	d116      	bne.n	8003182 <f_open+0x82>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8003154:	076b      	lsls	r3, r5, #29
 8003156:	d573      	bpl.n	8003240 <f_open+0x140>
						res = FR_EXIST;
 8003158:	2608      	movs	r6, #8
 800315a:	e7e2      	b.n	8003122 <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800315c:	2609      	movs	r6, #9
}
 800315e:	4630      	mov	r0, r6
 8003160:	b00f      	add	sp, #60	; 0x3c
 8003162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003166:	b10b      	cbz	r3, 800316c <f_open+0x6c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8003168:	2804      	cmp	r0, #4
 800316a:	d00e      	beq.n	800318a <f_open+0x8a>
 800316c:	4606      	mov	r6, r0
}
 800316e:	4630      	mov	r0, r6
 8003170:	b00f      	add	sp, #60	; 0x3c
 8003172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8003176:	06d3      	lsls	r3, r2, #27
 8003178:	d405      	bmi.n	8003186 <f_open+0x86>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800317a:	07a8      	lsls	r0, r5, #30
 800317c:	d53a      	bpl.n	80031f4 <f_open+0xf4>
 800317e:	07d1      	lsls	r1, r2, #31
 8003180:	d538      	bpl.n	80031f4 <f_open+0xf4>
						res = FR_DENIED;
 8003182:	2607      	movs	r6, #7
 8003184:	e7cd      	b.n	8003122 <f_open+0x22>
					res = FR_NO_FILE;
 8003186:	2604      	movs	r6, #4
 8003188:	e7cb      	b.n	8003122 <f_open+0x22>
					res = dir_register(&dj);
 800318a:	a805      	add	r0, sp, #20
 800318c:	f7ff fc6a 	bl	8002a64 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003190:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 8003194:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003196:	2800      	cmp	r0, #0
 8003198:	d1e8      	bne.n	800316c <f_open+0x6c>
 800319a:	9b05      	ldr	r3, [sp, #20]
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
 800319c:	2200      	movs	r2, #0
 800319e:	2146      	movs	r1, #70	; 0x46
 80031a0:	2021      	movs	r0, #33	; 0x21
 80031a2:	7479      	strb	r1, [r7, #17]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
 80031a4:	7679      	strb	r1, [r7, #25]
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
 80031a6:	73ba      	strb	r2, [r7, #14]
 80031a8:	73fa      	strb	r2, [r7, #15]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
 80031aa:	75ba      	strb	r2, [r7, #22]
 80031ac:	75fa      	strb	r2, [r7, #23]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80031ae:	72fa      	strb	r2, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* Reset file size */
 80031b0:	773a      	strb	r2, [r7, #28]
 80031b2:	777a      	strb	r2, [r7, #29]
 80031b4:	77ba      	strb	r2, [r7, #30]
 80031b6:	77fa      	strb	r2, [r7, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
 80031b8:	7438      	strb	r0, [r7, #16]
				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
 80031ba:	7638      	strb	r0, [r7, #24]
	if (fs->fs_type == FS_FAT32)
 80031bc:	781a      	ldrb	r2, [r3, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 80031be:	7ef9      	ldrb	r1, [r7, #27]
 80031c0:	7ebd      	ldrb	r5, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 80031c2:	2a03      	cmp	r2, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80031c4:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32)
 80031c8:	d105      	bne.n	80031d6 <f_open+0xd6>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80031ca:	7d79      	ldrb	r1, [r7, #21]
 80031cc:	7d3a      	ldrb	r2, [r7, #20]
 80031ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031d2:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 80031d6:	2200      	movs	r2, #0
				dj.fs->wflag = 1;
 80031d8:	2101      	movs	r1, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 80031da:	76ba      	strb	r2, [r7, #26]
 80031dc:	76fa      	strb	r2, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80031de:	753a      	strb	r2, [r7, #20]
 80031e0:	757a      	strb	r2, [r7, #21]
				dj.fs->wflag = 1;
 80031e2:	7119      	strb	r1, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80031e4:	b14d      	cbz	r5, 80031fa <f_open+0xfa>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80031e6:	428d      	cmp	r5, r1
 80031e8:	d002      	beq.n	80031f0 <f_open+0xf0>
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	4295      	cmp	r5, r2
 80031ee:	d32d      	bcc.n	800324c <f_open+0x14c>
		res = FR_INT_ERR;
 80031f0:	2602      	movs	r6, #2
 80031f2:	e796      	b.n	8003122 <f_open+0x22>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80031f4:	072a      	lsls	r2, r5, #28
 80031f6:	9b05      	ldr	r3, [sp, #20]
 80031f8:	d501      	bpl.n	80031fe <f_open+0xfe>
				mode |= FA__WRITTEN;
 80031fa:	f048 0820 	orr.w	r8, r8, #32
			fp->err = 0;						/* Clear error flag */
 80031fe:	2100      	movs	r1, #0
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			fp->err = 0;						/* Clear error flag */
 8003202:	71e1      	strb	r1, [r4, #7]
			fp->dir_ptr = dir;
 8003204:	e9c4 2707 	strd	r2, r7, [r4, #28]
			fp->flag = mode;					/* File access mode */
 8003208:	f884 8006 	strb.w	r8, [r4, #6]
	if (fs->fs_type == FS_FAT32)
 800320c:	7819      	ldrb	r1, [r3, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 800320e:	7ef8      	ldrb	r0, [r7, #27]
 8003210:	7eba      	ldrb	r2, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 8003212:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8003214:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 8003218:	d105      	bne.n	8003226 <f_open+0x126>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800321a:	7d78      	ldrb	r0, [r7, #21]
 800321c:	7d39      	ldrb	r1, [r7, #20]
 800321e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003222:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003226:	6122      	str	r2, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8003228:	69f8      	ldr	r0, [r7, #28]
			fp->id = fp->fs->id;
 800322a:	88da      	ldrh	r2, [r3, #6]
			fp->fptr = 0;						/* File pointer */
 800322c:	2100      	movs	r1, #0
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800322e:	60e0      	str	r0, [r4, #12]
}
 8003230:	4630      	mov	r0, r6
			fp->fs = dj.fs;	 					/* Validate file object */
 8003232:	6023      	str	r3, [r4, #0]
			fp->id = fp->fs->id;
 8003234:	80a2      	strh	r2, [r4, #4]
			fp->fptr = 0;						/* File pointer */
 8003236:	60a1      	str	r1, [r4, #8]
			fp->dsect = 0;
 8003238:	61a1      	str	r1, [r4, #24]
}
 800323a:	b00f      	add	sp, #60	; 0x3c
 800323c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003240:	072d      	lsls	r5, r5, #28
 8003242:	9b05      	ldr	r3, [sp, #20]
 8003244:	d5db      	bpl.n	80031fe <f_open+0xfe>
 8003246:	e7a9      	b.n	800319c <f_open+0x9c>
				res = FR_INVALID_NAME;
 8003248:	2606      	movs	r6, #6
 800324a:	e76a      	b.n	8003122 <f_open+0x22>
 800324c:	4629      	mov	r1, r5
 800324e:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8003250:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
 8003254:	f7ff fb14 	bl	8002880 <remove_chain.part.6>
					if (res == FR_OK) {
 8003258:	2800      	cmp	r0, #0
 800325a:	d187      	bne.n	800316c <f_open+0x6c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800325c:	9b05      	ldr	r3, [sp, #20]
 800325e:	3d01      	subs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8003262:	60dd      	str	r5, [r3, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003264:	4591      	cmp	r9, r2
 8003266:	d0c8      	beq.n	80031fa <f_open+0xfa>
 8003268:	4649      	mov	r1, r9
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ff1e 	bl	80020ac <move_window.part.2>
		if (res == FR_OK) {
 8003270:	2800      	cmp	r0, #0
 8003272:	f47f af7b 	bne.w	800316c <f_open+0x6c>
 8003276:	9b05      	ldr	r3, [sp, #20]
 8003278:	e7bf      	b.n	80031fa <f_open+0xfa>
 800327a:	bf00      	nop
 800327c:	200000d8 	.word	0x200000d8

08003280 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8003280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	469a      	mov	sl, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8003286:	2300      	movs	r3, #0
{
 8003288:	b083      	sub	sp, #12
	*bw = 0;	/* Clear write byte counter */
 800328a:	f8aa 3000 	strh.w	r3, [sl]
{
 800328e:	4688      	mov	r8, r1
 8003290:	4617      	mov	r7, r2
 8003292:	4606      	mov	r6, r0

	res = validate(fp);						/* Check validity */
 8003294:	f7fe fe7a 	bl	8001f8c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8003298:	4681      	mov	r9, r0
 800329a:	2800      	cmp	r0, #0
 800329c:	d14d      	bne.n	800333a <f_write+0xba>
	if (fp->err)							/* Check error */
 800329e:	79f3      	ldrb	r3, [r6, #7]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d14e      	bne.n	8003342 <f_write+0xc2>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80032a4:	79b3      	ldrb	r3, [r6, #6]
 80032a6:	079a      	lsls	r2, r3, #30
 80032a8:	f140 80a5 	bpl.w	80033f6 <f_write+0x176>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80032ac:	68b2      	ldr	r2, [r6, #8]
 80032ae:	42d7      	cmn	r7, r2
 80032b0:	d23c      	bcs.n	800332c <f_write+0xac>

	for ( ;  btw;							/* Repeat until all data written */
 80032b2:	2f00      	cmp	r7, #0
 80032b4:	d03a      	beq.n	800332c <f_write+0xac>
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
 80032b6:	f04f 0b01 	mov.w	fp, #1
					fp->fs->wflag = 0;
 80032ba:	9001      	str	r0, [sp, #4]
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80032bc:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80032c0:	6830      	ldr	r0, [r6, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d042      	beq.n	800334c <f_write+0xcc>
 80032c6:	69b5      	ldr	r5, [r6, #24]
 80032c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80032ca:	f5c3 7400 	rsb	r4, r3, #512	; 0x200
 80032ce:	b2a4      	uxth	r4, r4
 80032d0:	42bc      	cmp	r4, r7
 80032d2:	bf28      	it	cs
 80032d4:	463c      	movcs	r4, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80032d6:	428d      	cmp	r5, r1
 80032d8:	d008      	beq.n	80032ec <f_write+0x6c>
 80032da:	4629      	mov	r1, r5
 80032dc:	f7fe fee6 	bl	80020ac <move_window.part.2>
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d169      	bne.n	80033b8 <f_write+0x138>
 80032e4:	68b2      	ldr	r2, [r6, #8]
 80032e6:	6830      	ldr	r0, [r6, #0]
 80032e8:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80032ec:	332f      	adds	r3, #47	; 0x2f
 80032ee:	4418      	add	r0, r3
	while (cnt--)
 80032f0:	4643      	mov	r3, r8
 80032f2:	1e62      	subs	r2, r4, #1
 80032f4:	b292      	uxth	r2, r2
 80032f6:	3201      	adds	r2, #1
 80032f8:	4442      	add	r2, r8
		*d++ = *s++;
 80032fa:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 80032fe:	4293      	cmp	r3, r2
		*d++ = *s++;
 8003300:	f800 1f01 	strb.w	r1, [r0, #1]!
	while (cnt--)
 8003304:	d1f9      	bne.n	80032fa <f_write+0x7a>
		fp->fs->wflag = 1;
 8003306:	6833      	ldr	r3, [r6, #0]
 8003308:	68b2      	ldr	r2, [r6, #8]
 800330a:	f883 b004 	strb.w	fp, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800330e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003312:	1b3f      	subs	r7, r7, r4
 8003314:	4422      	add	r2, r4
 8003316:	4423      	add	r3, r4
 8003318:	b2bf      	uxth	r7, r7
 800331a:	60b2      	str	r2, [r6, #8]
 800331c:	44a0      	add	r8, r4
 800331e:	f8aa 3000 	strh.w	r3, [sl]
	for ( ;  btw;							/* Repeat until all data written */
 8003322:	2f00      	cmp	r7, #0
 8003324:	d1ca      	bne.n	80032bc <f_write+0x3c>
 8003326:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800332a:	79b3      	ldrb	r3, [r6, #6]
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800332c:	68f1      	ldr	r1, [r6, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800332e:	f043 0320 	orr.w	r3, r3, #32
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8003332:	4291      	cmp	r1, r2
 8003334:	bf38      	it	cc
 8003336:	60f2      	strcc	r2, [r6, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8003338:	71b3      	strb	r3, [r6, #6]

	LEAVE_FF(fp->fs, FR_OK);
}
 800333a:	4648      	mov	r0, r9
 800333c:	b003      	add	sp, #12
 800333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003342:	4699      	mov	r9, r3
 8003344:	4648      	mov	r0, r9
 8003346:	b003      	add	sp, #12
 8003348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800334c:	7883      	ldrb	r3, [r0, #2]
 800334e:	3b01      	subs	r3, #1
 8003350:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8003354:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
 8003358:	d10d      	bne.n	8003376 <f_write+0xf6>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800335a:	2a00      	cmp	r2, #0
 800335c:	d157      	bne.n	800340e <f_write+0x18e>
					clst = fp->sclust;		/* Follow from the origin */
 800335e:	6932      	ldr	r2, [r6, #16]
					if (clst == 0)			/* When no cluster is allocated, */
 8003360:	2a00      	cmp	r2, #0
 8003362:	d05f      	beq.n	8003424 <f_write+0x1a4>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003364:	2a01      	cmp	r2, #1
 8003366:	d07b      	beq.n	8003460 <f_write+0x1e0>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003368:	1c53      	adds	r3, r2, #1
 800336a:	d025      	beq.n	80033b8 <f_write+0x138>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800336c:	6931      	ldr	r1, [r6, #16]
				fp->clust = clst;			/* Update current cluster */
 800336e:	6172      	str	r2, [r6, #20]
 8003370:	6830      	ldr	r0, [r6, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8003372:	b901      	cbnz	r1, 8003376 <f_write+0xf6>
 8003374:	6132      	str	r2, [r6, #16]
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 8003376:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003378:	69b2      	ldr	r2, [r6, #24]
 800337a:	4291      	cmp	r1, r2
 800337c:	d02d      	beq.n	80033da <f_write+0x15a>
	clst -= 2;
 800337e:	6975      	ldr	r5, [r6, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003380:	6942      	ldr	r2, [r0, #20]
	clst -= 2;
 8003382:	3d02      	subs	r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003384:	3a02      	subs	r2, #2
 8003386:	4295      	cmp	r5, r2
 8003388:	d26a      	bcs.n	8003460 <f_write+0x1e0>
	return clst * fs->csize + fs->database;
 800338a:	7881      	ldrb	r1, [r0, #2]
 800338c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800338e:	fb05 2501 	mla	r5, r5, r1, r2
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8003392:	2d00      	cmp	r5, #0
 8003394:	d064      	beq.n	8003460 <f_write+0x1e0>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8003396:	0a7c      	lsrs	r4, r7, #9
			sect += csect;
 8003398:	444d      	add	r5, r9
			if (cc) {						/* Write maximum contiguous sectors directly */
 800339a:	d015      	beq.n	80033c8 <f_write+0x148>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800339c:	eb09 0204 	add.w	r2, r9, r4
 80033a0:	428a      	cmp	r2, r1
					cc = fp->fs->csize - csect;
 80033a2:	bfc4      	itt	gt
 80033a4:	eba1 0409 	subgt.w	r4, r1, r9
 80033a8:	b2a4      	uxthgt	r4, r4
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80033aa:	7840      	ldrb	r0, [r0, #1]
 80033ac:	4623      	mov	r3, r4
 80033ae:	462a      	mov	r2, r5
 80033b0:	4641      	mov	r1, r8
 80033b2:	f7fe fc35 	bl	8001c20 <disk_write>
 80033b6:	b308      	cbz	r0, 80033fc <f_write+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80033b8:	f04f 0901 	mov.w	r9, #1
}
 80033bc:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80033be:	f886 9007 	strb.w	r9, [r6, #7]
}
 80033c2:	b003      	add	sp, #12
 80033c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
 80033c8:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d20d      	bcs.n	80033ec <f_write+0x16c>
 80033d0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			fp->dsect = sect;
 80033d2:	61b5      	str	r5, [r6, #24]
 80033d4:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80033d8:	e777      	b.n	80032ca <f_write+0x4a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033da:	7902      	ldrb	r2, [r0, #4]
 80033dc:	2a00      	cmp	r2, #0
 80033de:	d0ce      	beq.n	800337e <f_write+0xfe>
 80033e0:	f7fe fdea 	bl	8001fb8 <sync_window.part.1>
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d1e7      	bne.n	80033b8 <f_write+0x138>
 80033e8:	6830      	ldr	r0, [r6, #0]
 80033ea:	e7c8      	b.n	800337e <f_write+0xfe>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80033ec:	7903      	ldrb	r3, [r0, #4]
 80033ee:	bb03      	cbnz	r3, 8003432 <f_write+0x1b2>
				fp->fs->winsect = sect;
 80033f0:	4629      	mov	r1, r5
 80033f2:	62c5      	str	r5, [r0, #44]	; 0x2c
 80033f4:	e7ed      	b.n	80033d2 <f_write+0x152>
		LEAVE_FF(fp->fs, FR_DENIED);
 80033f6:	f04f 0907 	mov.w	r9, #7
 80033fa:	e79e      	b.n	800333a <f_write+0xba>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 80033fc:	6832      	ldr	r2, [r6, #0]
 80033fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003400:	1b5d      	subs	r5, r3, r5
 8003402:	42a5      	cmp	r5, r4
 8003404:	d31c      	bcc.n	8003440 <f_write+0x1c0>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8003406:	0264      	lsls	r4, r4, #9
 8003408:	b2a4      	uxth	r4, r4
 800340a:	68b2      	ldr	r2, [r6, #8]
				continue;
 800340c:	e77f      	b.n	800330e <f_write+0x8e>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800340e:	6971      	ldr	r1, [r6, #20]
 8003410:	f7ff f938 	bl	8002684 <create_chain>
 8003414:	4602      	mov	r2, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003416:	2a00      	cmp	r2, #0
 8003418:	d1a4      	bne.n	8003364 <f_write+0xe4>
 800341a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800341e:	68b2      	ldr	r2, [r6, #8]
 8003420:	79b3      	ldrb	r3, [r6, #6]
 8003422:	e783      	b.n	800332c <f_write+0xac>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8003424:	4649      	mov	r1, r9
 8003426:	f7ff f92d 	bl	8002684 <create_chain>
 800342a:	4602      	mov	r2, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800342c:	2a00      	cmp	r2, #0
 800342e:	d199      	bne.n	8003364 <f_write+0xe4>
 8003430:	e7f3      	b.n	800341a <f_write+0x19a>
 8003432:	f7fe fdc1 	bl	8001fb8 <sync_window.part.1>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
 8003436:	2800      	cmp	r0, #0
 8003438:	d1be      	bne.n	80033b8 <f_write+0x138>
 800343a:	6830      	ldr	r0, [r6, #0]
 800343c:	68b2      	ldr	r2, [r6, #8]
 800343e:	e7d7      	b.n	80033f0 <f_write+0x170>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
 8003440:	eb08 2345 	add.w	r3, r8, r5, lsl #9
 8003444:	322f      	adds	r2, #47	; 0x2f
 8003446:	f503 7000 	add.w	r0, r3, #512	; 0x200
		*d++ = *s++;
 800344a:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 800344e:	4283      	cmp	r3, r0
		*d++ = *s++;
 8003450:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 8003454:	d1f9      	bne.n	800344a <f_write+0x1ca>
					fp->fs->wflag = 0;
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	6833      	ldr	r3, [r6, #0]
 800345c:	711a      	strb	r2, [r3, #4]
 800345e:	e7d2      	b.n	8003406 <f_write+0x186>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003460:	f04f 0902 	mov.w	r9, #2
 8003464:	f886 9007 	strb.w	r9, [r6, #7]
 8003468:	e767      	b.n	800333a <f_write+0xba>
 800346a:	bf00      	nop

0800346c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8003470:	f7fe fd8c 	bl	8001f8c <validate>
	if (res == FR_OK) {
 8003474:	2800      	cmp	r0, #0
 8003476:	d136      	bne.n	80034e6 <f_sync+0x7a>
		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
 8003478:	79a3      	ldrb	r3, [r4, #6]
 800347a:	069b      	lsls	r3, r3, #26
 800347c:	d533      	bpl.n	80034e6 <f_sync+0x7a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003482:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003484:	4299      	cmp	r1, r3
 8003486:	d002      	beq.n	800348e <f_sync+0x22>
 8003488:	f7fe fe10 	bl	80020ac <move_window.part.2>
			if (res == FR_OK) {
 800348c:	bb58      	cbnz	r0, 80034e6 <f_sync+0x7a>
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update modified time */
				ST_DWORD(dir + DIR_WrtTime, tm);
 800348e:	2621      	movs	r6, #33	; 0x21
 8003490:	2100      	movs	r1, #0
 8003492:	2046      	movs	r0, #70	; 0x46
				ST_WORD(dir + DIR_LstAccDate, 0);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
 8003494:	2501      	movs	r5, #1
				dir = fp->dir_ptr;
 8003496:	6a23      	ldr	r3, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8003498:	7ada      	ldrb	r2, [r3, #11]
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80034a0:	68e2      	ldr	r2, [r4, #12]
 80034a2:	771a      	strb	r2, [r3, #28]
 80034a4:	89a2      	ldrh	r2, [r4, #12]
 80034a6:	0a12      	lsrs	r2, r2, #8
 80034a8:	775a      	strb	r2, [r3, #29]
 80034aa:	89e2      	ldrh	r2, [r4, #14]
 80034ac:	779a      	strb	r2, [r3, #30]
 80034ae:	7be2      	ldrb	r2, [r4, #15]
 80034b0:	77da      	strb	r2, [r3, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80034b2:	6922      	ldr	r2, [r4, #16]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80034b4:	761e      	strb	r6, [r3, #24]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80034b6:	769a      	strb	r2, [r3, #26]
 80034b8:	f3c2 2607 	ubfx	r6, r2, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80034bc:	0c12      	lsrs	r2, r2, #16
 80034be:	751a      	strb	r2, [r3, #20]
 80034c0:	0a12      	lsrs	r2, r2, #8
				ST_DWORD(dir + DIR_WrtTime, tm);
 80034c2:	7658      	strb	r0, [r3, #25]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80034c4:	76de      	strb	r6, [r3, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80034c6:	755a      	strb	r2, [r3, #21]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80034c8:	7599      	strb	r1, [r3, #22]
 80034ca:	75d9      	strb	r1, [r3, #23]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80034cc:	7499      	strb	r1, [r3, #18]
 80034ce:	74d9      	strb	r1, [r3, #19]
				fp->flag &= ~FA__WRITTEN;
 80034d0:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
 80034d2:	6822      	ldr	r2, [r4, #0]
				fp->flag &= ~FA__WRITTEN;
 80034d4:	f023 0320 	bic.w	r3, r3, #32
 80034d8:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
 80034da:	7115      	strb	r5, [r2, #4]
				res = sync_fs(fp->fs);
 80034dc:	4610      	mov	r0, r2
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80034de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80034e2:	f7fe bd8f 	b.w	8002004 <sync_fs>
}
 80034e6:	bd70      	pop	{r4, r5, r6, pc}

080034e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80034e8:	b510      	push	{r4, lr}
 80034ea:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80034ec:	f7ff ffbe 	bl	800346c <f_sync>
	if (res == FR_OK)
 80034f0:	b100      	cbz	r0, 80034f4 <f_close+0xc>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80034f2:	bd10      	pop	{r4, pc}
		res = validate(fp);				/* Lock volume */
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7fe fd49 	bl	8001f8c <validate>
		if (res == FR_OK) {
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d1f9      	bne.n	80034f2 <f_close+0xa>
				fp->fs = 0;				/* Invalidate file object */
 80034fe:	6020      	str	r0, [r4, #0]
}
 8003500:	bd10      	pop	{r4, pc}
 8003502:	bf00      	nop

08003504 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	460d      	mov	r5, r1
 8003508:	4604      	mov	r4, r0
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800350a:	f7fe fd3f 	bl	8001f8c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800350e:	4606      	mov	r6, r0
 8003510:	2800      	cmp	r0, #0
 8003512:	d130      	bne.n	8003576 <f_lseek+0x72>
	if (fp->err)						/* Check error */
 8003514:	79e3      	ldrb	r3, [r4, #7]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d12f      	bne.n	800357a <f_lseek+0x76>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800351a:	68e3      	ldr	r3, [r4, #12]
 800351c:	42ab      	cmp	r3, r5
 800351e:	d204      	bcs.n	800352a <f_lseek+0x26>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8003520:	79a2      	ldrb	r2, [r4, #6]
 8003522:	f012 0f02 	tst.w	r2, #2
 8003526:	bf08      	it	eq
 8003528:	461d      	moveq	r5, r3
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 800352a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800352c:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
 800352e:	60a2      	str	r2, [r4, #8]
		if (ofs) {
 8003530:	b30d      	cbz	r5, 8003576 <f_lseek+0x72>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8003532:	6820      	ldr	r0, [r4, #0]
 8003534:	7887      	ldrb	r7, [r0, #2]
 8003536:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8003538:	b13b      	cbz	r3, 800354a <f_lseek+0x46>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800353a:	3b01      	subs	r3, #1
 800353c:	1e6a      	subs	r2, r5, #1
 800353e:	fbb3 f1f7 	udiv	r1, r3, r7
 8003542:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8003546:	428a      	cmp	r2, r1
 8003548:	d254      	bcs.n	80035f4 <f_lseek+0xf0>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800354a:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800354c:	2900      	cmp	r1, #0
 800354e:	d057      	beq.n	8003600 <f_lseek+0xfc>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
 8003550:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
 8003552:	b9a9      	cbnz	r1, 8003580 <f_lseek+0x7c>
 8003554:	68a3      	ldr	r3, [r4, #8]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8003556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800355a:	2a00      	cmp	r2, #0
 800355c:	d063      	beq.n	8003626 <f_lseek+0x122>
 800355e:	69a2      	ldr	r2, [r4, #24]
 8003560:	428a      	cmp	r2, r1
 8003562:	68e2      	ldr	r2, [r4, #12]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
 8003564:	bf18      	it	ne
 8003566:	61a1      	strne	r1, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8003568:	429a      	cmp	r2, r3
 800356a:	d204      	bcs.n	8003576 <f_lseek+0x72>
			fp->fsize = fp->fptr;
			fp->flag |= FA__WRITTEN;
 800356c:	79a2      	ldrb	r2, [r4, #6]
			fp->fsize = fp->fptr;
 800356e:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
 8003570:	f042 0320 	orr.w	r3, r2, #32
 8003574:	71a3      	strb	r3, [r4, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8003576:	4630      	mov	r0, r6
 8003578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800357a:	461e      	mov	r6, r3
 800357c:	4630      	mov	r0, r6
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while (ofs > bcs) {						/* Cluster following loop */
 8003580:	42bd      	cmp	r5, r7
 8003582:	d94e      	bls.n	8003622 <f_lseek+0x11e>
 8003584:	6820      	ldr	r0, [r4, #0]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003586:	79a3      	ldrb	r3, [r4, #6]
					ofs -= bcs;
 8003588:	1bed      	subs	r5, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800358a:	079a      	lsls	r2, r3, #30
 800358c:	d407      	bmi.n	800359e <f_lseek+0x9a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800358e:	2901      	cmp	r1, #1
 8003590:	d902      	bls.n	8003598 <f_lseek+0x94>
 8003592:	6943      	ldr	r3, [r0, #20]
 8003594:	428b      	cmp	r3, r1
 8003596:	d829      	bhi.n	80035ec <f_lseek+0xe8>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003598:	2602      	movs	r6, #2
 800359a:	71e6      	strb	r6, [r4, #7]
 800359c:	e7eb      	b.n	8003576 <f_lseek+0x72>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800359e:	f7ff f871 	bl	8002684 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 80035a2:	4601      	mov	r1, r0
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d039      	beq.n	800361c <f_lseek+0x118>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80035a8:	1c4b      	adds	r3, r1, #1
 80035aa:	d032      	beq.n	8003612 <f_lseek+0x10e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80035ac:	2901      	cmp	r1, #1
 80035ae:	d9f3      	bls.n	8003598 <f_lseek+0x94>
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	6943      	ldr	r3, [r0, #20]
 80035b4:	428b      	cmp	r3, r1
 80035b6:	d9ef      	bls.n	8003598 <f_lseek+0x94>
					fp->fptr += bcs;
 80035b8:	68a3      	ldr	r3, [r4, #8]
				while (ofs > bcs) {						/* Cluster following loop */
 80035ba:	42af      	cmp	r7, r5
					fp->fptr += bcs;
 80035bc:	443b      	add	r3, r7
					fp->clust = clst;
 80035be:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
 80035c0:	60a3      	str	r3, [r4, #8]
				while (ofs > bcs) {						/* Cluster following loop */
 80035c2:	d3e0      	bcc.n	8003586 <f_lseek+0x82>
				fp->fptr += ofs;
 80035c4:	442b      	add	r3, r5
				if (ofs % SS(fp->fs)) {
 80035c6:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
 80035ca:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
 80035cc:	b322      	cbz	r2, 8003618 <f_lseek+0x114>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80035ce:	6820      	ldr	r0, [r4, #0]
	clst -= 2;
 80035d0:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80035d2:	6942      	ldr	r2, [r0, #20]
 80035d4:	3a02      	subs	r2, #2
 80035d6:	4297      	cmp	r7, r2
 80035d8:	d2de      	bcs.n	8003598 <f_lseek+0x94>
	return clst * fs->csize + fs->database;
 80035da:	7881      	ldrb	r1, [r0, #2]
 80035dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80035de:	fb07 2101 	mla	r1, r7, r1, r2
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d0d8      	beq.n	8003598 <f_lseek+0x94>
					nsect += ofs / SS(fp->fs);
 80035e6:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80035ea:	e7b4      	b.n	8003556 <f_lseek+0x52>
 80035ec:	f7fe feea 	bl	80023c4 <get_fat.part.4>
 80035f0:	4601      	mov	r1, r0
 80035f2:	e7d9      	b.n	80035a8 <f_lseek+0xa4>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80035f4:	427a      	negs	r2, r7
 80035f6:	4013      	ands	r3, r2
 80035f8:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
 80035fa:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
 80035fc:	6961      	ldr	r1, [r4, #20]
 80035fe:	e7a8      	b.n	8003552 <f_lseek+0x4e>
					clst = create_chain(fp->fs, 0);
 8003600:	f7ff f840 	bl	8002684 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003604:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8003606:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003608:	d0c6      	beq.n	8003598 <f_lseek+0x94>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800360a:	3001      	adds	r0, #1
 800360c:	d001      	beq.n	8003612 <f_lseek+0x10e>
					fp->sclust = clst;
 800360e:	6121      	str	r1, [r4, #16]
 8003610:	e79e      	b.n	8003550 <f_lseek+0x4c>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003612:	2601      	movs	r6, #1
 8003614:	71e6      	strb	r6, [r4, #7]
 8003616:	e7ae      	b.n	8003576 <f_lseek+0x72>
		fp->fptr = nsect = 0;
 8003618:	4611      	mov	r1, r2
 800361a:	e79c      	b.n	8003556 <f_lseek+0x52>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800361c:	463d      	mov	r5, r7
 800361e:	68a3      	ldr	r3, [r4, #8]
 8003620:	e7d0      	b.n	80035c4 <f_lseek+0xc0>
 8003622:	68a3      	ldr	r3, [r4, #8]
 8003624:	e7ce      	b.n	80035c4 <f_lseek+0xc0>
 8003626:	68e2      	ldr	r2, [r4, #12]
 8003628:	e79e      	b.n	8003568 <f_lseek+0x64>
 800362a:	bf00      	nop

0800362c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800362c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800362e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003632:	490d      	ldr	r1, [pc, #52]	; (8003668 <HAL_InitTick+0x3c>)
 8003634:	4a0d      	ldr	r2, [pc, #52]	; (800366c <HAL_InitTick+0x40>)
 8003636:	7809      	ldrb	r1, [r1, #0]
 8003638:	6812      	ldr	r2, [r2, #0]
 800363a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800363e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003640:	fbb2 f0f3 	udiv	r0, r2, r3
 8003644:	f000 fbf8 	bl	8003e38 <HAL_SYSTICK_Config>
 8003648:	b908      	cbnz	r0, 800364e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800364a:	2d0f      	cmp	r5, #15
 800364c:	d901      	bls.n	8003652 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800364e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003650:	bd38      	pop	{r3, r4, r5, pc}
 8003652:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003654:	4602      	mov	r2, r0
 8003656:	4629      	mov	r1, r5
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f000 fba8 	bl	8003db0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_InitTick+0x44>)
 8003662:	4620      	mov	r0, r4
 8003664:	601d      	str	r5, [r3, #0]
}
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	20000005 	.word	0x20000005
 800366c:	20000000 	.word	0x20000000
 8003670:	20000008 	.word	0x20000008

08003674 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003674:	4a07      	ldr	r2, [pc, #28]	; (8003694 <HAL_Init+0x20>)
{
 8003676:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003678:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800367c:	f043 0310 	orr.w	r3, r3, #16
 8003680:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003682:	f000 fb83 	bl	8003d8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003686:	2000      	movs	r0, #0
 8003688:	f7ff ffd0 	bl	800362c <HAL_InitTick>
  HAL_MspInit();
 800368c:	f7fd fe3a 	bl	8001304 <HAL_MspInit>
}
 8003690:	2000      	movs	r0, #0
 8003692:	bd08      	pop	{r3, pc}
 8003694:	40022000 	.word	0x40022000

08003698 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003698:	4a03      	ldr	r2, [pc, #12]	; (80036a8 <HAL_IncTick+0x10>)
 800369a:	4b04      	ldr	r3, [pc, #16]	; (80036ac <HAL_IncTick+0x14>)
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	440b      	add	r3, r1
 80036a2:	6013      	str	r3, [r2, #0]
}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000710 	.word	0x20000710
 80036ac:	20000005 	.word	0x20000005

080036b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80036b0:	4b01      	ldr	r3, [pc, #4]	; (80036b8 <HAL_GetTick+0x8>)
 80036b2:	6818      	ldr	r0, [r3, #0]
}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000710 	.word	0x20000710

080036bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80036c0:	f7ff fff6 	bl	80036b0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036c4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80036c6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80036c8:	d002      	beq.n	80036d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_Delay+0x20>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036d0:	f7ff ffee 	bl	80036b0 <HAL_GetTick>
 80036d4:	1b40      	subs	r0, r0, r5
 80036d6:	42a0      	cmp	r0, r4
 80036d8:	d3fa      	bcc.n	80036d0 <HAL_Delay+0x14>
  {
  }
}
 80036da:	bd38      	pop	{r3, r4, r5, pc}
 80036dc:	20000005 	.word	0x20000005

080036e0 <HAL_ADC_ConvCpltCallback>:
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop

080036e4 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e8:	f012 0f50 	tst.w	r2, #80	; 0x50
 80036ec:	d002      	beq.n	80036f4 <ADC_DMAConvCplt+0x10>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	4718      	bx	r3
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036f6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80036fc:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003700:	688a      	ldr	r2, [r1, #8]
 8003702:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003706:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800370a:	d003      	beq.n	8003714 <ADC_DMAConvCplt+0x30>
    HAL_ADC_ConvCpltCallback(hadc);
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ffe7 	bl	80036e0 <HAL_ADC_ConvCpltCallback>
  }
}
 8003712:	bd10      	pop	{r4, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003714:	7b1a      	ldrb	r2, [r3, #12]
 8003716:	2a00      	cmp	r2, #0
 8003718:	d1f8      	bne.n	800370c <ADC_DMAConvCplt+0x28>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800371a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800371c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003724:	04d2      	lsls	r2, r2, #19
 8003726:	d4f1      	bmi.n	800370c <ADC_DMAConvCplt+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
 8003730:	e7ec      	b.n	800370c <ADC_DMAConvCplt+0x28>
 8003732:	bf00      	nop

08003734 <HAL_ADC_ConvHalfCpltCallback>:
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003738:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800373a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800373c:	f7ff fffa 	bl	8003734 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003740:	bd08      	pop	{r3, pc}
 8003742:	bf00      	nop

08003744 <HAL_ADC_ErrorCallback>:
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop

08003748 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003748:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800374a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800374c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800374e:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	f042 0204 	orr.w	r2, r2, #4
 800375c:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_ADC_ErrorCallback(hadc);
 800375e:	f7ff fff1 	bl	8003744 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003762:	bd08      	pop	{r3, pc}

08003764 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8003764:	2200      	movs	r2, #0
{ 
 8003766:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8003768:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800376c:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 800376e:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8003770:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003772:	d05f      	beq.n	8003834 <HAL_ADC_ConfigChannel+0xd0>
 8003774:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8003776:	684d      	ldr	r5, [r1, #4]
 8003778:	6804      	ldr	r4, [r0, #0]
 800377a:	2d06      	cmp	r5, #6
  __HAL_LOCK(hadc);
 800377c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8003780:	680a      	ldr	r2, [r1, #0]
 8003782:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003786:	f04f 061f 	mov.w	r6, #31
  if (sConfig->Rank < 7U)
 800378a:	d925      	bls.n	80037d8 <HAL_ADC_ConfigChannel+0x74>
  else if (sConfig->Rank < 13U)
 800378c:	2d0c      	cmp	r5, #12
 800378e:	d847      	bhi.n	8003820 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003790:	3b23      	subs	r3, #35	; 0x23
 8003792:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003794:	409e      	lsls	r6, r3
 8003796:	ea25 0506 	bic.w	r5, r5, r6
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	432b      	orrs	r3, r5
 80037a0:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037a2:	2a09      	cmp	r2, #9
 80037a4:	688b      	ldr	r3, [r1, #8]
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037a6:	f04f 0607 	mov.w	r6, #7
 80037aa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037ae:	d923      	bls.n	80037f8 <HAL_ADC_ConfigChannel+0x94>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037b0:	391e      	subs	r1, #30
 80037b2:	68e5      	ldr	r5, [r4, #12]
 80037b4:	408e      	lsls	r6, r1
 80037b6:	408b      	lsls	r3, r1
 80037b8:	ea25 0106 	bic.w	r1, r5, r6
 80037bc:	430b      	orrs	r3, r1
 80037be:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037c0:	f1a2 0310 	sub.w	r3, r2, #16
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d922      	bls.n	800380e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80037ca:	2200      	movs	r2, #0
 80037cc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	b003      	add	sp, #12
 80037d4:	bc70      	pop	{r4, r5, r6}
 80037d6:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80037d8:	3b05      	subs	r3, #5
 80037da:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80037dc:	409e      	lsls	r6, r3
 80037de:	ea25 0506 	bic.w	r5, r5, r6
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037e8:	2a09      	cmp	r2, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80037ea:	6363      	str	r3, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037ec:	f04f 0607 	mov.w	r6, #7
 80037f0:	688b      	ldr	r3, [r1, #8]
 80037f2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037f6:	d8db      	bhi.n	80037b0 <HAL_ADC_ConfigChannel+0x4c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037f8:	6925      	ldr	r5, [r4, #16]
 80037fa:	408e      	lsls	r6, r1
 80037fc:	408b      	lsls	r3, r1
 80037fe:	ea25 0106 	bic.w	r1, r5, r6
 8003802:	430b      	orrs	r3, r1
 8003804:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003806:	f1a2 0310 	sub.w	r3, r2, #16
 800380a:	2b01      	cmp	r3, #1
 800380c:	d8dc      	bhi.n	80037c8 <HAL_ADC_ConfigChannel+0x64>
    if (hadc->Instance == ADC1)
 800380e:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <HAL_ADC_ConfigChannel+0x114>)
 8003810:	429c      	cmp	r4, r3
 8003812:	d014      	beq.n	800383e <HAL_ADC_ConfigChannel+0xda>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003814:	6a82      	ldr	r2, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003818:	f042 0220 	orr.w	r2, r2, #32
 800381c:	6282      	str	r2, [r0, #40]	; 0x28
 800381e:	e7d4      	b.n	80037ca <HAL_ADC_ConfigChannel+0x66>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003820:	3b41      	subs	r3, #65	; 0x41
 8003822:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003824:	409e      	lsls	r6, r3
 8003826:	ea25 0506 	bic.w	r5, r5, r6
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	432b      	orrs	r3, r5
 8003830:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003832:	e7b6      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8003834:	2302      	movs	r3, #2
}
 8003836:	4618      	mov	r0, r3
 8003838:	b003      	add	sp, #12
 800383a:	bc70      	pop	{r4, r5, r6}
 800383c:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800383e:	68a3      	ldr	r3, [r4, #8]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	d4c1      	bmi.n	80037c8 <HAL_ADC_ConfigChannel+0x64>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003844:	68a3      	ldr	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003846:	2a10      	cmp	r2, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800384c:	60a3      	str	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800384e:	d1bb      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x64>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_ADC_ConfigChannel+0x118>)
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <HAL_ADC_ConfigChannel+0x11c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	0c9b      	lsrs	r3, r3, #18
 800385c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003864:	9b01      	ldr	r3, [sp, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ae      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 800386a:	9b01      	ldr	r3, [sp, #4]
 800386c:	3b01      	subs	r3, #1
 800386e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003870:	9b01      	ldr	r3, [sp, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f9      	bne.n	800386a <HAL_ADC_ConfigChannel+0x106>
 8003876:	e7a7      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x64>
 8003878:	40012400 	.word	0x40012400
 800387c:	20000000 	.word	0x20000000
 8003880:	431bde83 	.word	0x431bde83

08003884 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8003884:	2300      	movs	r3, #0
{
 8003886:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003888:	6802      	ldr	r2, [r0, #0]
{
 800388a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800388c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800388e:	6893      	ldr	r3, [r2, #8]
 8003890:	07db      	lsls	r3, r3, #31
 8003892:	d421      	bmi.n	80038d8 <ADC_Enable+0x54>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <ADC_Enable+0x74>)
 8003896:	4c19      	ldr	r4, [pc, #100]	; (80038fc <ADC_Enable+0x78>)
 8003898:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800389a:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800389c:	fba4 4303 	umull	r4, r3, r4, r3
    __HAL_ADC_ENABLE(hadc);
 80038a0:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038a4:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80038a6:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038a8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80038aa:	9b01      	ldr	r3, [sp, #4]
 80038ac:	b12b      	cbz	r3, 80038ba <ADC_Enable+0x36>
      wait_loop_index--;
 80038ae:	9b01      	ldr	r3, [sp, #4]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80038b4:	9b01      	ldr	r3, [sp, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f9      	bne.n	80038ae <ADC_Enable+0x2a>
 80038ba:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 80038bc:	f7ff fef8 	bl	80036b0 <HAL_GetTick>
 80038c0:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038c2:	e004      	b.n	80038ce <ADC_Enable+0x4a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038c4:	f7ff fef4 	bl	80036b0 <HAL_GetTick>
 80038c8:	1b80      	subs	r0, r0, r6
 80038ca:	2802      	cmp	r0, #2
 80038cc:	d807      	bhi.n	80038de <ADC_Enable+0x5a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038ce:	682b      	ldr	r3, [r5, #0]
 80038d0:	689c      	ldr	r4, [r3, #8]
 80038d2:	f014 0401 	ands.w	r4, r4, #1
 80038d6:	d0f5      	beq.n	80038c4 <ADC_Enable+0x40>
  return HAL_OK;
 80038d8:	2000      	movs	r0, #0
}
 80038da:	b002      	add	sp, #8
 80038dc:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_UNLOCK(hadc);
 80038de:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80038e2:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e6:	f043 0310 	orr.w	r3, r3, #16
 80038ea:	62ab      	str	r3, [r5, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80038ee:	4303      	orrs	r3, r0
 80038f0:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80038f2:	b002      	add	sp, #8
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
 80038f6:	bf00      	nop
 80038f8:	20000000 	.word	0x20000000
 80038fc:	431bde83 	.word	0x431bde83

08003900 <HAL_ADC_Start_DMA>:
{
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003902:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <HAL_ADC_Start_DMA+0x104>)
 8003904:	6804      	ldr	r4, [r0, #0]
 8003906:	429c      	cmp	r4, r3
 8003908:	d016      	beq.n	8003938 <HAL_ADC_Start_DMA+0x38>
 800390a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800390e:	429c      	cmp	r4, r3
 8003910:	d012      	beq.n	8003938 <HAL_ADC_Start_DMA+0x38>
    __HAL_LOCK(hadc);
 8003912:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003916:	2b01      	cmp	r3, #1
 8003918:	d063      	beq.n	80039e2 <HAL_ADC_Start_DMA+0xe2>
 800391a:	2301      	movs	r3, #1
 800391c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8003920:	4617      	mov	r7, r2
 8003922:	460e      	mov	r6, r1
 8003924:	4604      	mov	r4, r0
    tmp_hal_status = ADC_Enable(hadc);
 8003926:	f7ff ffad 	bl	8003884 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800392a:	4605      	mov	r5, r0
 800392c:	b160      	cbz	r0, 8003948 <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 800392e:	2300      	movs	r3, #0
}
 8003930:	4628      	mov	r0, r5
      __HAL_UNLOCK(hadc);
 8003932:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_ADC_Start_DMA+0x104>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003940:	d0e7      	beq.n	8003912 <HAL_ADC_Start_DMA+0x12>
    tmp_hal_status = HAL_ERROR;
 8003942:	2501      	movs	r5, #1
}
 8003944:	4628      	mov	r0, r5
 8003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003948:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800394a:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800394c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003950:	4a2d      	ldr	r2, [pc, #180]	; (8003a08 <HAL_ADC_Start_DMA+0x108>)
      ADC_STATE_CLR_SET(hadc->State,
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800395a:	4291      	cmp	r1, r2
      ADC_STATE_CLR_SET(hadc->State,
 800395c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800395e:	d043      	beq.n	80039e8 <HAL_ADC_Start_DMA+0xe8>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003960:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003962:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003966:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003968:	684b      	ldr	r3, [r1, #4]
 800396a:	055a      	lsls	r2, r3, #21
 800396c:	d505      	bpl.n	800397a <HAL_ADC_Start_DMA+0x7a>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800396e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003978:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800397a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800397c:	f06f 0202 	mvn.w	r2, #2
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003980:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003984:	bf18      	it	ne
 8003986:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003988:	6a20      	ldr	r0, [r4, #32]
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800398a:	bf18      	it	ne
 800398c:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8003990:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8003992:	2300      	movs	r3, #0
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003994:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003a10 <HAL_ADC_Start_DMA+0x110>
      __HAL_UNLOCK(hadc);
 8003998:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_ADC_Start_DMA+0x10c>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800399e:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039a0:	e9c0 c30a 	strd	ip, r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039a4:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8003a14 <HAL_ADC_Start_DMA+0x114>
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039a8:	463b      	mov	r3, r7
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039aa:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80039ae:	f841 2c4c 	str.w	r2, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039b2:	f851 7c44 	ldr.w	r7, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039b6:	4632      	mov	r2, r6
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039b8:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 80039bc:	f841 7c44 	str.w	r7, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039c0:	f000 fa86 	bl	8003ed0 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80039c4:	6822      	ldr	r2, [r4, #0]
}
 80039c6:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80039c8:	6893      	ldr	r3, [r2, #8]
 80039ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80039d2:	6893      	ldr	r3, [r2, #8]
 80039d4:	bf0c      	ite	eq
 80039d6:	f443 03a0 	orreq.w	r3, r3, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80039da:	f443 1380 	orrne.w	r3, r3, #1048576	; 0x100000
 80039de:	6093      	str	r3, [r2, #8]
}
 80039e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80039e2:	2502      	movs	r5, #2
}
 80039e4:	4628      	mov	r0, r5
 80039e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_ADC_Start_DMA+0x104>)
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80039f0:	d0b6      	beq.n	8003960 <HAL_ADC_Start_DMA+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80039f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80039f8:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	055b      	lsls	r3, r3, #21
 80039fe:	d5bc      	bpl.n	800397a <HAL_ADC_Start_DMA+0x7a>
 8003a00:	e7b5      	b.n	800396e <HAL_ADC_Start_DMA+0x6e>
 8003a02:	bf00      	nop
 8003a04:	40012400 	.word	0x40012400
 8003a08:	40012800 	.word	0x40012800
 8003a0c:	08003739 	.word	0x08003739
 8003a10:	080036e5 	.word	0x080036e5
 8003a14:	08003749 	.word	0x08003749

08003a18 <ADC_ConversionStop_Disable>:
{
 8003a18:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a1a:	6803      	ldr	r3, [r0, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	07d2      	lsls	r2, r2, #31
 8003a20:	d401      	bmi.n	8003a26 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8003a22:	2000      	movs	r0, #0
}
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	4604      	mov	r4, r0
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003a30:	f7ff fe3e 	bl	80036b0 <HAL_GetTick>
 8003a34:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	07db      	lsls	r3, r3, #31
 8003a3c:	d5f1      	bpl.n	8003a22 <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a3e:	f7ff fe37 	bl	80036b0 <HAL_GetTick>
 8003a42:	1b40      	subs	r0, r0, r5
 8003a44:	2802      	cmp	r0, #2
 8003a46:	d9f6      	bls.n	8003a36 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a48:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a54:	4303      	orrs	r3, r0
 8003a56:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003a58:	bd38      	pop	{r3, r4, r5, pc}
 8003a5a:	bf00      	nop

08003a5c <HAL_ADC_Init>:
  if(hadc == NULL)
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d057      	beq.n	8003b10 <HAL_ADC_Init+0xb4>
{
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003a64:	4604      	mov	r4, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d045      	beq.n	8003af6 <HAL_ADC_Init+0x9a>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7ff ffd4 	bl	8003a18 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a72:	f013 0310 	ands.w	r3, r3, #16
 8003a76:	d138      	bne.n	8003aea <HAL_ADC_Init+0x8e>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d136      	bne.n	8003aea <HAL_ADC_Init+0x8e>
    ADC_STATE_CLR_SET(hadc->State,
 8003a7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a7e:	69e6      	ldr	r6, [r4, #28]
 8003a80:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8003a82:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a86:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8003a88:	f022 0202 	bic.w	r2, r2, #2
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003a8c:	7b27      	ldrb	r7, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003a8e:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a92:	4331      	orrs	r1, r6
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a94:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    ADC_STATE_CLR_SET(hadc->State,
 8003a98:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a9a:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 8003a9e:	7d26      	ldrb	r6, [r4, #20]
 8003aa0:	6822      	ldr	r2, [r4, #0]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003aa2:	d037      	beq.n	8003b14 <HAL_ADC_Init+0xb8>
 8003aa4:	2d01      	cmp	r5, #1
 8003aa6:	d04f      	beq.n	8003b48 <HAL_ADC_Init+0xec>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003aa8:	2e01      	cmp	r6, #1
 8003aaa:	d052      	beq.n	8003b52 <HAL_ADC_Init+0xf6>
      MODIFY_REG(hadc->Instance->CR1,
 8003aac:	6855      	ldr	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 8003ab0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8003ab4:	6055      	str	r5, [r2, #4]
  uint32_t tmp_sqr1 = 0U;
 8003ab6:	4605      	mov	r5, r0
      MODIFY_REG(hadc->Instance->CR2,
 8003ab8:	6896      	ldr	r6, [r2, #8]
 8003aba:	4033      	ands	r3, r6
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hadc->Instance->SQR1,
 8003ac0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ac2:	4e38      	ldr	r6, [pc, #224]	; (8003ba4 <HAL_ADC_Init+0x148>)
    MODIFY_REG(hadc->Instance->SQR1,
 8003ac4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ac8:	432b      	orrs	r3, r5
 8003aca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003acc:	6893      	ldr	r3, [r2, #8]
 8003ace:	401e      	ands	r6, r3
 8003ad0:	42b1      	cmp	r1, r6
 8003ad2:	d030      	beq.n	8003b36 <HAL_ADC_Init+0xda>
      tmp_hal_status = HAL_ERROR;
 8003ad4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8003ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ad8:	f023 0312 	bic.w	r3, r3, #18
 8003adc:	f043 0310 	orr.w	r3, r3, #16
 8003ae0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ae4:	4303      	orrs	r3, r0
 8003ae6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003aec:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aee:	f043 0310 	orr.w	r3, r3, #16
 8003af2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8003af6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003af8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003afc:	f7fd f836 	bl	8000b6c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003b00:	4620      	mov	r0, r4
 8003b02:	f7ff ff89 	bl	8003a18 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b08:	f013 0310 	ands.w	r3, r3, #16
 8003b0c:	d1ed      	bne.n	8003aea <HAL_ADC_Init+0x8e>
 8003b0e:	e7b3      	b.n	8003a78 <HAL_ADC_Init+0x1c>
    return HAL_ERROR;
 8003b10:	2001      	movs	r0, #1
}
 8003b12:	4770      	bx	lr
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b14:	2e01      	cmp	r6, #1
 8003b16:	d03f      	beq.n	8003b98 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->CR1,
 8003b18:	6855      	ldr	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 8003b1c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8003b20:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8003b24:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003b26:	6895      	ldr	r5, [r2, #8]
 8003b28:	402b      	ands	r3, r5
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	051d      	lsls	r5, r3, #20
 8003b34:	e7c4      	b.n	8003ac0 <HAL_ADC_Init+0x64>
      ADC_CLEAR_ERRORCODE(hadc);
 8003b36:	2300      	movs	r3, #0
 8003b38:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b48:	2e01      	cmp	r6, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b4a:	bf08      	it	eq
 8003b4c:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b50:	d1e2      	bne.n	8003b18 <HAL_ADC_Init+0xbc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b52:	b1d7      	cbz	r7, 8003b8a <HAL_ADC_Init+0x12e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b56:	f046 0620 	orr.w	r6, r6, #32
 8003b5a:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b5e:	f046 0601 	orr.w	r6, r6, #1
 8003b62:	62e6      	str	r6, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8003b64:	6857      	ldr	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003b66:	4e0e      	ldr	r6, [pc, #56]	; (8003ba0 <HAL_ADC_Init+0x144>)
      MODIFY_REG(hadc->Instance->CR1,
 8003b68:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8003b6c:	433b      	orrs	r3, r7
 8003b6e:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003b70:	6893      	ldr	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003b72:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 8003b76:	ea06 0603 	and.w	r6, r6, r3
 8003b7a:	ea46 0601 	orr.w	r6, r6, r1
 8003b7e:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003b80:	d0d5      	beq.n	8003b2e <HAL_ADC_Init+0xd2>
 8003b82:	2d01      	cmp	r5, #1
 8003b84:	d0d3      	beq.n	8003b2e <HAL_ADC_Init+0xd2>
  uint32_t tmp_sqr1 = 0U;
 8003b86:	2500      	movs	r5, #0
 8003b88:	e79a      	b.n	8003ac0 <HAL_ADC_Init+0x64>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003b8a:	69a6      	ldr	r6, [r4, #24]
 8003b8c:	3e01      	subs	r6, #1
 8003b8e:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8003b92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b96:	e7e5      	b.n	8003b64 <HAL_ADC_Init+0x108>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b98:	462b      	mov	r3, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b9a:	2f00      	cmp	r7, #0
 8003b9c:	d1da      	bne.n	8003b54 <HAL_ADC_Init+0xf8>
 8003b9e:	e7f4      	b.n	8003b8a <HAL_ADC_Init+0x12e>
 8003ba0:	ffe1f7fd 	.word	0xffe1f7fd
 8003ba4:	ff1f0efe 	.word	0xff1f0efe

08003ba8 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003ba8:	2200      	movs	r2, #0
{
 8003baa:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bac:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003bb0:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8003bb2:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8003bb4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003bb6:	d053      	beq.n	8003c60 <HAL_ADCEx_Calibration_Start+0xb8>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8003bbe:	4604      	mov	r4, r0
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003bc0:	f7ff ff2a 	bl	8003a18 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	b128      	cbz	r0, 8003bd4 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bc8:	2300      	movs	r3, #0
  
  /* Return function status */
  return tmp_hal_status;
}
 8003bca:	4628      	mov	r0, r5
  __HAL_UNLOCK(hadc);
 8003bcc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003bd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003bd6:	4a2b      	ldr	r2, [pc, #172]	; (8003c84 <HAL_ADCEx_Calibration_Start+0xdc>)
    ADC_STATE_CLR_SET(hadc->State,
 8003bd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bdc:	f023 0302 	bic.w	r3, r3, #2
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003be6:	2002      	movs	r0, #2
 8003be8:	6816      	ldr	r6, [r2, #0]
 8003bea:	f000 febf 	bl	800496c <HAL_RCCEx_GetPeriphCLKFreq>
 8003bee:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003bf2:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8003bf4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8003bf6:	9b01      	ldr	r3, [sp, #4]
 8003bf8:	b12b      	cbz	r3, 8003c06 <HAL_ADCEx_Calibration_Start+0x5e>
      wait_loop_index--;
 8003bfa:	9b01      	ldr	r3, [sp, #4]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003c00:	9b01      	ldr	r3, [sp, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f9      	bne.n	8003bfa <HAL_ADCEx_Calibration_Start+0x52>
    ADC_Enable(hadc);
 8003c06:	4620      	mov	r0, r4
 8003c08:	f7ff fe3c 	bl	8003884 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	6893      	ldr	r3, [r2, #8]
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8003c16:	f7ff fd4b 	bl	80036b0 <HAL_GetTick>
 8003c1a:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c1c:	e004      	b.n	8003c28 <HAL_ADCEx_Calibration_Start+0x80>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c1e:	f7ff fd47 	bl	80036b0 <HAL_GetTick>
 8003c22:	1b80      	subs	r0, r0, r6
 8003c24:	280a      	cmp	r0, #10
 8003c26:	d81f      	bhi.n	8003c68 <HAL_ADCEx_Calibration_Start+0xc0>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	0712      	lsls	r2, r2, #28
 8003c2e:	d4f6      	bmi.n	8003c1e <HAL_ADCEx_Calibration_Start+0x76>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	f042 0204 	orr.w	r2, r2, #4
 8003c36:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8003c38:	f7ff fd3a 	bl	80036b0 <HAL_GetTick>
 8003c3c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003c3e:	e004      	b.n	8003c4a <HAL_ADCEx_Calibration_Start+0xa2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c40:	f7ff fd36 	bl	80036b0 <HAL_GetTick>
 8003c44:	1b80      	subs	r0, r0, r6
 8003c46:	280a      	cmp	r0, #10
 8003c48:	d80e      	bhi.n	8003c68 <HAL_ADCEx_Calibration_Start+0xc0>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	075b      	lsls	r3, r3, #29
 8003c50:	d4f6      	bmi.n	8003c40 <HAL_ADCEx_Calibration_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State,
 8003c52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c54:	f023 0303 	bic.w	r3, r3, #3
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c5e:	e7b3      	b.n	8003bc8 <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 8003c60:	2502      	movs	r5, #2
}
 8003c62:	4628      	mov	r0, r5
 8003c64:	b002      	add	sp, #8
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003c68:	2501      	movs	r5, #1
        __HAL_UNLOCK(hadc);
 8003c6a:	2200      	movs	r2, #0
}
 8003c6c:	4628      	mov	r0, r5
        ADC_STATE_CLR_SET(hadc->State,
 8003c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8003c70:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
        ADC_STATE_CLR_SET(hadc->State,
 8003c74:	f023 0312 	bic.w	r3, r3, #18
 8003c78:	f043 0310 	orr.w	r3, r3, #16
 8003c7c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
 8003c82:	bf00      	nop
 8003c84:	20000000 	.word	0x20000000

08003c88 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d07d      	beq.n	8003d88 <HAL_CAN_Init+0x100>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c8c:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d074      	beq.n	8003d82 <HAL_CAN_Init+0xfa>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c98:	6822      	ldr	r2, [r4, #0]
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	f023 0302 	bic.w	r3, r3, #2
 8003ca0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca2:	f7ff fd05 	bl	80036b0 <HAL_GetTick>
 8003ca6:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ca8:	e004      	b.n	8003cb4 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003caa:	f7ff fd01 	bl	80036b0 <HAL_GetTick>
 8003cae:	1b40      	subs	r0, r0, r5
 8003cb0:	280a      	cmp	r0, #10
 8003cb2:	d85d      	bhi.n	8003d70 <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	0791      	lsls	r1, r2, #30
 8003cba:	d4f6      	bmi.n	8003caa <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cc4:	f7ff fcf4 	bl	80036b0 <HAL_GetTick>
 8003cc8:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cca:	e004      	b.n	8003cd6 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ccc:	f7ff fcf0 	bl	80036b0 <HAL_GetTick>
 8003cd0:	1b40      	subs	r0, r0, r5
 8003cd2:	280a      	cmp	r0, #10
 8003cd4:	d84c      	bhi.n	8003d70 <HAL_CAN_Init+0xe8>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	07d2      	lsls	r2, r2, #31
 8003cdc:	d5f6      	bpl.n	8003ccc <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003cde:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ce0:	2500      	movs	r5, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ce2:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ce4:	681a      	ldr	r2, [r3, #0]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ce6:	f04f 0601 	mov.w	r6, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cea:	bf0c      	ite	eq
 8003cec:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cf0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8003cf4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cf6:	7e62      	ldrb	r2, [r4, #25]
 8003cf8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	bf0c      	ite	eq
 8003cfe:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d02:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d08:	7ea2      	ldrb	r2, [r4, #26]
 8003d0a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	bf0c      	ite	eq
 8003d10:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d14:	f022 0220 	bicne.w	r2, r2, #32
 8003d18:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d1a:	7ee2      	ldrb	r2, [r4, #27]
 8003d1c:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	bf0c      	ite	eq
 8003d22:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d26:	f042 0210 	orrne.w	r2, r2, #16
 8003d2a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d2c:	7f22      	ldrb	r2, [r4, #28]
 8003d2e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	bf0c      	ite	eq
 8003d34:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d38:	f022 0208 	bicne.w	r2, r2, #8
 8003d3c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d3e:	7f62      	ldrb	r2, [r4, #29]
 8003d40:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	bf0c      	ite	eq
 8003d46:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d4a:	f022 0204 	bicne.w	r2, r2, #4
 8003d4e:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d50:	6921      	ldr	r1, [r4, #16]
 8003d52:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8003d56:	4302      	orrs	r2, r0
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	6960      	ldr	r0, [r4, #20]
 8003d5c:	6861      	ldr	r1, [r4, #4]
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	3901      	subs	r1, #1
 8003d62:	430a      	orrs	r2, r1
 8003d64:	61da      	str	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8003d66:	4628      	mov	r0, r5
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d68:	6265      	str	r5, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003d6a:	f884 6020 	strb.w	r6, [r4, #32]
}
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d70:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
      return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d7c:	f884 2020 	strb.w	r2, [r4, #32]
}
 8003d80:	bd70      	pop	{r4, r5, r6, pc}
    HAL_CAN_MspInit(hcan);
 8003d82:	f7fc ff6f 	bl	8000c64 <HAL_CAN_MspInit>
 8003d86:	e787      	b.n	8003c98 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8003d88:	2001      	movs	r0, #1
}
 8003d8a:	4770      	bx	lr

08003d8c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d90:	4a06      	ldr	r2, [pc, #24]	; (8003dac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d92:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d94:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9a:	400b      	ands	r3, r1
 8003d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003da4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003da6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003db2:	b430      	push	{r4, r5}
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dba:	f1c3 0507 	rsb	r5, r3, #7
 8003dbe:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc4:	bf28      	it	cs
 8003dc6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc8:	2c06      	cmp	r4, #6
 8003dca:	d919      	bls.n	8003e00 <HAL_NVIC_SetPriority+0x50>
 8003dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8003dd0:	3b03      	subs	r3, #3
 8003dd2:	409c      	lsls	r4, r3
 8003dd4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	40aa      	lsls	r2, r5
 8003dde:	ea21 0102 	bic.w	r1, r1, r2
 8003de2:	fa01 f203 	lsl.w	r2, r1, r3
 8003de6:	4322      	orrs	r2, r4
 8003de8:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8003dea:	2800      	cmp	r0, #0
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	db0a      	blt.n	8003e06 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003df4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003df8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003dfc:	bc30      	pop	{r4, r5}
 8003dfe:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e00:	2400      	movs	r4, #0
 8003e02:	4623      	mov	r3, r4
 8003e04:	e7e8      	b.n	8003dd8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e06:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <HAL_NVIC_SetPriority+0x68>)
 8003e08:	f000 000f 	and.w	r0, r0, #15
 8003e0c:	4403      	add	r3, r0
 8003e0e:	761a      	strb	r2, [r3, #24]
 8003e10:	bc30      	pop	{r4, r5}
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00
 8003e18:	e000ecfc 	.word	0xe000ecfc

08003e1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	db07      	blt.n	8003e30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e20:	2301      	movs	r3, #1
 8003e22:	f000 011f 	and.w	r1, r0, #31
 8003e26:	4a03      	ldr	r2, [pc, #12]	; (8003e34 <HAL_NVIC_EnableIRQ+0x18>)
 8003e28:	408b      	lsls	r3, r1
 8003e2a:	0940      	lsrs	r0, r0, #5
 8003e2c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000e100 	.word	0xe000e100

08003e38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e38:	3801      	subs	r0, #1
 8003e3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003e3e:	d20d      	bcs.n	8003e5c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e40:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e42:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e44:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e46:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4a:	4c06      	ldr	r4, [pc, #24]	; (8003e64 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e4c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e52:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8003e54:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e56:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e58:	6019      	str	r1, [r3, #0]
 8003e5a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	4770      	bx	lr
 8003e60:	e000e010 	.word	0xe000e010
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e68:	b350      	cbz	r0, 8003ec0 <HAL_DMA_Init+0x58>
 8003e6a:	4602      	mov	r2, r0
{
 8003e6c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e6e:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e72:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e74:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 8003e76:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e78:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e7a:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7c:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e7e:	4911      	ldr	r1, [pc, #68]	; (8003ec4 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e80:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e82:	4f11      	ldr	r7, [pc, #68]	; (8003ec8 <HAL_DMA_Init+0x60>)
 8003e84:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e86:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e88:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e8a:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8e:	4333      	orrs	r3, r6
 8003e90:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e92:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e94:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 8003e96:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e98:	0909      	lsrs	r1, r1, #4
 8003e9a:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e9c:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea0:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ea2:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ea6:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ea8:	4908      	ldr	r1, [pc, #32]	; (8003ecc <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 8003eaa:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 8003eac:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8003eae:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8003eb0:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eb2:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8003eb4:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8003eb8:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 8003ebc:	bcf0      	pop	{r4, r5, r6, r7}
 8003ebe:	4770      	bx	lr
    return HAL_ERROR;
 8003ec0:	2001      	movs	r0, #1
}
 8003ec2:	4770      	bx	lr
 8003ec4:	bffdfff8 	.word	0xbffdfff8
 8003ec8:	cccccccd 	.word	0xcccccccd
 8003ecc:	40020000 	.word	0x40020000

08003ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ed2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003ed6:	2c01      	cmp	r4, #1
 8003ed8:	d032      	beq.n	8003f40 <HAL_DMA_Start_IT+0x70>
 8003eda:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003edc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003ee0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ee4:	42a5      	cmp	r5, r4
 8003ee6:	d125      	bne.n	8003f34 <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ee8:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eea:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eee:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef0:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8003ef2:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ef4:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8003ef6:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8003efa:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 8003efc:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f00:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f02:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8003f06:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f08:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 8003f0c:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8003f0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f10:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f12:	bf0b      	itete	eq
 8003f14:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003f16:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003f18:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003f1a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003f1c:	b19b      	cbz	r3, 8003f46 <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	f043 030e 	orr.w	r3, r3, #14
 8003f24:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8003f28:	6822      	ldr	r2, [r4, #0]
}
 8003f2a:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	6022      	str	r2, [r4, #0]
}
 8003f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8003f34:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8003f38:	f880 2020 	strb.w	r2, [r0, #32]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8003f40:	2302      	movs	r3, #2
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	f043 030a 	orr.w	r3, r3, #10
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	e7e6      	b.n	8003f26 <HAL_DMA_Start_IT+0x56>

08003f58 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f58:	2204      	movs	r2, #4
{
 8003f5a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f5c:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f60:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003f62:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f64:	408a      	lsls	r2, r1
 8003f66:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8003f68:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f6a:	d01f      	beq.n	8003fac <HAL_DMA_IRQHandler+0x54>
 8003f6c:	076a      	lsls	r2, r5, #29
 8003f6e:	d51d      	bpl.n	8003fac <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	0691      	lsls	r1, r2, #26
 8003f74:	d403      	bmi.n	8003f7e <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	f022 0204 	bic.w	r2, r2, #4
 8003f7c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f7e:	4a3f      	ldr	r2, [pc, #252]	; (800407c <HAL_DMA_IRQHandler+0x124>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d05c      	beq.n	800403e <HAL_DMA_IRQHandler+0xe6>
 8003f84:	3214      	adds	r2, #20
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d061      	beq.n	800404e <HAL_DMA_IRQHandler+0xf6>
 8003f8a:	3214      	adds	r2, #20
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d068      	beq.n	8004062 <HAL_DMA_IRQHandler+0x10a>
 8003f90:	3214      	adds	r2, #20
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d06b      	beq.n	800406e <HAL_DMA_IRQHandler+0x116>
 8003f96:	3214      	adds	r2, #20
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d05d      	beq.n	8004058 <HAL_DMA_IRQHandler+0x100>
 8003f9c:	3214      	adds	r2, #20
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	bf0c      	ite	eq
 8003fa2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8003fa6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8003faa:	e049      	b.n	8004040 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003fac:	2202      	movs	r2, #2
 8003fae:	408a      	lsls	r2, r1
 8003fb0:	4222      	tst	r2, r4
 8003fb2:	d022      	beq.n	8003ffa <HAL_DMA_IRQHandler+0xa2>
 8003fb4:	07aa      	lsls	r2, r5, #30
 8003fb6:	d520      	bpl.n	8003ffa <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	0691      	lsls	r1, r2, #26
 8003fbc:	d406      	bmi.n	8003fcc <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	f022 020a 	bic.w	r2, r2, #10
 8003fc6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003fc8:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003fcc:	4a2b      	ldr	r2, [pc, #172]	; (800407c <HAL_DMA_IRQHandler+0x124>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02b      	beq.n	800402a <HAL_DMA_IRQHandler+0xd2>
 8003fd2:	3214      	adds	r2, #20
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d042      	beq.n	800405e <HAL_DMA_IRQHandler+0x106>
 8003fd8:	3214      	adds	r2, #20
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d044      	beq.n	8004068 <HAL_DMA_IRQHandler+0x110>
 8003fde:	3214      	adds	r2, #20
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d036      	beq.n	8004052 <HAL_DMA_IRQHandler+0xfa>
 8003fe4:	3214      	adds	r2, #20
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d044      	beq.n	8004074 <HAL_DMA_IRQHandler+0x11c>
 8003fea:	3214      	adds	r2, #20
 8003fec:	4293      	cmp	r3, r2
 8003fee:	bf0c      	ite	eq
 8003ff0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003ff4:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8003ff8:	e018      	b.n	800402c <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	408a      	lsls	r2, r1
 8003ffe:	4222      	tst	r2, r4
 8004000:	d01b      	beq.n	800403a <HAL_DMA_IRQHandler+0xe2>
 8004002:	072a      	lsls	r2, r5, #28
 8004004:	d519      	bpl.n	800403a <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004006:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8004008:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800400a:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800400c:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004010:	f024 040e 	bic.w	r4, r4, #14
 8004014:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8004016:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004018:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800401a:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800401c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8004020:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8004024:	b14b      	cbz	r3, 800403a <HAL_DMA_IRQHandler+0xe2>
}
 8004026:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004028:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800402a:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800402c:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800402e:	4c14      	ldr	r4, [pc, #80]	; (8004080 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8004030:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004032:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004034:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8004038:	b93a      	cbnz	r2, 800404a <HAL_DMA_IRQHandler+0xf2>
}
 800403a:	bc70      	pop	{r4, r5, r6}
 800403c:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800403e:	2304      	movs	r3, #4
 8004040:	490f      	ldr	r1, [pc, #60]	; (8004080 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8004042:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004044:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004046:	2a00      	cmp	r2, #0
 8004048:	d0f7      	beq.n	800403a <HAL_DMA_IRQHandler+0xe2>
}
 800404a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800404c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	e7f6      	b.n	8004040 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004056:	e7e9      	b.n	800402c <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004058:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800405c:	e7f0      	b.n	8004040 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800405e:	2320      	movs	r3, #32
 8004060:	e7e4      	b.n	800402c <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004066:	e7eb      	b.n	8004040 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800406c:	e7de      	b.n	800402c <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800406e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004072:	e7e5      	b.n	8004040 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004078:	e7d8      	b.n	800402c <HAL_DMA_IRQHandler+0xd4>
 800407a:	bf00      	nop
 800407c:	40020008 	.word	0x40020008
 8004080:	40020000 	.word	0x40020000

08004084 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004084:	680a      	ldr	r2, [r1, #0]
 8004086:	2a00      	cmp	r2, #0
 8004088:	f000 80dc 	beq.w	8004244 <HAL_GPIO_Init+0x1c0>
{
 800408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8004090:	f04f 0a00 	mov.w	sl, #0
{
 8004094:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8004096:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004098:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 800426c <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800409c:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8004270 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040a0:	4f6d      	ldr	r7, [pc, #436]	; (8004258 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040a2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8004274 <HAL_GPIO_Init+0x1f0>
 80040a6:	e003      	b.n	80040b0 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80040a8:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040aa:	fa32 f305 	lsrs.w	r3, r2, r5
 80040ae:	d079      	beq.n	80041a4 <HAL_GPIO_Init+0x120>
    ioposition = (0x01uL << position);
 80040b0:	2301      	movs	r3, #1
 80040b2:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040b4:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 80040b8:	42a3      	cmp	r3, r4
 80040ba:	d1f5      	bne.n	80040a8 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80040bc:	684a      	ldr	r2, [r1, #4]
 80040be:	2a12      	cmp	r2, #18
 80040c0:	f000 809f 	beq.w	8004202 <HAL_GPIO_Init+0x17e>
 80040c4:	f200 8088 	bhi.w	80041d8 <HAL_GPIO_Init+0x154>
 80040c8:	2a02      	cmp	r2, #2
 80040ca:	f000 809e 	beq.w	800420a <HAL_GPIO_Init+0x186>
 80040ce:	d97d      	bls.n	80041cc <HAL_GPIO_Init+0x148>
 80040d0:	2a03      	cmp	r2, #3
 80040d2:	d06a      	beq.n	80041aa <HAL_GPIO_Init+0x126>
 80040d4:	2a11      	cmp	r2, #17
 80040d6:	d102      	bne.n	80040de <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80040d8:	68cb      	ldr	r3, [r1, #12]
 80040da:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040de:	2cff      	cmp	r4, #255	; 0xff
 80040e0:	d867      	bhi.n	80041b2 <HAL_GPIO_Init+0x12e>
 80040e2:	4681      	mov	r9, r0
 80040e4:	6803      	ldr	r3, [r0, #0]
 80040e6:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040e8:	260f      	movs	r6, #15
 80040ea:	fa06 fb02 	lsl.w	fp, r6, r2
 80040ee:	ea23 030b 	bic.w	r3, r3, fp
 80040f2:	fa0a f202 	lsl.w	r2, sl, r2
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040fc:	684a      	ldr	r2, [r1, #4]
 80040fe:	00d3      	lsls	r3, r2, #3
 8004100:	d562      	bpl.n	80041c8 <HAL_GPIO_Init+0x144>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004102:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8004106:	f025 0303 	bic.w	r3, r5, #3
 800410a:	f049 0901 	orr.w	r9, r9, #1
 800410e:	f8cc 9018 	str.w	r9, [ip, #24]
 8004112:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8004116:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800411a:	f009 0901 	and.w	r9, r9, #1
 800411e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004122:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004126:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800412a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800412e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004132:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004136:	fa06 f609 	lsl.w	r6, r6, r9
 800413a:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800413e:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004140:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004142:	d011      	beq.n	8004168 <HAL_GPIO_Init+0xe4>
 8004144:	4540      	cmp	r0, r8
 8004146:	d064      	beq.n	8004212 <HAL_GPIO_Init+0x18e>
 8004148:	4e44      	ldr	r6, [pc, #272]	; (800425c <HAL_GPIO_Init+0x1d8>)
 800414a:	42b0      	cmp	r0, r6
 800414c:	d07b      	beq.n	8004246 <HAL_GPIO_Init+0x1c2>
 800414e:	4e44      	ldr	r6, [pc, #272]	; (8004260 <HAL_GPIO_Init+0x1dc>)
 8004150:	42b0      	cmp	r0, r6
 8004152:	bf0c      	ite	eq
 8004154:	f04f 0b03 	moveq.w	fp, #3
 8004158:	f04f 0b04 	movne.w	fp, #4
 800415c:	9e01      	ldr	r6, [sp, #4]
 800415e:	fa0b f909 	lsl.w	r9, fp, r9
 8004162:	ea46 0609 	orr.w	r6, r6, r9
 8004166:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8004168:	9e01      	ldr	r6, [sp, #4]
 800416a:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800416c:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800416e:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8004170:	bf4c      	ite	mi
 8004172:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004174:	43a3      	bicpl	r3, r4
 8004176:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8004178:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800417a:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 800417c:	bf4c      	ite	mi
 800417e:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004180:	43a3      	bicpl	r3, r4
 8004182:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004184:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004186:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8004188:	bf4c      	ite	mi
 800418a:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800418c:	43a3      	bicpl	r3, r4
 800418e:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004190:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8004192:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004194:	d515      	bpl.n	80041c2 <HAL_GPIO_Init+0x13e>
          SET_BIT(EXTI->FTSR, iocurrent);
 8004196:	431c      	orrs	r4, r3
 8004198:	60fc      	str	r4, [r7, #12]
 800419a:	680a      	ldr	r2, [r1, #0]
	position++;
 800419c:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800419e:	fa32 f305 	lsrs.w	r3, r2, r5
 80041a2:	d185      	bne.n	80040b0 <HAL_GPIO_Init+0x2c>
  }
}
 80041a4:	b005      	add	sp, #20
 80041a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041aa:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041ac:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041b0:	d997      	bls.n	80040e2 <HAL_GPIO_Init+0x5e>
 80041b2:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 80041b6:	3a08      	subs	r2, #8
 80041b8:	6843      	ldr	r3, [r0, #4]
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	f100 0904 	add.w	r9, r0, #4
 80041c0:	e792      	b.n	80040e8 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041c2:	ea23 0404 	bic.w	r4, r3, r4
 80041c6:	60fc      	str	r4, [r7, #12]
 80041c8:	680a      	ldr	r2, [r1, #0]
 80041ca:	e76d      	b.n	80040a8 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80041cc:	b1a2      	cbz	r2, 80041f8 <HAL_GPIO_Init+0x174>
 80041ce:	2a01      	cmp	r2, #1
 80041d0:	d185      	bne.n	80040de <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041d2:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80041d6:	e782      	b.n	80040de <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80041d8:	4e22      	ldr	r6, [pc, #136]	; (8004264 <HAL_GPIO_Init+0x1e0>)
 80041da:	42b2      	cmp	r2, r6
 80041dc:	d00c      	beq.n	80041f8 <HAL_GPIO_Init+0x174>
 80041de:	d920      	bls.n	8004222 <HAL_GPIO_Init+0x19e>
 80041e0:	4e21      	ldr	r6, [pc, #132]	; (8004268 <HAL_GPIO_Init+0x1e4>)
 80041e2:	42b2      	cmp	r2, r6
 80041e4:	d008      	beq.n	80041f8 <HAL_GPIO_Init+0x174>
 80041e6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80041ea:	42b2      	cmp	r2, r6
 80041ec:	d004      	beq.n	80041f8 <HAL_GPIO_Init+0x174>
 80041ee:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80041f2:	42b2      	cmp	r2, r6
 80041f4:	f47f af73 	bne.w	80040de <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041f8:	688a      	ldr	r2, [r1, #8]
 80041fa:	b9e2      	cbnz	r2, 8004236 <HAL_GPIO_Init+0x1b2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041fc:	f04f 0a04 	mov.w	sl, #4
 8004200:	e76d      	b.n	80040de <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004202:	68cb      	ldr	r3, [r1, #12]
 8004204:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8004208:	e769      	b.n	80040de <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800420a:	68cb      	ldr	r3, [r1, #12]
 800420c:	f103 0a08 	add.w	sl, r3, #8
          break;
 8004210:	e765      	b.n	80040de <HAL_GPIO_Init+0x5a>
 8004212:	f04f 0b01 	mov.w	fp, #1
 8004216:	fa0b f909 	lsl.w	r9, fp, r9
 800421a:	ea46 0609 	orr.w	r6, r6, r9
 800421e:	9601      	str	r6, [sp, #4]
 8004220:	e7a2      	b.n	8004168 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 8004222:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8004226:	42b2      	cmp	r2, r6
 8004228:	d0e6      	beq.n	80041f8 <HAL_GPIO_Init+0x174>
 800422a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800422e:	42b2      	cmp	r2, r6
 8004230:	f47f af55 	bne.w	80040de <HAL_GPIO_Init+0x5a>
 8004234:	e7e0      	b.n	80041f8 <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004236:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8004238:	bf0c      	ite	eq
 800423a:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 800423c:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800423e:	f04f 0a08 	mov.w	sl, #8
 8004242:	e74c      	b.n	80040de <HAL_GPIO_Init+0x5a>
 8004244:	4770      	bx	lr
 8004246:	f04f 0b02 	mov.w	fp, #2
 800424a:	9e01      	ldr	r6, [sp, #4]
 800424c:	fa0b f909 	lsl.w	r9, fp, r9
 8004250:	ea46 0609 	orr.w	r6, r6, r9
 8004254:	9601      	str	r6, [sp, #4]
 8004256:	e787      	b.n	8004168 <HAL_GPIO_Init+0xe4>
 8004258:	40010400 	.word	0x40010400
 800425c:	40011000 	.word	0x40011000
 8004260:	40011400 	.word	0x40011400
 8004264:	10210000 	.word	0x10210000
 8004268:	10310000 	.word	0x10310000
 800426c:	40021000 	.word	0x40021000
 8004270:	40010800 	.word	0x40010800
 8004274:	40010c00 	.word	0x40010c00

08004278 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004278:	b902      	cbnz	r2, 800427c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800427a:	0409      	lsls	r1, r1, #16
 800427c:	6101      	str	r1, [r0, #16]
  }
}
 800427e:	4770      	bx	lr

08004280 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8004280:	68c3      	ldr	r3, [r0, #12]
 8004282:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004284:	bf14      	ite	ne
 8004286:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004288:	6101      	streq	r1, [r0, #16]
  }
}
 800428a:	4770      	bx	lr

0800428c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800428c:	2800      	cmp	r0, #0
 800428e:	f000 8155 	beq.w	800453c <HAL_RCC_OscConfig+0x2b0>
{
 8004292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	6803      	ldr	r3, [r0, #0]
{
 8004298:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429a:	07dd      	lsls	r5, r3, #31
 800429c:	4604      	mov	r4, r0
 800429e:	d535      	bpl.n	800430c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a0:	49a8      	ldr	r1, [pc, #672]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 80042a2:	684a      	ldr	r2, [r1, #4]
 80042a4:	f002 020c 	and.w	r2, r2, #12
 80042a8:	2a04      	cmp	r2, #4
 80042aa:	f000 8105 	beq.w	80044b8 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042ae:	684a      	ldr	r2, [r1, #4]
 80042b0:	f002 020c 	and.w	r2, r2, #12
 80042b4:	2a08      	cmp	r2, #8
 80042b6:	f000 80fb 	beq.w	80044b0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ba:	6863      	ldr	r3, [r4, #4]
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d010      	beq.n	80042e4 <HAL_RCC_OscConfig+0x58>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8120 	beq.w	8004508 <HAL_RCC_OscConfig+0x27c>
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	f000 8178 	beq.w	80045c0 <HAL_RCC_OscConfig+0x334>
 80042d0:	4b9c      	ldr	r3, [pc, #624]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e004      	b.n	80042ee <HAL_RCC_OscConfig+0x62>
 80042e4:	4a97      	ldr	r2, [pc, #604]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 80042e6:	6813      	ldr	r3, [r2, #0]
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7ff f9df 	bl	80036b0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4d94      	ldr	r5, [pc, #592]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 80042f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	e005      	b.n	8004304 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7ff f9da 	bl	80036b0 <HAL_GetTick>
 80042fc:	1b80      	subs	r0, r0, r6
 80042fe:	2864      	cmp	r0, #100	; 0x64
 8004300:	f200 80f5 	bhi.w	80044ee <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	039a      	lsls	r2, r3, #14
 8004308:	d5f6      	bpl.n	80042f8 <HAL_RCC_OscConfig+0x6c>
 800430a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430c:	079f      	lsls	r7, r3, #30
 800430e:	d44d      	bmi.n	80043ac <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004310:	071a      	lsls	r2, r3, #28
 8004312:	d522      	bpl.n	800435a <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004314:	69a3      	ldr	r3, [r4, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80ba 	beq.w	8004490 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800431c:	2201      	movs	r2, #1
 800431e:	4b8a      	ldr	r3, [pc, #552]	; (8004548 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004320:	4d88      	ldr	r5, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8004322:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004324:	f7ff f9c4 	bl	80036b0 <HAL_GetTick>
 8004328:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	e005      	b.n	8004338 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432c:	f7ff f9c0 	bl	80036b0 <HAL_GetTick>
 8004330:	1b80      	subs	r0, r0, r6
 8004332:	2802      	cmp	r0, #2
 8004334:	f200 80db 	bhi.w	80044ee <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004338:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800433a:	079b      	lsls	r3, r3, #30
 800433c:	d5f6      	bpl.n	800432c <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800433e:	4b83      	ldr	r3, [pc, #524]	; (800454c <HAL_RCC_OscConfig+0x2c0>)
 8004340:	4a83      	ldr	r2, [pc, #524]	; (8004550 <HAL_RCC_OscConfig+0x2c4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	0a5b      	lsrs	r3, r3, #9
 800434a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800434c:	bf00      	nop
  }
  while (Delay --);
 800434e:	9b01      	ldr	r3, [sp, #4]
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	9201      	str	r2, [sp, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f9      	bne.n	800434c <HAL_RCC_OscConfig+0xc0>
 8004358:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800435a:	075d      	lsls	r5, r3, #29
 800435c:	d569      	bpl.n	8004432 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435e:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	00d0      	lsls	r0, r2, #3
 8004364:	f100 80ec 	bmi.w	8004540 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8004368:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	69da      	ldr	r2, [r3, #28]
 800436c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004370:	61da      	str	r2, [r3, #28]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437c:	4b75      	ldr	r3, [pc, #468]	; (8004554 <HAL_RCC_OscConfig+0x2c8>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	05d1      	lsls	r1, r2, #23
 8004382:	f140 80a3 	bpl.w	80044cc <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004386:	68e3      	ldr	r3, [r4, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d037      	beq.n	80043fc <HAL_RCC_OscConfig+0x170>
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80e7 	beq.w	8004560 <HAL_RCC_OscConfig+0x2d4>
 8004392:	2b05      	cmp	r3, #5
 8004394:	4b6b      	ldr	r3, [pc, #428]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	f000 811f 	beq.w	80045da <HAL_RCC_OscConfig+0x34e>
 800439c:	f022 0201 	bic.w	r2, r2, #1
 80043a0:	621a      	str	r2, [r3, #32]
 80043a2:	6a1a      	ldr	r2, [r3, #32]
 80043a4:	f022 0204 	bic.w	r2, r2, #4
 80043a8:	621a      	str	r2, [r3, #32]
 80043aa:	e02c      	b.n	8004406 <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ac:	4a65      	ldr	r2, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 80043ae:	6851      	ldr	r1, [r2, #4]
 80043b0:	f011 0f0c 	tst.w	r1, #12
 80043b4:	d061      	beq.n	800447a <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043b6:	6851      	ldr	r1, [r2, #4]
 80043b8:	f001 010c 	and.w	r1, r1, #12
 80043bc:	2908      	cmp	r1, #8
 80043be:	d059      	beq.n	8004474 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c0:	6923      	ldr	r3, [r4, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 80eb 	beq.w	800459e <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 80043c8:	2201      	movs	r2, #1
 80043ca:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	4d5d      	ldr	r5, [pc, #372]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 80043ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043d0:	f7ff f96e 	bl	80036b0 <HAL_GetTick>
 80043d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d6:	e005      	b.n	80043e4 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d8:	f7ff f96a 	bl	80036b0 <HAL_GetTick>
 80043dc:	1b80      	subs	r0, r0, r6
 80043de:	2802      	cmp	r0, #2
 80043e0:	f200 8085 	bhi.w	80044ee <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	0798      	lsls	r0, r3, #30
 80043e8:	d5f6      	bpl.n	80043d8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	682b      	ldr	r3, [r5, #0]
 80043ec:	6962      	ldr	r2, [r4, #20]
 80043ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80043f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	e789      	b.n	8004310 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fc:	4a51      	ldr	r2, [pc, #324]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 80043fe:	6a13      	ldr	r3, [r2, #32]
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004406:	f7ff f953 	bl	80036b0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440a:	4e4e      	ldr	r6, [pc, #312]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 800440c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004412:	e005      	b.n	8004420 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004414:	f7ff f94c 	bl	80036b0 <HAL_GetTick>
 8004418:	eba0 0008 	sub.w	r0, r0, r8
 800441c:	42b8      	cmp	r0, r7
 800441e:	d866      	bhi.n	80044ee <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	6a33      	ldr	r3, [r6, #32]
 8004422:	079b      	lsls	r3, r3, #30
 8004424:	d5f6      	bpl.n	8004414 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8004426:	b125      	cbz	r5, 8004432 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004428:	4a46      	ldr	r2, [pc, #280]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 800442a:	69d3      	ldr	r3, [r2, #28]
 800442c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004430:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004432:	69e0      	ldr	r0, [r4, #28]
 8004434:	b1d0      	cbz	r0, 800446c <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004436:	4d43      	ldr	r5, [pc, #268]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 8004438:	686a      	ldr	r2, [r5, #4]
 800443a:	f002 020c 	and.w	r2, r2, #12
 800443e:	2a08      	cmp	r2, #8
 8004440:	f000 80d3 	beq.w	80045ea <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004444:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	4a44      	ldr	r2, [pc, #272]	; (800455c <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444c:	f000 80de 	beq.w	800460c <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8004450:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8004452:	f7ff f92d 	bl	80036b0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004456:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004458:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445a:	e004      	b.n	8004466 <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7ff f928 	bl	80036b0 <HAL_GetTick>
 8004460:	1b40      	subs	r0, r0, r5
 8004462:	2802      	cmp	r0, #2
 8004464:	d843      	bhi.n	80044ee <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	d4f7      	bmi.n	800445c <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 800446c:	2000      	movs	r0, #0
}
 800446e:	b002      	add	sp, #8
 8004470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004474:	6852      	ldr	r2, [r2, #4]
 8004476:	03d6      	lsls	r6, r2, #15
 8004478:	d4a2      	bmi.n	80043c0 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	4a32      	ldr	r2, [pc, #200]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	0795      	lsls	r5, r2, #30
 8004480:	d539      	bpl.n	80044f6 <HAL_RCC_OscConfig+0x26a>
 8004482:	6922      	ldr	r2, [r4, #16]
 8004484:	2a01      	cmp	r2, #1
 8004486:	d036      	beq.n	80044f6 <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8004488:	2001      	movs	r0, #1
}
 800448a:	b002      	add	sp, #8
 800448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004490:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004492:	4d2c      	ldr	r5, [pc, #176]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8004494:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004496:	f7ff f90b 	bl	80036b0 <HAL_GetTick>
 800449a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	e004      	b.n	80044a8 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449e:	f7ff f907 	bl	80036b0 <HAL_GetTick>
 80044a2:	1b80      	subs	r0, r0, r6
 80044a4:	2802      	cmp	r0, #2
 80044a6:	d822      	bhi.n	80044ee <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044aa:	079f      	lsls	r7, r3, #30
 80044ac:	d4f7      	bmi.n	800449e <HAL_RCC_OscConfig+0x212>
 80044ae:	e753      	b.n	8004358 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044b0:	684a      	ldr	r2, [r1, #4]
 80044b2:	03d0      	lsls	r0, r2, #15
 80044b4:	f57f af01 	bpl.w	80042ba <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4a22      	ldr	r2, [pc, #136]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	0391      	lsls	r1, r2, #14
 80044be:	f57f af25 	bpl.w	800430c <HAL_RCC_OscConfig+0x80>
 80044c2:	6862      	ldr	r2, [r4, #4]
 80044c4:	2a00      	cmp	r2, #0
 80044c6:	f47f af21 	bne.w	800430c <HAL_RCC_OscConfig+0x80>
 80044ca:	e7dd      	b.n	8004488 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044cc:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ce:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80044d6:	f7ff f8eb 	bl	80036b0 <HAL_GetTick>
 80044da:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	05da      	lsls	r2, r3, #23
 80044e0:	f53f af51 	bmi.w	8004386 <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7ff f8e4 	bl	80036b0 <HAL_GetTick>
 80044e8:	1bc0      	subs	r0, r0, r7
 80044ea:	2864      	cmp	r0, #100	; 0x64
 80044ec:	d9f6      	bls.n	80044dc <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 80044ee:	2003      	movs	r0, #3
}
 80044f0:	b002      	add	sp, #8
 80044f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4913      	ldr	r1, [pc, #76]	; (8004544 <HAL_RCC_OscConfig+0x2b8>)
 80044f8:	6960      	ldr	r0, [r4, #20]
 80044fa:	680a      	ldr	r2, [r1, #0]
 80044fc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004500:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004504:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	e703      	b.n	8004310 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004508:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800450c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004510:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004514:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004520:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004522:	f7ff f8c5 	bl	80036b0 <HAL_GetTick>
 8004526:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004528:	e004      	b.n	8004534 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452a:	f7ff f8c1 	bl	80036b0 <HAL_GetTick>
 800452e:	1b80      	subs	r0, r0, r6
 8004530:	2864      	cmp	r0, #100	; 0x64
 8004532:	d8dc      	bhi.n	80044ee <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	039b      	lsls	r3, r3, #14
 8004538:	d4f7      	bmi.n	800452a <HAL_RCC_OscConfig+0x29e>
 800453a:	e6e6      	b.n	800430a <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 800453c:	2001      	movs	r0, #1
}
 800453e:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8004540:	2500      	movs	r5, #0
 8004542:	e71b      	b.n	800437c <HAL_RCC_OscConfig+0xf0>
 8004544:	40021000 	.word	0x40021000
 8004548:	42420480 	.word	0x42420480
 800454c:	20000000 	.word	0x20000000
 8004550:	10624dd3 	.word	0x10624dd3
 8004554:	40007000 	.word	0x40007000
 8004558:	42420000 	.word	0x42420000
 800455c:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004564:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004568:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456a:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	621a      	str	r2, [r3, #32]
 8004572:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004574:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004578:	f022 0204 	bic.w	r2, r2, #4
 800457c:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800457e:	f7ff f897 	bl	80036b0 <HAL_GetTick>
 8004582:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004584:	e004      	b.n	8004590 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7ff f893 	bl	80036b0 <HAL_GetTick>
 800458a:	1bc0      	subs	r0, r0, r7
 800458c:	4540      	cmp	r0, r8
 800458e:	d8ae      	bhi.n	80044ee <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004590:	6a33      	ldr	r3, [r6, #32]
 8004592:	0798      	lsls	r0, r3, #30
 8004594:	d4f7      	bmi.n	8004586 <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8004596:	2d00      	cmp	r5, #0
 8004598:	f43f af4b 	beq.w	8004432 <HAL_RCC_OscConfig+0x1a6>
 800459c:	e744      	b.n	8004428 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 800459e:	4a34      	ldr	r2, [pc, #208]	; (8004670 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a0:	4d34      	ldr	r5, [pc, #208]	; (8004674 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 80045a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045a4:	f7ff f884 	bl	80036b0 <HAL_GetTick>
 80045a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045aa:	e004      	b.n	80045b6 <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ac:	f7ff f880 	bl	80036b0 <HAL_GetTick>
 80045b0:	1b80      	subs	r0, r0, r6
 80045b2:	2802      	cmp	r0, #2
 80045b4:	d89b      	bhi.n	80044ee <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	0799      	lsls	r1, r3, #30
 80045ba:	d4f7      	bmi.n	80045ac <HAL_RCC_OscConfig+0x320>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	e6a7      	b.n	8004310 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045c4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e689      	b.n	80042ee <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045da:	f042 0204 	orr.w	r2, r2, #4
 80045de:	621a      	str	r2, [r3, #32]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	621a      	str	r2, [r3, #32]
 80045e8:	e70d      	b.n	8004406 <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ea:	2801      	cmp	r0, #1
 80045ec:	f43f af4d 	beq.w	800448a <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 80045f0:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f2:	6a22      	ldr	r2, [r4, #32]
 80045f4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80045f8:	4291      	cmp	r1, r2
 80045fa:	f47f af45 	bne.w	8004488 <HAL_RCC_OscConfig+0x1fc>
 80045fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004600:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8004604:	1a18      	subs	r0, r3, r0
 8004606:	bf18      	it	ne
 8004608:	2001      	movne	r0, #1
 800460a:	e73e      	b.n	800448a <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 800460c:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800460e:	f7ff f84f 	bl	80036b0 <HAL_GetTick>
 8004612:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004614:	e005      	b.n	8004622 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004616:	f7ff f84b 	bl	80036b0 <HAL_GetTick>
 800461a:	1b80      	subs	r0, r0, r6
 800461c:	2802      	cmp	r0, #2
 800461e:	f63f af66 	bhi.w	80044ee <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	0199      	lsls	r1, r3, #6
 8004626:	d4f6      	bmi.n	8004616 <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004628:	6a22      	ldr	r2, [r4, #32]
 800462a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800462e:	d105      	bne.n	800463c <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004630:	686b      	ldr	r3, [r5, #4]
 8004632:	68a1      	ldr	r1, [r4, #8]
 8004634:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004638:	430b      	orrs	r3, r1
 800463a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800463c:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_OscConfig+0x3e8>)
 8004640:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	4302      	orrs	r2, r0
 8004646:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800464a:	480b      	ldr	r0, [pc, #44]	; (8004678 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8004650:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004652:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8004654:	f7ff f82c 	bl	80036b0 <HAL_GetTick>
 8004658:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800465a:	e005      	b.n	8004668 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465c:	f7ff f828 	bl	80036b0 <HAL_GetTick>
 8004660:	1b40      	subs	r0, r0, r5
 8004662:	2802      	cmp	r0, #2
 8004664:	f63f af43 	bhi.w	80044ee <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	019a      	lsls	r2, r3, #6
 800466c:	d5f6      	bpl.n	800465c <HAL_RCC_OscConfig+0x3d0>
 800466e:	e6fd      	b.n	800446c <HAL_RCC_OscConfig+0x1e0>
 8004670:	42420000 	.word	0x42420000
 8004674:	40021000 	.word	0x40021000
 8004678:	42420060 	.word	0x42420060

0800467c <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800467c:	f240 2201 	movw	r2, #513	; 0x201
{
 8004680:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8004684:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004688:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800468c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800468e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8004692:	4912      	ldr	r1, [pc, #72]	; (80046dc <HAL_RCC_GetSysClockFreq+0x60>)
 8004694:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004696:	f003 020c 	and.w	r2, r3, #12
 800469a:	2a08      	cmp	r2, #8
 800469c:	d002      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 800469e:	4810      	ldr	r0, [pc, #64]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80046a0:	b006      	add	sp, #24
 80046a2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046a4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80046a8:	4462      	add	r2, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046aa:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ac:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046b0:	d404      	bmi.n	80046bc <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046b2:	480c      	ldr	r0, [pc, #48]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x68>)
 80046b4:	fb00 f002 	mul.w	r0, r0, r2
}
 80046b8:	b006      	add	sp, #24
 80046ba:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046be:	4808      	ldr	r0, [pc, #32]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046c4:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046c8:	4463      	add	r3, ip
 80046ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80046d2:	b006      	add	sp, #24
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	08005ac4 	.word	0x08005ac4
 80046dc:	40021000 	.word	0x40021000
 80046e0:	007a1200 	.word	0x007a1200
 80046e4:	003d0900 	.word	0x003d0900

080046e8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80046e8:	b178      	cbz	r0, 800470a <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ea:	4a4a      	ldr	r2, [pc, #296]	; (8004814 <HAL_RCC_ClockConfig+0x12c>)
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	428b      	cmp	r3, r1
 80046f4:	d20b      	bcs.n	800470e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	6813      	ldr	r3, [r2, #0]
 80046f8:	f023 0307 	bic.w	r3, r3, #7
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	428b      	cmp	r3, r1
 8004708:	d001      	beq.n	800470e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800470a:	2001      	movs	r0, #1
}
 800470c:	4770      	bx	lr
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470e:	6803      	ldr	r3, [r0, #0]
{
 8004710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004714:	079d      	lsls	r5, r3, #30
 8004716:	d514      	bpl.n	8004742 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	075c      	lsls	r4, r3, #29
 800471a:	d504      	bpl.n	8004726 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4c3e      	ldr	r4, [pc, #248]	; (8004818 <HAL_RCC_ClockConfig+0x130>)
 800471e:	6862      	ldr	r2, [r4, #4]
 8004720:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004724:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	071a      	lsls	r2, r3, #28
 8004728:	d504      	bpl.n	8004734 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800472a:	4c3b      	ldr	r4, [pc, #236]	; (8004818 <HAL_RCC_ClockConfig+0x130>)
 800472c:	6862      	ldr	r2, [r4, #4]
 800472e:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004732:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4c38      	ldr	r4, [pc, #224]	; (8004818 <HAL_RCC_ClockConfig+0x130>)
 8004736:	6885      	ldr	r5, [r0, #8]
 8004738:	6862      	ldr	r2, [r4, #4]
 800473a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800473e:	432a      	orrs	r2, r5
 8004740:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004742:	07df      	lsls	r7, r3, #31
 8004744:	4604      	mov	r4, r0
 8004746:	460d      	mov	r5, r1
 8004748:	d520      	bpl.n	800478c <HAL_RCC_ClockConfig+0xa4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474a:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004750:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004752:	d056      	beq.n	8004802 <HAL_RCC_ClockConfig+0x11a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004754:	2a02      	cmp	r2, #2
 8004756:	d059      	beq.n	800480c <HAL_RCC_ClockConfig+0x124>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004758:	0799      	lsls	r1, r3, #30
 800475a:	d527      	bpl.n	80047ac <HAL_RCC_ClockConfig+0xc4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800475c:	4e2e      	ldr	r6, [pc, #184]	; (8004818 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004762:	6873      	ldr	r3, [r6, #4]
 8004764:	f023 0303 	bic.w	r3, r3, #3
 8004768:	4313      	orrs	r3, r2
 800476a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800476c:	f7fe ffa0 	bl	80036b0 <HAL_GetTick>
 8004770:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	e004      	b.n	800477e <HAL_RCC_ClockConfig+0x96>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004774:	f7fe ff9c 	bl	80036b0 <HAL_GetTick>
 8004778:	1bc0      	subs	r0, r0, r7
 800477a:	4540      	cmp	r0, r8
 800477c:	d844      	bhi.n	8004808 <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	6873      	ldr	r3, [r6, #4]
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800478a:	d1f3      	bne.n	8004774 <HAL_RCC_ClockConfig+0x8c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800478c:	4a21      	ldr	r2, [pc, #132]	; (8004814 <HAL_RCC_ClockConfig+0x12c>)
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	42ab      	cmp	r3, r5
 8004796:	d90c      	bls.n	80047b2 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004798:	6813      	ldr	r3, [r2, #0]
 800479a:	f023 0307 	bic.w	r3, r3, #7
 800479e:	432b      	orrs	r3, r5
 80047a0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	42ab      	cmp	r3, r5
 80047aa:	d002      	beq.n	80047b2 <HAL_RCC_ClockConfig+0xca>
    return HAL_ERROR;
 80047ac:	2001      	movs	r0, #1
}
 80047ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	075a      	lsls	r2, r3, #29
 80047b6:	d506      	bpl.n	80047c6 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4917      	ldr	r1, [pc, #92]	; (8004818 <HAL_RCC_ClockConfig+0x130>)
 80047ba:	68e0      	ldr	r0, [r4, #12]
 80047bc:	684a      	ldr	r2, [r1, #4]
 80047be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047c2:	4302      	orrs	r2, r0
 80047c4:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c6:	071b      	lsls	r3, r3, #28
 80047c8:	d412      	bmi.n	80047f0 <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ca:	f7ff ff57 	bl	800467c <HAL_RCC_GetSysClockFreq>
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_RCC_ClockConfig+0x130>)
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <HAL_RCC_ClockConfig+0x134>)
 80047d2:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 80047d4:	4912      	ldr	r1, [pc, #72]	; (8004820 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	4a11      	ldr	r2, [pc, #68]	; (8004824 <HAL_RCC_ClockConfig+0x13c>)
 80047de:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 80047e2:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047e4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80047e6:	f7fe ff21 	bl	800362c <HAL_InitTick>
  return HAL_OK;
 80047ea:	2000      	movs	r0, #0
}
 80047ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047f0:	4a09      	ldr	r2, [pc, #36]	; (8004818 <HAL_RCC_ClockConfig+0x130>)
 80047f2:	6921      	ldr	r1, [r4, #16]
 80047f4:	6853      	ldr	r3, [r2, #4]
 80047f6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80047fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80047fe:	6053      	str	r3, [r2, #4]
 8004800:	e7e3      	b.n	80047ca <HAL_RCC_ClockConfig+0xe2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004802:	039e      	lsls	r6, r3, #14
 8004804:	d4aa      	bmi.n	800475c <HAL_RCC_ClockConfig+0x74>
 8004806:	e7d1      	b.n	80047ac <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 8004808:	2003      	movs	r0, #3
 800480a:	e7ef      	b.n	80047ec <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480c:	0198      	lsls	r0, r3, #6
 800480e:	d4a5      	bmi.n	800475c <HAL_RCC_ClockConfig+0x74>
 8004810:	e7cc      	b.n	80047ac <HAL_RCC_ClockConfig+0xc4>
 8004812:	bf00      	nop
 8004814:	40022000 	.word	0x40022000
 8004818:	40021000 	.word	0x40021000
 800481c:	08005b14 	.word	0x08005b14
 8004820:	20000008 	.word	0x20000008
 8004824:	20000000 	.word	0x20000000

08004828 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_RCC_GetPCLK1Freq+0x14>)
 800482a:	4905      	ldr	r1, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x18>)
 800482c:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800482e:	4a05      	ldr	r2, [pc, #20]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004830:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	6810      	ldr	r0, [r2, #0]
}
 8004838:	40d8      	lsrs	r0, r3
 800483a:	4770      	bx	lr
 800483c:	40021000 	.word	0x40021000
 8004840:	08005b24 	.word	0x08005b24
 8004844:	20000000 	.word	0x20000000

08004848 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <HAL_RCC_GetPCLK2Freq+0x14>)
 800484a:	4905      	ldr	r1, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK2Freq+0x18>)
 800484c:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800484e:	4a05      	ldr	r2, [pc, #20]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004850:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	6810      	ldr	r0, [r2, #0]
}
 8004858:	40d8      	lsrs	r0, r3
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000
 8004860:	08005b24 	.word	0x08005b24
 8004864:	20000000 	.word	0x20000000

08004868 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800486e:	6800      	ldr	r0, [r0, #0]
{
 8004870:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004872:	07c5      	lsls	r5, r0, #31
 8004874:	d52a      	bpl.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004876:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	00d1      	lsls	r1, r2, #3
 800487c:	d53d      	bpl.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487e:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 8004880:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	05d2      	lsls	r2, r2, #23
 8004886:	d546      	bpl.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004888:	4935      	ldr	r1, [pc, #212]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800488a:	6860      	ldr	r0, [r4, #4]
 800488c:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800488e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8004892:	d00f      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8004894:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8004898:	4293      	cmp	r3, r2
 800489a:	d00b      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800489c:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800489e:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048a0:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80048a2:	4a31      	ldr	r2, [pc, #196]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80048a8:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048aa:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048ac:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048ae:	07d8      	lsls	r0, r3, #31
 80048b0:	d445      	bmi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80048b2:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80048b6:	6a13      	ldr	r3, [r2, #32]
 80048b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048bc:	4303      	orrs	r3, r0
 80048be:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048c0:	b11d      	cbz	r5, 80048ca <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c2:	69d3      	ldr	r3, [r2, #28]
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c8:	61d3      	str	r3, [r2, #28]
 80048ca:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048cc:	0783      	lsls	r3, r0, #30
 80048ce:	d506      	bpl.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80048d2:	68a1      	ldr	r1, [r4, #8]
 80048d4:	6853      	ldr	r3, [r2, #4]
 80048d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80048da:	430b      	orrs	r3, r1
 80048dc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048de:	f010 0010 	ands.w	r0, r0, #16
 80048e2:	d007      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048e4:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e6:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80048e8:	68e1      	ldr	r1, [r4, #12]
 80048ea:	6853      	ldr	r3, [r2, #4]
 80048ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6053      	str	r3, [r2, #4]
}
 80048f4:	b002      	add	sp, #8
 80048f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80048fc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004902:	61da      	str	r2, [r3, #28]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	05d2      	lsls	r2, r2, #23
 8004914:	d4b8      	bmi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004916:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004918:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004920:	f7fe fec6 	bl	80036b0 <HAL_GetTick>
 8004924:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004926:	6833      	ldr	r3, [r6, #0]
 8004928:	05db      	lsls	r3, r3, #23
 800492a:	d4ad      	bmi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492c:	f7fe fec0 	bl	80036b0 <HAL_GetTick>
 8004930:	1bc0      	subs	r0, r0, r7
 8004932:	2864      	cmp	r0, #100	; 0x64
 8004934:	d9f7      	bls.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8004936:	2003      	movs	r0, #3
}
 8004938:	b002      	add	sp, #8
 800493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800493e:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 8004940:	f7fe feb6 	bl	80036b0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004948:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494a:	6a33      	ldr	r3, [r6, #32]
 800494c:	079a      	lsls	r2, r3, #30
 800494e:	d4b0      	bmi.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fe feae 	bl	80036b0 <HAL_GetTick>
 8004954:	eba0 0008 	sub.w	r0, r0, r8
 8004958:	42b8      	cmp	r0, r7
 800495a:	d9f6      	bls.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800495c:	e7eb      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	42420440 	.word	0x42420440

0800496c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800496c:	b510      	push	{r4, lr}
 800496e:	4604      	mov	r4, r0
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004970:	f240 2201 	movw	r2, #513	; 0x201
{
 8004974:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004976:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8004978:	f10d 0c18 	add.w	ip, sp, #24
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800497c:	2c02      	cmp	r4, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800497e:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004984:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  switch (PeriphClk)
 8004988:	d042      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800498a:	2c10      	cmp	r4, #16
 800498c:	d01c      	beq.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 800498e:	2c01      	cmp	r4, #1
 8004990:	d002      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004992:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004994:	b006      	add	sp, #24
 8004996:	bd10      	pop	{r4, pc}
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004998:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 800499c:	492b      	ldr	r1, [pc, #172]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800499e:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80049a0:	401a      	ands	r2, r3
 80049a2:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80049a6:	d04b      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b0:	d03a      	beq.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b6:	d1ec      	bne.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80049b8:	680b      	ldr	r3, [r1, #0]
        frequency = HSE_VALUE / 128U;
 80049ba:	f24f 4024 	movw	r0, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        frequency = HSE_VALUE / 128U;
 80049c2:	bf08      	it	eq
 80049c4:	2000      	moveq	r0, #0
 80049c6:	e7e5      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      temp_reg = RCC->CFGR;
 80049c8:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80049ca:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80049d2:	d0df      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049d4:	a806      	add	r0, sp, #24
 80049d6:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80049da:	4402      	add	r2, r0
 80049dc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049e0:	03ca      	lsls	r2, r1, #15
 80049e2:	d529      	bpl.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	a906      	add	r1, sp, #24
 80049e8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80049ec:	440b      	add	r3, r1
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049f0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	fb00 f003 	mul.w	r0, r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80049fc:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	025b      	lsls	r3, r3, #9
 8004a02:	d4c7      	bmi.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          frequency = (pllclk * 2) / 3;
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8004a06:	0040      	lsls	r0, r0, #1
 8004a08:	fba3 3000 	umull	r3, r0, r3, r0
 8004a0c:	0840      	lsrs	r0, r0, #1
 8004a0e:	e7c1      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a10:	f7ff ff1a 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004a24:	b006      	add	sp, #24
 8004a26:	bd10      	pop	{r4, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004a28:	6a4b      	ldr	r3, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8004a2a:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004a2e:	f013 0f02 	tst.w	r3, #2
        frequency = LSI_VALUE;
 8004a32:	bf08      	it	eq
 8004a34:	2000      	moveq	r0, #0
 8004a36:	e7ad      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004a3a:	fb03 f000 	mul.w	r0, r3, r0
 8004a3e:	e7dd      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
        frequency = LSE_VALUE;
 8004a40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004a44:	e7a6      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8004a46:	bf00      	nop
 8004a48:	08005ad4 	.word	0x08005ad4
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	007a1200 	.word	0x007a1200
 8004a54:	aaaaaaab 	.word	0xaaaaaaab
 8004a58:	003d0900 	.word	0x003d0900

08004a5c <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	4607      	mov	r7, r0
 8004a62:	460d      	mov	r5, r1
 8004a64:	4616      	mov	r6, r2
 8004a66:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a68:	683c      	ldr	r4, [r7, #0]
 8004a6a:	e001      	b.n	8004a70 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	1c73      	adds	r3, r6, #1
 8004a6e:	d106      	bne.n	8004a7e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a70:	68a0      	ldr	r0, [r4, #8]
 8004a72:	ea35 0300 	bics.w	r3, r5, r0
 8004a76:	d0f9      	beq.n	8004a6c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004a78:	2000      	movs	r0, #0
}
 8004a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a7e:	f7fe fe17 	bl	80036b0 <HAL_GetTick>
 8004a82:	eba0 0008 	sub.w	r0, r0, r8
 8004a86:	4286      	cmp	r6, r0
 8004a88:	d8ee      	bhi.n	8004a68 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a8a:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a8e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a90:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a98:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9a:	d014      	beq.n	8004ac6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a9e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004aa2:	d007      	beq.n	8004ab4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 8004aa4:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004aa6:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004aa8:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004aac:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8004ab0:	2003      	movs	r0, #3
 8004ab2:	e7e2      	b.n	8004a7a <SPI_WaitFlagStateUntilTimeout.constprop.6+0x1e>
          SPI_RESET_CRC(hspi);
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e7ee      	b.n	8004aa4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004acc:	d002      	beq.n	8004ad4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ace:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004ad2:	d1e3      	bne.n	8004a9c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x40>
          __HAL_SPI_DISABLE(hspi);
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e7de      	b.n	8004a9c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x40>
 8004ade:	bf00      	nop

08004ae0 <HAL_SPI_TransmitReceive.part.2>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8004ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ae4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004ae6:	2001      	movs	r0, #1
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8004ae8:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8004aea:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8004aee:	4691      	mov	r9, r2
 8004af0:	4698      	mov	r8, r3
 8004af2:	460f      	mov	r7, r1
 8004af4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 8004af6:	f7fe fddb 	bl	80036b0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004afa:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004afe:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004b00:	b2d2      	uxtb	r2, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b02:	2a01      	cmp	r2, #1
  tmp_mode            = hspi->Init.Mode;
 8004b04:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b06:	d011      	beq.n	8004b2c <HAL_SPI_TransmitReceive.part.2+0x4c>
 8004b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b0c:	d009      	beq.n	8004b22 <HAL_SPI_TransmitReceive.part.2+0x42>
    errorcode = HAL_BUSY;
 8004b0e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004b10:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004b12:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004b14:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b18:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004b1c:	b003      	add	sp, #12
 8004b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b22:	68a1      	ldr	r1, [r4, #8]
 8004b24:	2900      	cmp	r1, #0
 8004b26:	d1f2      	bne.n	8004b0e <HAL_SPI_TransmitReceive.part.2+0x2e>
 8004b28:	2a04      	cmp	r2, #4
 8004b2a:	d1f0      	bne.n	8004b0e <HAL_SPI_TransmitReceive.part.2+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b2c:	2f00      	cmp	r7, #0
 8004b2e:	d064      	beq.n	8004bfa <HAL_SPI_TransmitReceive.part.2+0x11a>
 8004b30:	f1b9 0f00 	cmp.w	r9, #0
 8004b34:	d061      	beq.n	8004bfa <HAL_SPI_TransmitReceive.part.2+0x11a>
 8004b36:	f1b8 0f00 	cmp.w	r8, #0
 8004b3a:	d05e      	beq.n	8004bfa <HAL_SPI_TransmitReceive.part.2+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b3c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b40:	6821      	ldr	r1, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b42:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b44:	bf1c      	itt	ne
 8004b46:	2205      	movne	r2, #5
 8004b48:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8004b50:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004b54:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b58:	6808      	ldr	r0, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b5a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b5e:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 8004b60:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b64:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b66:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8004b6a:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b6e:	d546      	bpl.n	8004bfe <HAL_SPI_TransmitReceive.part.2+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b70:	68e2      	ldr	r2, [r4, #12]
 8004b72:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004b76:	d05a      	beq.n	8004c2e <HAL_SPI_TransmitReceive.part.2+0x14e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d145      	bne.n	8004c08 <HAL_SPI_TransmitReceive.part.2+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b7c:	783b      	ldrb	r3, [r7, #0]
 8004b7e:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 8004b80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b82:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b88:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004b8a:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b8c:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 8004b8e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b90:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004b92:	b292      	uxth	r2, r2
 8004b94:	b91a      	cbnz	r2, 8004b9e <HAL_SPI_TransmitReceive.part.2+0xbe>
 8004b96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d038      	beq.n	8004c10 <HAL_SPI_TransmitReceive.part.2+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	6893      	ldr	r3, [r2, #8]
 8004ba2:	0798      	lsls	r0, r3, #30
 8004ba4:	d50f      	bpl.n	8004bc6 <HAL_SPI_TransmitReceive.part.2+0xe6>
 8004ba6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	b163      	cbz	r3, 8004bc6 <HAL_SPI_TransmitReceive.part.2+0xe6>
 8004bac:	b15f      	cbz	r7, 8004bc6 <HAL_SPI_TransmitReceive.part.2+0xe6>
        txallowed = 0U;
 8004bae:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8004bb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004bb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004bba:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8004bbc:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	6822      	ldr	r2, [r4, #0]
 8004bc2:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004bc4:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bc6:	6893      	ldr	r3, [r2, #8]
 8004bc8:	07d9      	lsls	r1, r3, #31
 8004bca:	d50d      	bpl.n	8004be8 <HAL_SPI_TransmitReceive.part.2+0x108>
 8004bcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	b153      	cbz	r3, 8004be8 <HAL_SPI_TransmitReceive.part.2+0x108>
        txallowed = 1U;
 8004bd2:	2701      	movs	r7, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bd4:	68d2      	ldr	r2, [r2, #12]
 8004bd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004bd8:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8004bda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004bdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8004be2:	443a      	add	r2, r7
        hspi->RxXferCount--;
 8004be4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004be6:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004be8:	f7fe fd62 	bl	80036b0 <HAL_GetTick>
 8004bec:	1b80      	subs	r0, r0, r6
 8004bee:	4285      	cmp	r5, r0
 8004bf0:	d8ce      	bhi.n	8004b90 <HAL_SPI_TransmitReceive.part.2+0xb0>
 8004bf2:	1c6b      	adds	r3, r5, #1
 8004bf4:	d0cc      	beq.n	8004b90 <HAL_SPI_TransmitReceive.part.2+0xb0>
        errorcode = HAL_TIMEOUT;
 8004bf6:	2003      	movs	r0, #3
 8004bf8:	e78a      	b.n	8004b10 <HAL_SPI_TransmitReceive.part.2+0x30>
    errorcode = HAL_ERROR;
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	e788      	b.n	8004b10 <HAL_SPI_TransmitReceive.part.2+0x30>
    __HAL_SPI_ENABLE(hspi);
 8004bfe:	680a      	ldr	r2, [r1, #0]
 8004c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c04:	600a      	str	r2, [r1, #0]
 8004c06:	e7b3      	b.n	8004b70 <HAL_SPI_TransmitReceive.part.2+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c08:	f1b8 0f01 	cmp.w	r8, #1
 8004c0c:	d1bf      	bne.n	8004b8e <HAL_SPI_TransmitReceive.part.2+0xae>
 8004c0e:	e7b5      	b.n	8004b7c <HAL_SPI_TransmitReceive.part.2+0x9c>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c10:	4633      	mov	r3, r6
 8004c12:	462a      	mov	r2, r5
 8004c14:	2180      	movs	r1, #128	; 0x80
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff ff20 	bl	8004a5c <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d046      	beq.n	8004cae <HAL_SPI_TransmitReceive.part.2+0x1ce>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c20:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c22:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c24:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c26:	4313      	orrs	r3, r2
 8004c28:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c2a:	6562      	str	r2, [r4, #84]	; 0x54
 8004c2c:	e770      	b.n	8004b10 <HAL_SPI_TransmitReceive.part.2+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d034      	beq.n	8004c9c <HAL_SPI_TransmitReceive.part.2+0x1bc>
 8004c32:	f1b8 0f01 	cmp.w	r8, #1
 8004c36:	d031      	beq.n	8004c9c <HAL_SPI_TransmitReceive.part.2+0x1bc>
        txallowed = 1U;
 8004c38:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	b91b      	cbnz	r3, 8004c48 <HAL_SPI_TransmitReceive.part.2+0x168>
 8004c40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0e3      	beq.n	8004c10 <HAL_SPI_TransmitReceive.part.2+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	0791      	lsls	r1, r2, #30
 8004c4e:	d50d      	bpl.n	8004c6c <HAL_SPI_TransmitReceive.part.2+0x18c>
 8004c50:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004c52:	b292      	uxth	r2, r2
 8004c54:	b152      	cbz	r2, 8004c6c <HAL_SPI_TransmitReceive.part.2+0x18c>
 8004c56:	b14f      	cbz	r7, 8004c6c <HAL_SPI_TransmitReceive.part.2+0x18c>
        txallowed = 0U;
 8004c58:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004c5c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004c60:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8004c62:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c64:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004c66:	3a01      	subs	r2, #1
 8004c68:	b292      	uxth	r2, r2
 8004c6a:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	07d2      	lsls	r2, r2, #31
 8004c70:	d50c      	bpl.n	8004c8c <HAL_SPI_TransmitReceive.part.2+0x1ac>
 8004c72:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004c74:	b292      	uxth	r2, r2
 8004c76:	b14a      	cbz	r2, 8004c8c <HAL_SPI_TransmitReceive.part.2+0x1ac>
        txallowed = 1U;
 8004c78:	2701      	movs	r7, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c7e:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8004c82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c84:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c8c:	f7fe fd10 	bl	80036b0 <HAL_GetTick>
 8004c90:	1b80      	subs	r0, r0, r6
 8004c92:	42a8      	cmp	r0, r5
 8004c94:	d3d1      	bcc.n	8004c3a <HAL_SPI_TransmitReceive.part.2+0x15a>
 8004c96:	1c6b      	adds	r3, r5, #1
 8004c98:	d0cf      	beq.n	8004c3a <HAL_SPI_TransmitReceive.part.2+0x15a>
 8004c9a:	e7ac      	b.n	8004bf6 <HAL_SPI_TransmitReceive.part.2+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c9c:	f837 3b02 	ldrh.w	r3, [r7], #2
 8004ca0:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8004ca2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca4:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004cac:	e7c4      	b.n	8004c38 <HAL_SPI_TransmitReceive.part.2+0x158>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f47f af2d 	bne.w	8004b10 <HAL_SPI_TransmitReceive.part.2+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	9001      	str	r0, [sp, #4]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	9201      	str	r2, [sp, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	e724      	b.n	8004b10 <HAL_SPI_TransmitReceive.part.2+0x30>
 8004cc6:	bf00      	nop

08004cc8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d03b      	beq.n	8004d44 <HAL_SPI_Init+0x7c>
{
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cce:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cd0:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8004cd4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cd8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8004cdc:	b361      	cbz	r1, 8004d38 <HAL_SPI_Init+0x70>
 8004cde:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ce0:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce4:	2702      	movs	r7, #2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ce6:	2100      	movs	r1, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004ce8:	2501      	movs	r5, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cea:	68e0      	ldr	r0, [r4, #12]
 8004cec:	4333      	orrs	r3, r6
 8004cee:	6926      	ldr	r6, [r4, #16]
 8004cf0:	4303      	orrs	r3, r0
 8004cf2:	6960      	ldr	r0, [r4, #20]
 8004cf4:	4333      	orrs	r3, r6
 8004cf6:	69e6      	ldr	r6, [r4, #28]
 8004cf8:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8004cfc:	4303      	orrs	r3, r0
 8004cfe:	6a20      	ldr	r0, [r4, #32]
 8004d00:	4333      	orrs	r3, r6
  __HAL_SPI_DISABLE(hspi);
 8004d02:	6826      	ldr	r6, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d04:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d08:	4303      	orrs	r3, r0
 8004d0a:	f40c 7000 	and.w	r0, ip, #512	; 0x200
 8004d0e:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8004d10:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d12:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d16:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8004d18:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d1c:	f00c 0204 	and.w	r2, ip, #4
  __HAL_SPI_DISABLE(hspi);
 8004d20:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d22:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d24:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d26:	69f3      	ldr	r3, [r6, #28]
  return HAL_OK;
 8004d28:	4608      	mov	r0, r1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d2e:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d30:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d32:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8004d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004d38:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004d3c:	f7fc faa8 	bl	8001290 <HAL_SPI_MspInit>
 8004d40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004d42:	e7cd      	b.n	8004ce0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004d44:	2001      	movs	r0, #1
}
 8004d46:	4770      	bx	lr

08004d48 <HAL_SPI_TransmitReceive>:
{
 8004d48:	b410      	push	{r4}
  __HAL_LOCK(hspi);
 8004d4a:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004d4e:	2c01      	cmp	r4, #1
 8004d50:	d002      	beq.n	8004d58 <HAL_SPI_TransmitReceive+0x10>
}
 8004d52:	bc10      	pop	{r4}
 8004d54:	f7ff bec4 	b.w	8004ae0 <HAL_SPI_TransmitReceive.part.2>
 8004d58:	2002      	movs	r0, #2
 8004d5a:	bc10      	pop	{r4}
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop

08004d60 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d60:	6803      	ldr	r3, [r0, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d70:	2a06      	cmp	r2, #6
 8004d72:	d003      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x1c>
  {
    __HAL_TIM_ENABLE(htim);
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d05a      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xbe>

  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	2202      	movs	r2, #2
{
 8004d8a:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8004d8c:	2501      	movs	r5, #1

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d8e:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004d94:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8004d96:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d98:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004d9c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004da0:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8004da2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8004da6:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004da8:	d074      	beq.n	8004e94 <HAL_TIM_ConfigClockSource+0x114>
 8004daa:	d94a      	bls.n	8004e42 <HAL_TIM_ConfigClockSource+0xc2>
 8004dac:	2c60      	cmp	r4, #96	; 0x60
 8004dae:	d02d      	beq.n	8004e0c <HAL_TIM_ConfigClockSource+0x8c>
 8004db0:	d956      	bls.n	8004e60 <HAL_TIM_ConfigClockSource+0xe0>
 8004db2:	2c70      	cmp	r4, #112	; 0x70
 8004db4:	d01a      	beq.n	8004dec <HAL_TIM_ConfigClockSource+0x6c>
 8004db6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8004dba:	d10e      	bne.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dbc:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004dc0:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004dc2:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc4:	432a      	orrs	r2, r5
 8004dc6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dca:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dce:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd0:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dd8:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004de0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8004de8:	4618      	mov	r0, r3
}
 8004dea:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dec:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8004df0:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8004df2:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df4:	432a      	orrs	r2, r5
 8004df6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfa:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dfe:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004e00:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004e02:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e04:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004e08:	609a      	str	r2, [r3, #8]
      break;
 8004e0a:	e7e6      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e0e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e10:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e14:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e16:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e18:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e24:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e28:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004e2c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004e30:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e36:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	e7cd      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8004e3e:	2002      	movs	r0, #2
}
 8004e40:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004e42:	2c10      	cmp	r4, #16
 8004e44:	d004      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0xd0>
 8004e46:	d93d      	bls.n	8004ec4 <HAL_TIM_ConfigClockSource+0x144>
 8004e48:	2c20      	cmp	r4, #32
 8004e4a:	d001      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0xd0>
 8004e4c:	2c30      	cmp	r4, #48	; 0x30
 8004e4e:	d1c4      	bne.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8004e50:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e52:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e5a:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8004e5c:	609c      	str	r4, [r3, #8]
 8004e5e:	e7bc      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004e60:	2c50      	cmp	r4, #80	; 0x50
 8004e62:	d1ba      	bne.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8004e64:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e66:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e68:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6a:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e70:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e74:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e78:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e7c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004e80:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8004e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e84:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004e86:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e8c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	e7a2      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8004e94:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e96:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e98:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9a:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea0:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ea4:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eac:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004eb0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8004eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004eb6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ebc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004ec0:	609a      	str	r2, [r3, #8]
 8004ec2:	e78a      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	d0c3      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0xd0>
 8004ec8:	e787      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x5a>
 8004eca:	bf00      	nop

08004ecc <HAL_TIM_OC_DelayElapsedCallback>:
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop

08004ed0 <HAL_TIM_IC_CaptureCallback>:
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop

08004ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <HAL_TIM_TriggerCallback>:
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop

08004edc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004edc:	6803      	ldr	r3, [r0, #0]
{
 8004ede:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee0:	691a      	ldr	r2, [r3, #16]
{
 8004ee2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee4:	0791      	lsls	r1, r2, #30
 8004ee6:	d502      	bpl.n	8004eee <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	0792      	lsls	r2, r2, #30
 8004eec:	d45f      	bmi.n	8004fae <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	0750      	lsls	r0, r2, #29
 8004ef2:	d502      	bpl.n	8004efa <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	0751      	lsls	r1, r2, #29
 8004ef8:	d446      	bmi.n	8004f88 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	0712      	lsls	r2, r2, #28
 8004efe:	d502      	bpl.n	8004f06 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	0710      	lsls	r0, r2, #28
 8004f04:	d42e      	bmi.n	8004f64 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	06d2      	lsls	r2, r2, #27
 8004f0a:	d502      	bpl.n	8004f12 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	06d0      	lsls	r0, r2, #27
 8004f10:	d418      	bmi.n	8004f44 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	07d1      	lsls	r1, r2, #31
 8004f16:	d502      	bpl.n	8004f1e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	07d2      	lsls	r2, r2, #31
 8004f1c:	d45d      	bmi.n	8004fda <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	0610      	lsls	r0, r2, #24
 8004f22:	d502      	bpl.n	8004f2a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	0611      	lsls	r1, r2, #24
 8004f28:	d45f      	bmi.n	8004fea <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	0652      	lsls	r2, r2, #25
 8004f2e:	d502      	bpl.n	8004f36 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	0650      	lsls	r0, r2, #25
 8004f34:	d461      	bmi.n	8004ffa <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	0691      	lsls	r1, r2, #26
 8004f3a:	d502      	bpl.n	8004f42 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	0692      	lsls	r2, r2, #26
 8004f40:	d443      	bmi.n	8004fca <HAL_TIM_IRQHandler+0xee>
}
 8004f42:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f44:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f48:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f4a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f4c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f50:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f54:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f56:	d064      	beq.n	8005022 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f58:	f7ff ffba 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	7722      	strb	r2, [r4, #28]
 8004f62:	e7d6      	b.n	8004f12 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f64:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f68:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f6a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f6c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f70:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f72:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f74:	d152      	bne.n	800501c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	f7ff ffa9 	bl	8004ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f7ff ffaa 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f80:	2200      	movs	r2, #0
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	7722      	strb	r2, [r4, #28]
 8004f86:	e7be      	b.n	8004f06 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f88:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f8c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f8e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f90:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f94:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f9a:	d13c      	bne.n	8005016 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9c:	f7ff ff96 	bl	8004ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f7ff ff97 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	7722      	strb	r2, [r4, #28]
 8004fac:	e7a5      	b.n	8004efa <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fae:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fb4:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fba:	079b      	lsls	r3, r3, #30
 8004fbc:	d025      	beq.n	800500a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	f7ff ff87 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	7722      	strb	r2, [r4, #28]
 8004fc8:	e791      	b.n	8004eee <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004fce:	4620      	mov	r0, r4
}
 8004fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004fd6:	f000 b8a5 	b.w	8005124 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fda:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe2:	f7fc f885 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	e799      	b.n	8004f1e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fea:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004fee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ff0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004ff2:	f000 f899 	bl	8005128 <HAL_TIMEx_BreakCallback>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	e797      	b.n	8004f2a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ffa:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004ffe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005000:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005002:	f7ff ff69 	bl	8004ed8 <HAL_TIM_TriggerCallback>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	e795      	b.n	8004f36 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	f7ff ff5f 	bl	8004ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500e:	4620      	mov	r0, r4
 8005010:	f7ff ff60 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005014:	e7d5      	b.n	8004fc2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	f7ff ff5b 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 800501a:	e7c4      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800501c:	f7ff ff58 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8005020:	e7ae      	b.n	8004f80 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	f7ff ff53 	bl	8004ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff ff54 	bl	8004ed4 <HAL_TIM_PWM_PulseFinishedCallback>
 800502c:	e796      	b.n	8004f5c <HAL_TIM_IRQHandler+0x80>
 800502e:	bf00      	nop

08005030 <TIM_Base_SetConfig>:
{
 8005030:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005032:	4e1c      	ldr	r6, [pc, #112]	; (80050a4 <TIM_Base_SetConfig+0x74>)
  tmpcr1 = TIMx->CR1;
 8005034:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005036:	42b0      	cmp	r0, r6
 8005038:	694d      	ldr	r5, [r1, #20]
 800503a:	688c      	ldr	r4, [r1, #8]
 800503c:	680a      	ldr	r2, [r1, #0]
 800503e:	d01d      	beq.n	800507c <TIM_Base_SetConfig+0x4c>
 8005040:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005044:	d011      	beq.n	800506a <TIM_Base_SetConfig+0x3a>
 8005046:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800504a:	42b0      	cmp	r0, r6
 800504c:	d00d      	beq.n	800506a <TIM_Base_SetConfig+0x3a>
 800504e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005052:	42b0      	cmp	r0, r6
 8005054:	d009      	beq.n	800506a <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800505c:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800505e:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005062:	6282      	str	r2, [r0, #40]	; 0x28
}
 8005064:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8005066:	6143      	str	r3, [r0, #20]
}
 8005068:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800506a:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005070:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005072:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005078:	430b      	orrs	r3, r1
 800507a:	e7ec      	b.n	8005056 <TIM_Base_SetConfig+0x26>
    tmpcr1 |= Structure->CounterMode;
 800507c:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005082:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005084:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800508c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005090:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005092:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005094:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005096:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005098:	690b      	ldr	r3, [r1, #16]
}
 800509a:	bc70      	pop	{r4, r5, r6}
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800509e:	2301      	movs	r3, #1
 80050a0:	6143      	str	r3, [r0, #20]
}
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00

080050a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80050a8:	b1b8      	cbz	r0, 80050da <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80050aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80050ae:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80050b0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050b4:	4604      	mov	r4, r0
 80050b6:	b15b      	cbz	r3, 80050d0 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c0:	1d21      	adds	r1, r4, #4
 80050c2:	f7ff ffb5 	bl	8005030 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80050c6:	2301      	movs	r3, #1
  return HAL_OK;
 80050c8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80050ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80050ce:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80050d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80050d4:	f7fc f9d4 	bl	8001480 <HAL_TIM_Base_MspInit>
 80050d8:	e7ee      	b.n	80050b8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80050da:	2001      	movs	r0, #1
}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop

080050e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80050e4:	2a01      	cmp	r2, #1
 80050e6:	d01a      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	2202      	movs	r2, #2
{
 80050ea:	b4f0      	push	{r4, r5, r6, r7}
 80050ec:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80050ee:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	2601      	movs	r6, #1
  tmpcr2 = htim->Instance->CR2;
 80050f2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80050f8:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fa:	e9d1 2700 	ldrd	r2, r7, [r1]
  tmpcr2 &= ~TIM_CR2_MMS;
 80050fe:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005102:	4311      	orrs	r1, r2
  tmpsmcr = htim->Instance->SMCR;
 8005104:	68a2      	ldr	r2, [r4, #8]

  return HAL_OK;
 8005106:	4628      	mov	r0, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510c:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 800510e:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8005110:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005112:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005116:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 800511a:	bcf0      	pop	{r4, r5, r6, r7}
 800511c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800511e:	2002      	movs	r0, #2
}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop

08005124 <HAL_TIMEx_CommutCallback>:
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop

08005128 <HAL_TIMEx_BreakCallback>:
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop

0800512c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005130:	6803      	ldr	r3, [r0, #0]
 8005132:	68c0      	ldr	r0, [r0, #12]
 8005134:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005136:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005138:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800513c:	4301      	orrs	r1, r0
 800513e:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005140:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005142:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005146:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800514a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800514c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005150:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005152:	430a      	orrs	r2, r1
 8005154:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800515a:	4912      	ldr	r1, [pc, #72]	; (80051a4 <UART_SetConfig+0x78>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800515c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005160:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8005162:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005164:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8005166:	d01a      	beq.n	800519e <UART_SetConfig+0x72>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005168:	f7ff fb5e 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005178:	fbb0 f0f3 	udiv	r0, r0, r3
 800517c:	2364      	movs	r3, #100	; 0x64
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <UART_SetConfig+0x7c>)
 8005180:	6824      	ldr	r4, [r4, #0]
 8005182:	fba1 5200 	umull	r5, r2, r1, r0
 8005186:	0952      	lsrs	r2, r2, #5
 8005188:	fb03 0312 	mls	r3, r3, r2, r0
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	3332      	adds	r3, #50	; 0x32
 8005190:	fba1 1303 	umull	r1, r3, r1, r3
 8005194:	0112      	lsls	r2, r2, #4
 8005196:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800519a:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800519c:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800519e:	f7ff fb53 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 80051a2:	e7e3      	b.n	800516c <UART_SetConfig+0x40>
 80051a4:	40013800 	.word	0x40013800
 80051a8:	51eb851f 	.word	0x51eb851f

080051ac <HAL_UART_Init>:
  if (huart == NULL)
 80051ac:	b360      	cbz	r0, 8005208 <HAL_UART_Init+0x5c>
{
 80051ae:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80051b0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80051b4:	4604      	mov	r4, r0
 80051b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051ba:	b303      	cbz	r3, 80051fe <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80051bc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80051be:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80051c4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80051c6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80051c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051cc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80051ce:	f7ff ffad 	bl	800512c <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d6:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80051d8:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f2:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051f8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80051fe:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005202:	f7fc f995 	bl	8001530 <HAL_UART_MspInit>
 8005206:	e7d9      	b.n	80051bc <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8005208:	2001      	movs	r0, #1
}
 800520a:	4770      	bx	lr

0800520c <__errno>:
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <__errno+0x8>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000000c 	.word	0x2000000c

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	2500      	movs	r5, #0
 800521c:	4e0c      	ldr	r6, [pc, #48]	; (8005250 <__libc_init_array+0x38>)
 800521e:	4c0d      	ldr	r4, [pc, #52]	; (8005254 <__libc_init_array+0x3c>)
 8005220:	1ba4      	subs	r4, r4, r6
 8005222:	10a4      	asrs	r4, r4, #2
 8005224:	42a5      	cmp	r5, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	f000 fc34 	bl	8005a94 <_init>
 800522c:	2500      	movs	r5, #0
 800522e:	4e0a      	ldr	r6, [pc, #40]	; (8005258 <__libc_init_array+0x40>)
 8005230:	4c0a      	ldr	r4, [pc, #40]	; (800525c <__libc_init_array+0x44>)
 8005232:	1ba4      	subs	r4, r4, r6
 8005234:	10a4      	asrs	r4, r4, #2
 8005236:	42a5      	cmp	r5, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005240:	4798      	blx	r3
 8005242:	3501      	adds	r5, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800524a:	4798      	blx	r3
 800524c:	3501      	adds	r5, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	08005b84 	.word	0x08005b84
 8005254:	08005b84 	.word	0x08005b84
 8005258:	08005b84 	.word	0x08005b84
 800525c:	08005b88 	.word	0x08005b88

08005260 <memset>:
 8005260:	4603      	mov	r3, r0
 8005262:	4402      	add	r2, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	f803 1b01 	strb.w	r1, [r3], #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <siprintf>:
 8005270:	b40e      	push	{r1, r2, r3}
 8005272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005276:	b500      	push	{lr}
 8005278:	b09c      	sub	sp, #112	; 0x70
 800527a:	ab1d      	add	r3, sp, #116	; 0x74
 800527c:	9002      	str	r0, [sp, #8]
 800527e:	9006      	str	r0, [sp, #24]
 8005280:	9107      	str	r1, [sp, #28]
 8005282:	9104      	str	r1, [sp, #16]
 8005284:	4808      	ldr	r0, [pc, #32]	; (80052a8 <siprintf+0x38>)
 8005286:	4909      	ldr	r1, [pc, #36]	; (80052ac <siprintf+0x3c>)
 8005288:	f853 2b04 	ldr.w	r2, [r3], #4
 800528c:	9105      	str	r1, [sp, #20]
 800528e:	6800      	ldr	r0, [r0, #0]
 8005290:	a902      	add	r1, sp, #8
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	f000 f866 	bl	8005364 <_svfiprintf_r>
 8005298:	2200      	movs	r2, #0
 800529a:	9b02      	ldr	r3, [sp, #8]
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	b01c      	add	sp, #112	; 0x70
 80052a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80052a4:	b003      	add	sp, #12
 80052a6:	4770      	bx	lr
 80052a8:	2000000c 	.word	0x2000000c
 80052ac:	ffff0208 	.word	0xffff0208

080052b0 <__ssputs_r>:
 80052b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052b4:	688e      	ldr	r6, [r1, #8]
 80052b6:	4682      	mov	sl, r0
 80052b8:	429e      	cmp	r6, r3
 80052ba:	460c      	mov	r4, r1
 80052bc:	4690      	mov	r8, r2
 80052be:	4699      	mov	r9, r3
 80052c0:	d837      	bhi.n	8005332 <__ssputs_r+0x82>
 80052c2:	898a      	ldrh	r2, [r1, #12]
 80052c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052c8:	d031      	beq.n	800532e <__ssputs_r+0x7e>
 80052ca:	2302      	movs	r3, #2
 80052cc:	6825      	ldr	r5, [r4, #0]
 80052ce:	6909      	ldr	r1, [r1, #16]
 80052d0:	1a6f      	subs	r7, r5, r1
 80052d2:	6965      	ldr	r5, [r4, #20]
 80052d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80052dc:	f109 0301 	add.w	r3, r9, #1
 80052e0:	443b      	add	r3, r7
 80052e2:	429d      	cmp	r5, r3
 80052e4:	bf38      	it	cc
 80052e6:	461d      	movcc	r5, r3
 80052e8:	0553      	lsls	r3, r2, #21
 80052ea:	d530      	bpl.n	800534e <__ssputs_r+0x9e>
 80052ec:	4629      	mov	r1, r5
 80052ee:	f000 fb37 	bl	8005960 <_malloc_r>
 80052f2:	4606      	mov	r6, r0
 80052f4:	b950      	cbnz	r0, 800530c <__ssputs_r+0x5c>
 80052f6:	230c      	movs	r3, #12
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	f8ca 3000 	str.w	r3, [sl]
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005306:	81a3      	strh	r3, [r4, #12]
 8005308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530c:	463a      	mov	r2, r7
 800530e:	6921      	ldr	r1, [r4, #16]
 8005310:	f000 fab6 	bl	8005880 <memcpy>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800531a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	6126      	str	r6, [r4, #16]
 8005322:	443e      	add	r6, r7
 8005324:	6026      	str	r6, [r4, #0]
 8005326:	464e      	mov	r6, r9
 8005328:	6165      	str	r5, [r4, #20]
 800532a:	1bed      	subs	r5, r5, r7
 800532c:	60a5      	str	r5, [r4, #8]
 800532e:	454e      	cmp	r6, r9
 8005330:	d900      	bls.n	8005334 <__ssputs_r+0x84>
 8005332:	464e      	mov	r6, r9
 8005334:	4632      	mov	r2, r6
 8005336:	4641      	mov	r1, r8
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	f000 faac 	bl	8005896 <memmove>
 800533e:	68a3      	ldr	r3, [r4, #8]
 8005340:	2000      	movs	r0, #0
 8005342:	1b9b      	subs	r3, r3, r6
 8005344:	60a3      	str	r3, [r4, #8]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	441e      	add	r6, r3
 800534a:	6026      	str	r6, [r4, #0]
 800534c:	e7dc      	b.n	8005308 <__ssputs_r+0x58>
 800534e:	462a      	mov	r2, r5
 8005350:	f000 fb60 	bl	8005a14 <_realloc_r>
 8005354:	4606      	mov	r6, r0
 8005356:	2800      	cmp	r0, #0
 8005358:	d1e2      	bne.n	8005320 <__ssputs_r+0x70>
 800535a:	6921      	ldr	r1, [r4, #16]
 800535c:	4650      	mov	r0, sl
 800535e:	f000 fab3 	bl	80058c8 <_free_r>
 8005362:	e7c8      	b.n	80052f6 <__ssputs_r+0x46>

08005364 <_svfiprintf_r>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	461d      	mov	r5, r3
 800536a:	898b      	ldrh	r3, [r1, #12]
 800536c:	b09d      	sub	sp, #116	; 0x74
 800536e:	061f      	lsls	r7, r3, #24
 8005370:	4680      	mov	r8, r0
 8005372:	460c      	mov	r4, r1
 8005374:	4616      	mov	r6, r2
 8005376:	d50f      	bpl.n	8005398 <_svfiprintf_r+0x34>
 8005378:	690b      	ldr	r3, [r1, #16]
 800537a:	b96b      	cbnz	r3, 8005398 <_svfiprintf_r+0x34>
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	f000 faef 	bl	8005960 <_malloc_r>
 8005382:	6020      	str	r0, [r4, #0]
 8005384:	6120      	str	r0, [r4, #16]
 8005386:	b928      	cbnz	r0, 8005394 <_svfiprintf_r+0x30>
 8005388:	230c      	movs	r3, #12
 800538a:	f8c8 3000 	str.w	r3, [r8]
 800538e:	f04f 30ff 	mov.w	r0, #4294967295
 8005392:	e0c8      	b.n	8005526 <_svfiprintf_r+0x1c2>
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	6163      	str	r3, [r4, #20]
 8005398:	2300      	movs	r3, #0
 800539a:	9309      	str	r3, [sp, #36]	; 0x24
 800539c:	2320      	movs	r3, #32
 800539e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053a2:	2330      	movs	r3, #48	; 0x30
 80053a4:	f04f 0b01 	mov.w	fp, #1
 80053a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053ac:	9503      	str	r5, [sp, #12]
 80053ae:	4637      	mov	r7, r6
 80053b0:	463d      	mov	r5, r7
 80053b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053b6:	b10b      	cbz	r3, 80053bc <_svfiprintf_r+0x58>
 80053b8:	2b25      	cmp	r3, #37	; 0x25
 80053ba:	d13e      	bne.n	800543a <_svfiprintf_r+0xd6>
 80053bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80053c0:	d00b      	beq.n	80053da <_svfiprintf_r+0x76>
 80053c2:	4653      	mov	r3, sl
 80053c4:	4632      	mov	r2, r6
 80053c6:	4621      	mov	r1, r4
 80053c8:	4640      	mov	r0, r8
 80053ca:	f7ff ff71 	bl	80052b0 <__ssputs_r>
 80053ce:	3001      	adds	r0, #1
 80053d0:	f000 80a4 	beq.w	800551c <_svfiprintf_r+0x1b8>
 80053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d6:	4453      	add	r3, sl
 80053d8:	9309      	str	r3, [sp, #36]	; 0x24
 80053da:	783b      	ldrb	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 809d 	beq.w	800551c <_svfiprintf_r+0x1b8>
 80053e2:	2300      	movs	r3, #0
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295
 80053e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	9307      	str	r3, [sp, #28]
 80053f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053f4:	931a      	str	r3, [sp, #104]	; 0x68
 80053f6:	462f      	mov	r7, r5
 80053f8:	2205      	movs	r2, #5
 80053fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80053fe:	4850      	ldr	r0, [pc, #320]	; (8005540 <_svfiprintf_r+0x1dc>)
 8005400:	f000 fa30 	bl	8005864 <memchr>
 8005404:	9b04      	ldr	r3, [sp, #16]
 8005406:	b9d0      	cbnz	r0, 800543e <_svfiprintf_r+0xda>
 8005408:	06d9      	lsls	r1, r3, #27
 800540a:	bf44      	itt	mi
 800540c:	2220      	movmi	r2, #32
 800540e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005412:	071a      	lsls	r2, r3, #28
 8005414:	bf44      	itt	mi
 8005416:	222b      	movmi	r2, #43	; 0x2b
 8005418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800541c:	782a      	ldrb	r2, [r5, #0]
 800541e:	2a2a      	cmp	r2, #42	; 0x2a
 8005420:	d015      	beq.n	800544e <_svfiprintf_r+0xea>
 8005422:	462f      	mov	r7, r5
 8005424:	2000      	movs	r0, #0
 8005426:	250a      	movs	r5, #10
 8005428:	9a07      	ldr	r2, [sp, #28]
 800542a:	4639      	mov	r1, r7
 800542c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005430:	3b30      	subs	r3, #48	; 0x30
 8005432:	2b09      	cmp	r3, #9
 8005434:	d94d      	bls.n	80054d2 <_svfiprintf_r+0x16e>
 8005436:	b1b8      	cbz	r0, 8005468 <_svfiprintf_r+0x104>
 8005438:	e00f      	b.n	800545a <_svfiprintf_r+0xf6>
 800543a:	462f      	mov	r7, r5
 800543c:	e7b8      	b.n	80053b0 <_svfiprintf_r+0x4c>
 800543e:	4a40      	ldr	r2, [pc, #256]	; (8005540 <_svfiprintf_r+0x1dc>)
 8005440:	463d      	mov	r5, r7
 8005442:	1a80      	subs	r0, r0, r2
 8005444:	fa0b f000 	lsl.w	r0, fp, r0
 8005448:	4318      	orrs	r0, r3
 800544a:	9004      	str	r0, [sp, #16]
 800544c:	e7d3      	b.n	80053f6 <_svfiprintf_r+0x92>
 800544e:	9a03      	ldr	r2, [sp, #12]
 8005450:	1d11      	adds	r1, r2, #4
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	9103      	str	r1, [sp, #12]
 8005456:	2a00      	cmp	r2, #0
 8005458:	db01      	blt.n	800545e <_svfiprintf_r+0xfa>
 800545a:	9207      	str	r2, [sp, #28]
 800545c:	e004      	b.n	8005468 <_svfiprintf_r+0x104>
 800545e:	4252      	negs	r2, r2
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	9207      	str	r2, [sp, #28]
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	783b      	ldrb	r3, [r7, #0]
 800546a:	2b2e      	cmp	r3, #46	; 0x2e
 800546c:	d10c      	bne.n	8005488 <_svfiprintf_r+0x124>
 800546e:	787b      	ldrb	r3, [r7, #1]
 8005470:	2b2a      	cmp	r3, #42	; 0x2a
 8005472:	d133      	bne.n	80054dc <_svfiprintf_r+0x178>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	3702      	adds	r7, #2
 8005478:	1d1a      	adds	r2, r3, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	9203      	str	r2, [sp, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	bfb8      	it	lt
 8005482:	f04f 33ff 	movlt.w	r3, #4294967295
 8005486:	9305      	str	r3, [sp, #20]
 8005488:	4d2e      	ldr	r5, [pc, #184]	; (8005544 <_svfiprintf_r+0x1e0>)
 800548a:	2203      	movs	r2, #3
 800548c:	7839      	ldrb	r1, [r7, #0]
 800548e:	4628      	mov	r0, r5
 8005490:	f000 f9e8 	bl	8005864 <memchr>
 8005494:	b138      	cbz	r0, 80054a6 <_svfiprintf_r+0x142>
 8005496:	2340      	movs	r3, #64	; 0x40
 8005498:	1b40      	subs	r0, r0, r5
 800549a:	fa03 f000 	lsl.w	r0, r3, r0
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	3701      	adds	r7, #1
 80054a2:	4303      	orrs	r3, r0
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	7839      	ldrb	r1, [r7, #0]
 80054a8:	2206      	movs	r2, #6
 80054aa:	4827      	ldr	r0, [pc, #156]	; (8005548 <_svfiprintf_r+0x1e4>)
 80054ac:	1c7e      	adds	r6, r7, #1
 80054ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054b2:	f000 f9d7 	bl	8005864 <memchr>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d038      	beq.n	800552c <_svfiprintf_r+0x1c8>
 80054ba:	4b24      	ldr	r3, [pc, #144]	; (800554c <_svfiprintf_r+0x1e8>)
 80054bc:	bb13      	cbnz	r3, 8005504 <_svfiprintf_r+0x1a0>
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	3307      	adds	r3, #7
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	3308      	adds	r3, #8
 80054c8:	9303      	str	r3, [sp, #12]
 80054ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054cc:	444b      	add	r3, r9
 80054ce:	9309      	str	r3, [sp, #36]	; 0x24
 80054d0:	e76d      	b.n	80053ae <_svfiprintf_r+0x4a>
 80054d2:	fb05 3202 	mla	r2, r5, r2, r3
 80054d6:	2001      	movs	r0, #1
 80054d8:	460f      	mov	r7, r1
 80054da:	e7a6      	b.n	800542a <_svfiprintf_r+0xc6>
 80054dc:	2300      	movs	r3, #0
 80054de:	250a      	movs	r5, #10
 80054e0:	4619      	mov	r1, r3
 80054e2:	3701      	adds	r7, #1
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	4638      	mov	r0, r7
 80054e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ec:	3a30      	subs	r2, #48	; 0x30
 80054ee:	2a09      	cmp	r2, #9
 80054f0:	d903      	bls.n	80054fa <_svfiprintf_r+0x196>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0c8      	beq.n	8005488 <_svfiprintf_r+0x124>
 80054f6:	9105      	str	r1, [sp, #20]
 80054f8:	e7c6      	b.n	8005488 <_svfiprintf_r+0x124>
 80054fa:	fb05 2101 	mla	r1, r5, r1, r2
 80054fe:	2301      	movs	r3, #1
 8005500:	4607      	mov	r7, r0
 8005502:	e7f0      	b.n	80054e6 <_svfiprintf_r+0x182>
 8005504:	ab03      	add	r3, sp, #12
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	4622      	mov	r2, r4
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <_svfiprintf_r+0x1ec>)
 800550c:	a904      	add	r1, sp, #16
 800550e:	4640      	mov	r0, r8
 8005510:	f3af 8000 	nop.w
 8005514:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005518:	4681      	mov	r9, r0
 800551a:	d1d6      	bne.n	80054ca <_svfiprintf_r+0x166>
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	065b      	lsls	r3, r3, #25
 8005520:	f53f af35 	bmi.w	800538e <_svfiprintf_r+0x2a>
 8005524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005526:	b01d      	add	sp, #116	; 0x74
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	ab03      	add	r3, sp, #12
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	4622      	mov	r2, r4
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <_svfiprintf_r+0x1ec>)
 8005534:	a904      	add	r1, sp, #16
 8005536:	4640      	mov	r0, r8
 8005538:	f000 f882 	bl	8005640 <_printf_i>
 800553c:	e7ea      	b.n	8005514 <_svfiprintf_r+0x1b0>
 800553e:	bf00      	nop
 8005540:	08005b50 	.word	0x08005b50
 8005544:	08005b56 	.word	0x08005b56
 8005548:	08005b5a 	.word	0x08005b5a
 800554c:	00000000 	.word	0x00000000
 8005550:	080052b1 	.word	0x080052b1

08005554 <_printf_common>:
 8005554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	4691      	mov	r9, r2
 800555a:	461f      	mov	r7, r3
 800555c:	688a      	ldr	r2, [r1, #8]
 800555e:	690b      	ldr	r3, [r1, #16]
 8005560:	4606      	mov	r6, r0
 8005562:	4293      	cmp	r3, r2
 8005564:	bfb8      	it	lt
 8005566:	4613      	movlt	r3, r2
 8005568:	f8c9 3000 	str.w	r3, [r9]
 800556c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005570:	460c      	mov	r4, r1
 8005572:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005576:	b112      	cbz	r2, 800557e <_printf_common+0x2a>
 8005578:	3301      	adds	r3, #1
 800557a:	f8c9 3000 	str.w	r3, [r9]
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	0699      	lsls	r1, r3, #26
 8005582:	bf42      	ittt	mi
 8005584:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005588:	3302      	addmi	r3, #2
 800558a:	f8c9 3000 	strmi.w	r3, [r9]
 800558e:	6825      	ldr	r5, [r4, #0]
 8005590:	f015 0506 	ands.w	r5, r5, #6
 8005594:	d107      	bne.n	80055a6 <_printf_common+0x52>
 8005596:	f104 0a19 	add.w	sl, r4, #25
 800559a:	68e3      	ldr	r3, [r4, #12]
 800559c:	f8d9 2000 	ldr.w	r2, [r9]
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	dc29      	bgt.n	80055fa <_printf_common+0xa6>
 80055a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80055aa:	6822      	ldr	r2, [r4, #0]
 80055ac:	3300      	adds	r3, #0
 80055ae:	bf18      	it	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	0692      	lsls	r2, r2, #26
 80055b4:	d42e      	bmi.n	8005614 <_printf_common+0xc0>
 80055b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ba:	4639      	mov	r1, r7
 80055bc:	4630      	mov	r0, r6
 80055be:	47c0      	blx	r8
 80055c0:	3001      	adds	r0, #1
 80055c2:	d021      	beq.n	8005608 <_printf_common+0xb4>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	68e5      	ldr	r5, [r4, #12]
 80055c8:	f003 0306 	and.w	r3, r3, #6
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	bf18      	it	ne
 80055d0:	2500      	movne	r5, #0
 80055d2:	f8d9 2000 	ldr.w	r2, [r9]
 80055d6:	f04f 0900 	mov.w	r9, #0
 80055da:	bf08      	it	eq
 80055dc:	1aad      	subeq	r5, r5, r2
 80055de:	68a3      	ldr	r3, [r4, #8]
 80055e0:	6922      	ldr	r2, [r4, #16]
 80055e2:	bf08      	it	eq
 80055e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055e8:	4293      	cmp	r3, r2
 80055ea:	bfc4      	itt	gt
 80055ec:	1a9b      	subgt	r3, r3, r2
 80055ee:	18ed      	addgt	r5, r5, r3
 80055f0:	341a      	adds	r4, #26
 80055f2:	454d      	cmp	r5, r9
 80055f4:	d11a      	bne.n	800562c <_printf_common+0xd8>
 80055f6:	2000      	movs	r0, #0
 80055f8:	e008      	b.n	800560c <_printf_common+0xb8>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4652      	mov	r2, sl
 80055fe:	4639      	mov	r1, r7
 8005600:	4630      	mov	r0, r6
 8005602:	47c0      	blx	r8
 8005604:	3001      	adds	r0, #1
 8005606:	d103      	bne.n	8005610 <_printf_common+0xbc>
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005610:	3501      	adds	r5, #1
 8005612:	e7c2      	b.n	800559a <_printf_common+0x46>
 8005614:	2030      	movs	r0, #48	; 0x30
 8005616:	18e1      	adds	r1, r4, r3
 8005618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005622:	4422      	add	r2, r4
 8005624:	3302      	adds	r3, #2
 8005626:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800562a:	e7c4      	b.n	80055b6 <_printf_common+0x62>
 800562c:	2301      	movs	r3, #1
 800562e:	4622      	mov	r2, r4
 8005630:	4639      	mov	r1, r7
 8005632:	4630      	mov	r0, r6
 8005634:	47c0      	blx	r8
 8005636:	3001      	adds	r0, #1
 8005638:	d0e6      	beq.n	8005608 <_printf_common+0xb4>
 800563a:	f109 0901 	add.w	r9, r9, #1
 800563e:	e7d8      	b.n	80055f2 <_printf_common+0x9e>

08005640 <_printf_i>:
 8005640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005644:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005648:	460c      	mov	r4, r1
 800564a:	7e09      	ldrb	r1, [r1, #24]
 800564c:	b085      	sub	sp, #20
 800564e:	296e      	cmp	r1, #110	; 0x6e
 8005650:	4617      	mov	r7, r2
 8005652:	4606      	mov	r6, r0
 8005654:	4698      	mov	r8, r3
 8005656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005658:	f000 80b3 	beq.w	80057c2 <_printf_i+0x182>
 800565c:	d822      	bhi.n	80056a4 <_printf_i+0x64>
 800565e:	2963      	cmp	r1, #99	; 0x63
 8005660:	d036      	beq.n	80056d0 <_printf_i+0x90>
 8005662:	d80a      	bhi.n	800567a <_printf_i+0x3a>
 8005664:	2900      	cmp	r1, #0
 8005666:	f000 80b9 	beq.w	80057dc <_printf_i+0x19c>
 800566a:	2958      	cmp	r1, #88	; 0x58
 800566c:	f000 8083 	beq.w	8005776 <_printf_i+0x136>
 8005670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005674:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005678:	e032      	b.n	80056e0 <_printf_i+0xa0>
 800567a:	2964      	cmp	r1, #100	; 0x64
 800567c:	d001      	beq.n	8005682 <_printf_i+0x42>
 800567e:	2969      	cmp	r1, #105	; 0x69
 8005680:	d1f6      	bne.n	8005670 <_printf_i+0x30>
 8005682:	6820      	ldr	r0, [r4, #0]
 8005684:	6813      	ldr	r3, [r2, #0]
 8005686:	0605      	lsls	r5, r0, #24
 8005688:	f103 0104 	add.w	r1, r3, #4
 800568c:	d52a      	bpl.n	80056e4 <_printf_i+0xa4>
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	da03      	bge.n	800569e <_printf_i+0x5e>
 8005696:	222d      	movs	r2, #45	; 0x2d
 8005698:	425b      	negs	r3, r3
 800569a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800569e:	486f      	ldr	r0, [pc, #444]	; (800585c <_printf_i+0x21c>)
 80056a0:	220a      	movs	r2, #10
 80056a2:	e039      	b.n	8005718 <_printf_i+0xd8>
 80056a4:	2973      	cmp	r1, #115	; 0x73
 80056a6:	f000 809d 	beq.w	80057e4 <_printf_i+0x1a4>
 80056aa:	d808      	bhi.n	80056be <_printf_i+0x7e>
 80056ac:	296f      	cmp	r1, #111	; 0x6f
 80056ae:	d020      	beq.n	80056f2 <_printf_i+0xb2>
 80056b0:	2970      	cmp	r1, #112	; 0x70
 80056b2:	d1dd      	bne.n	8005670 <_printf_i+0x30>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f043 0320 	orr.w	r3, r3, #32
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	e003      	b.n	80056c6 <_printf_i+0x86>
 80056be:	2975      	cmp	r1, #117	; 0x75
 80056c0:	d017      	beq.n	80056f2 <_printf_i+0xb2>
 80056c2:	2978      	cmp	r1, #120	; 0x78
 80056c4:	d1d4      	bne.n	8005670 <_printf_i+0x30>
 80056c6:	2378      	movs	r3, #120	; 0x78
 80056c8:	4865      	ldr	r0, [pc, #404]	; (8005860 <_printf_i+0x220>)
 80056ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ce:	e055      	b.n	800577c <_printf_i+0x13c>
 80056d0:	6813      	ldr	r3, [r2, #0]
 80056d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d6:	1d19      	adds	r1, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6011      	str	r1, [r2, #0]
 80056dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056e0:	2301      	movs	r3, #1
 80056e2:	e08c      	b.n	80057fe <_printf_i+0x1be>
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056ea:	6011      	str	r1, [r2, #0]
 80056ec:	bf18      	it	ne
 80056ee:	b21b      	sxthne	r3, r3
 80056f0:	e7cf      	b.n	8005692 <_printf_i+0x52>
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	1d18      	adds	r0, r3, #4
 80056f8:	6010      	str	r0, [r2, #0]
 80056fa:	0628      	lsls	r0, r5, #24
 80056fc:	d501      	bpl.n	8005702 <_printf_i+0xc2>
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	e002      	b.n	8005708 <_printf_i+0xc8>
 8005702:	0668      	lsls	r0, r5, #25
 8005704:	d5fb      	bpl.n	80056fe <_printf_i+0xbe>
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	296f      	cmp	r1, #111	; 0x6f
 800570a:	bf14      	ite	ne
 800570c:	220a      	movne	r2, #10
 800570e:	2208      	moveq	r2, #8
 8005710:	4852      	ldr	r0, [pc, #328]	; (800585c <_printf_i+0x21c>)
 8005712:	2100      	movs	r1, #0
 8005714:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005718:	6865      	ldr	r5, [r4, #4]
 800571a:	2d00      	cmp	r5, #0
 800571c:	60a5      	str	r5, [r4, #8]
 800571e:	f2c0 8095 	blt.w	800584c <_printf_i+0x20c>
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	f021 0104 	bic.w	r1, r1, #4
 8005728:	6021      	str	r1, [r4, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d13d      	bne.n	80057aa <_printf_i+0x16a>
 800572e:	2d00      	cmp	r5, #0
 8005730:	f040 808e 	bne.w	8005850 <_printf_i+0x210>
 8005734:	4665      	mov	r5, ip
 8005736:	2a08      	cmp	r2, #8
 8005738:	d10b      	bne.n	8005752 <_printf_i+0x112>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	07db      	lsls	r3, r3, #31
 800573e:	d508      	bpl.n	8005752 <_printf_i+0x112>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	6862      	ldr	r2, [r4, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	bfde      	ittt	le
 8005748:	2330      	movle	r3, #48	; 0x30
 800574a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800574e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005752:	ebac 0305 	sub.w	r3, ip, r5
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	f8cd 8000 	str.w	r8, [sp]
 800575c:	463b      	mov	r3, r7
 800575e:	aa03      	add	r2, sp, #12
 8005760:	4621      	mov	r1, r4
 8005762:	4630      	mov	r0, r6
 8005764:	f7ff fef6 	bl	8005554 <_printf_common>
 8005768:	3001      	adds	r0, #1
 800576a:	d14d      	bne.n	8005808 <_printf_i+0x1c8>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	b005      	add	sp, #20
 8005772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005776:	4839      	ldr	r0, [pc, #228]	; (800585c <_printf_i+0x21c>)
 8005778:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800577c:	6813      	ldr	r3, [r2, #0]
 800577e:	6821      	ldr	r1, [r4, #0]
 8005780:	1d1d      	adds	r5, r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6015      	str	r5, [r2, #0]
 8005786:	060a      	lsls	r2, r1, #24
 8005788:	d50b      	bpl.n	80057a2 <_printf_i+0x162>
 800578a:	07ca      	lsls	r2, r1, #31
 800578c:	bf44      	itt	mi
 800578e:	f041 0120 	orrmi.w	r1, r1, #32
 8005792:	6021      	strmi	r1, [r4, #0]
 8005794:	b91b      	cbnz	r3, 800579e <_printf_i+0x15e>
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	f022 0220 	bic.w	r2, r2, #32
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	2210      	movs	r2, #16
 80057a0:	e7b7      	b.n	8005712 <_printf_i+0xd2>
 80057a2:	064d      	lsls	r5, r1, #25
 80057a4:	bf48      	it	mi
 80057a6:	b29b      	uxthmi	r3, r3
 80057a8:	e7ef      	b.n	800578a <_printf_i+0x14a>
 80057aa:	4665      	mov	r5, ip
 80057ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80057b0:	fb02 3311 	mls	r3, r2, r1, r3
 80057b4:	5cc3      	ldrb	r3, [r0, r3]
 80057b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80057ba:	460b      	mov	r3, r1
 80057bc:	2900      	cmp	r1, #0
 80057be:	d1f5      	bne.n	80057ac <_printf_i+0x16c>
 80057c0:	e7b9      	b.n	8005736 <_printf_i+0xf6>
 80057c2:	6813      	ldr	r3, [r2, #0]
 80057c4:	6825      	ldr	r5, [r4, #0]
 80057c6:	1d18      	adds	r0, r3, #4
 80057c8:	6961      	ldr	r1, [r4, #20]
 80057ca:	6010      	str	r0, [r2, #0]
 80057cc:	0628      	lsls	r0, r5, #24
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	d501      	bpl.n	80057d6 <_printf_i+0x196>
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	e002      	b.n	80057dc <_printf_i+0x19c>
 80057d6:	066a      	lsls	r2, r5, #25
 80057d8:	d5fb      	bpl.n	80057d2 <_printf_i+0x192>
 80057da:	8019      	strh	r1, [r3, #0]
 80057dc:	2300      	movs	r3, #0
 80057de:	4665      	mov	r5, ip
 80057e0:	6123      	str	r3, [r4, #16]
 80057e2:	e7b9      	b.n	8005758 <_printf_i+0x118>
 80057e4:	6813      	ldr	r3, [r2, #0]
 80057e6:	1d19      	adds	r1, r3, #4
 80057e8:	6011      	str	r1, [r2, #0]
 80057ea:	681d      	ldr	r5, [r3, #0]
 80057ec:	6862      	ldr	r2, [r4, #4]
 80057ee:	2100      	movs	r1, #0
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f837 	bl	8005864 <memchr>
 80057f6:	b108      	cbz	r0, 80057fc <_printf_i+0x1bc>
 80057f8:	1b40      	subs	r0, r0, r5
 80057fa:	6060      	str	r0, [r4, #4]
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	2300      	movs	r3, #0
 8005802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005806:	e7a7      	b.n	8005758 <_printf_i+0x118>
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	462a      	mov	r2, r5
 800580c:	4639      	mov	r1, r7
 800580e:	4630      	mov	r0, r6
 8005810:	47c0      	blx	r8
 8005812:	3001      	adds	r0, #1
 8005814:	d0aa      	beq.n	800576c <_printf_i+0x12c>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	079b      	lsls	r3, r3, #30
 800581a:	d413      	bmi.n	8005844 <_printf_i+0x204>
 800581c:	68e0      	ldr	r0, [r4, #12]
 800581e:	9b03      	ldr	r3, [sp, #12]
 8005820:	4298      	cmp	r0, r3
 8005822:	bfb8      	it	lt
 8005824:	4618      	movlt	r0, r3
 8005826:	e7a3      	b.n	8005770 <_printf_i+0x130>
 8005828:	2301      	movs	r3, #1
 800582a:	464a      	mov	r2, r9
 800582c:	4639      	mov	r1, r7
 800582e:	4630      	mov	r0, r6
 8005830:	47c0      	blx	r8
 8005832:	3001      	adds	r0, #1
 8005834:	d09a      	beq.n	800576c <_printf_i+0x12c>
 8005836:	3501      	adds	r5, #1
 8005838:	68e3      	ldr	r3, [r4, #12]
 800583a:	9a03      	ldr	r2, [sp, #12]
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	42ab      	cmp	r3, r5
 8005840:	dcf2      	bgt.n	8005828 <_printf_i+0x1e8>
 8005842:	e7eb      	b.n	800581c <_printf_i+0x1dc>
 8005844:	2500      	movs	r5, #0
 8005846:	f104 0919 	add.w	r9, r4, #25
 800584a:	e7f5      	b.n	8005838 <_printf_i+0x1f8>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1ac      	bne.n	80057aa <_printf_i+0x16a>
 8005850:	7803      	ldrb	r3, [r0, #0]
 8005852:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005856:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800585a:	e76c      	b.n	8005736 <_printf_i+0xf6>
 800585c:	08005b61 	.word	0x08005b61
 8005860:	08005b72 	.word	0x08005b72

08005864 <memchr>:
 8005864:	b510      	push	{r4, lr}
 8005866:	b2c9      	uxtb	r1, r1
 8005868:	4402      	add	r2, r0
 800586a:	4290      	cmp	r0, r2
 800586c:	4603      	mov	r3, r0
 800586e:	d101      	bne.n	8005874 <memchr+0x10>
 8005870:	2300      	movs	r3, #0
 8005872:	e003      	b.n	800587c <memchr+0x18>
 8005874:	781c      	ldrb	r4, [r3, #0]
 8005876:	3001      	adds	r0, #1
 8005878:	428c      	cmp	r4, r1
 800587a:	d1f6      	bne.n	800586a <memchr+0x6>
 800587c:	4618      	mov	r0, r3
 800587e:	bd10      	pop	{r4, pc}

08005880 <memcpy>:
 8005880:	b510      	push	{r4, lr}
 8005882:	1e43      	subs	r3, r0, #1
 8005884:	440a      	add	r2, r1
 8005886:	4291      	cmp	r1, r2
 8005888:	d100      	bne.n	800588c <memcpy+0xc>
 800588a:	bd10      	pop	{r4, pc}
 800588c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005894:	e7f7      	b.n	8005886 <memcpy+0x6>

08005896 <memmove>:
 8005896:	4288      	cmp	r0, r1
 8005898:	b510      	push	{r4, lr}
 800589a:	eb01 0302 	add.w	r3, r1, r2
 800589e:	d807      	bhi.n	80058b0 <memmove+0x1a>
 80058a0:	1e42      	subs	r2, r0, #1
 80058a2:	4299      	cmp	r1, r3
 80058a4:	d00a      	beq.n	80058bc <memmove+0x26>
 80058a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80058ae:	e7f8      	b.n	80058a2 <memmove+0xc>
 80058b0:	4283      	cmp	r3, r0
 80058b2:	d9f5      	bls.n	80058a0 <memmove+0xa>
 80058b4:	1881      	adds	r1, r0, r2
 80058b6:	1ad2      	subs	r2, r2, r3
 80058b8:	42d3      	cmn	r3, r2
 80058ba:	d100      	bne.n	80058be <memmove+0x28>
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80058c6:	e7f7      	b.n	80058b8 <memmove+0x22>

080058c8 <_free_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4605      	mov	r5, r0
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d043      	beq.n	8005958 <_free_r+0x90>
 80058d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d4:	1f0c      	subs	r4, r1, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfb8      	it	lt
 80058da:	18e4      	addlt	r4, r4, r3
 80058dc:	f000 f8d0 	bl	8005a80 <__malloc_lock>
 80058e0:	4a1e      	ldr	r2, [pc, #120]	; (800595c <_free_r+0x94>)
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	4610      	mov	r0, r2
 80058e6:	b933      	cbnz	r3, 80058f6 <_free_r+0x2e>
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	6014      	str	r4, [r2, #0]
 80058ec:	4628      	mov	r0, r5
 80058ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f2:	f000 b8c6 	b.w	8005a82 <__malloc_unlock>
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	d90b      	bls.n	8005912 <_free_r+0x4a>
 80058fa:	6821      	ldr	r1, [r4, #0]
 80058fc:	1862      	adds	r2, r4, r1
 80058fe:	4293      	cmp	r3, r2
 8005900:	bf01      	itttt	eq
 8005902:	681a      	ldreq	r2, [r3, #0]
 8005904:	685b      	ldreq	r3, [r3, #4]
 8005906:	1852      	addeq	r2, r2, r1
 8005908:	6022      	streq	r2, [r4, #0]
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	6004      	str	r4, [r0, #0]
 800590e:	e7ed      	b.n	80058ec <_free_r+0x24>
 8005910:	4613      	mov	r3, r2
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	b10a      	cbz	r2, 800591a <_free_r+0x52>
 8005916:	42a2      	cmp	r2, r4
 8005918:	d9fa      	bls.n	8005910 <_free_r+0x48>
 800591a:	6819      	ldr	r1, [r3, #0]
 800591c:	1858      	adds	r0, r3, r1
 800591e:	42a0      	cmp	r0, r4
 8005920:	d10b      	bne.n	800593a <_free_r+0x72>
 8005922:	6820      	ldr	r0, [r4, #0]
 8005924:	4401      	add	r1, r0
 8005926:	1858      	adds	r0, r3, r1
 8005928:	4282      	cmp	r2, r0
 800592a:	6019      	str	r1, [r3, #0]
 800592c:	d1de      	bne.n	80058ec <_free_r+0x24>
 800592e:	6810      	ldr	r0, [r2, #0]
 8005930:	6852      	ldr	r2, [r2, #4]
 8005932:	4401      	add	r1, r0
 8005934:	6019      	str	r1, [r3, #0]
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	e7d8      	b.n	80058ec <_free_r+0x24>
 800593a:	d902      	bls.n	8005942 <_free_r+0x7a>
 800593c:	230c      	movs	r3, #12
 800593e:	602b      	str	r3, [r5, #0]
 8005940:	e7d4      	b.n	80058ec <_free_r+0x24>
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	1821      	adds	r1, r4, r0
 8005946:	428a      	cmp	r2, r1
 8005948:	bf01      	itttt	eq
 800594a:	6811      	ldreq	r1, [r2, #0]
 800594c:	6852      	ldreq	r2, [r2, #4]
 800594e:	1809      	addeq	r1, r1, r0
 8005950:	6021      	streq	r1, [r4, #0]
 8005952:	6062      	str	r2, [r4, #4]
 8005954:	605c      	str	r4, [r3, #4]
 8005956:	e7c9      	b.n	80058ec <_free_r+0x24>
 8005958:	bd38      	pop	{r3, r4, r5, pc}
 800595a:	bf00      	nop
 800595c:	200002d8 	.word	0x200002d8

08005960 <_malloc_r>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	1ccd      	adds	r5, r1, #3
 8005964:	f025 0503 	bic.w	r5, r5, #3
 8005968:	3508      	adds	r5, #8
 800596a:	2d0c      	cmp	r5, #12
 800596c:	bf38      	it	cc
 800596e:	250c      	movcc	r5, #12
 8005970:	2d00      	cmp	r5, #0
 8005972:	4606      	mov	r6, r0
 8005974:	db01      	blt.n	800597a <_malloc_r+0x1a>
 8005976:	42a9      	cmp	r1, r5
 8005978:	d903      	bls.n	8005982 <_malloc_r+0x22>
 800597a:	230c      	movs	r3, #12
 800597c:	6033      	str	r3, [r6, #0]
 800597e:	2000      	movs	r0, #0
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	f000 f87d 	bl	8005a80 <__malloc_lock>
 8005986:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <_malloc_r+0xac>)
 8005988:	6814      	ldr	r4, [r2, #0]
 800598a:	4621      	mov	r1, r4
 800598c:	b991      	cbnz	r1, 80059b4 <_malloc_r+0x54>
 800598e:	4c20      	ldr	r4, [pc, #128]	; (8005a10 <_malloc_r+0xb0>)
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	b91b      	cbnz	r3, 800599c <_malloc_r+0x3c>
 8005994:	4630      	mov	r0, r6
 8005996:	f000 f863 	bl	8005a60 <_sbrk_r>
 800599a:	6020      	str	r0, [r4, #0]
 800599c:	4629      	mov	r1, r5
 800599e:	4630      	mov	r0, r6
 80059a0:	f000 f85e 	bl	8005a60 <_sbrk_r>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d124      	bne.n	80059f2 <_malloc_r+0x92>
 80059a8:	230c      	movs	r3, #12
 80059aa:	4630      	mov	r0, r6
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	f000 f868 	bl	8005a82 <__malloc_unlock>
 80059b2:	e7e4      	b.n	800597e <_malloc_r+0x1e>
 80059b4:	680b      	ldr	r3, [r1, #0]
 80059b6:	1b5b      	subs	r3, r3, r5
 80059b8:	d418      	bmi.n	80059ec <_malloc_r+0x8c>
 80059ba:	2b0b      	cmp	r3, #11
 80059bc:	d90f      	bls.n	80059de <_malloc_r+0x7e>
 80059be:	600b      	str	r3, [r1, #0]
 80059c0:	18cc      	adds	r4, r1, r3
 80059c2:	50cd      	str	r5, [r1, r3]
 80059c4:	4630      	mov	r0, r6
 80059c6:	f000 f85c 	bl	8005a82 <__malloc_unlock>
 80059ca:	f104 000b 	add.w	r0, r4, #11
 80059ce:	1d23      	adds	r3, r4, #4
 80059d0:	f020 0007 	bic.w	r0, r0, #7
 80059d4:	1ac3      	subs	r3, r0, r3
 80059d6:	d0d3      	beq.n	8005980 <_malloc_r+0x20>
 80059d8:	425a      	negs	r2, r3
 80059da:	50e2      	str	r2, [r4, r3]
 80059dc:	e7d0      	b.n	8005980 <_malloc_r+0x20>
 80059de:	684b      	ldr	r3, [r1, #4]
 80059e0:	428c      	cmp	r4, r1
 80059e2:	bf16      	itet	ne
 80059e4:	6063      	strne	r3, [r4, #4]
 80059e6:	6013      	streq	r3, [r2, #0]
 80059e8:	460c      	movne	r4, r1
 80059ea:	e7eb      	b.n	80059c4 <_malloc_r+0x64>
 80059ec:	460c      	mov	r4, r1
 80059ee:	6849      	ldr	r1, [r1, #4]
 80059f0:	e7cc      	b.n	800598c <_malloc_r+0x2c>
 80059f2:	1cc4      	adds	r4, r0, #3
 80059f4:	f024 0403 	bic.w	r4, r4, #3
 80059f8:	42a0      	cmp	r0, r4
 80059fa:	d005      	beq.n	8005a08 <_malloc_r+0xa8>
 80059fc:	1a21      	subs	r1, r4, r0
 80059fe:	4630      	mov	r0, r6
 8005a00:	f000 f82e 	bl	8005a60 <_sbrk_r>
 8005a04:	3001      	adds	r0, #1
 8005a06:	d0cf      	beq.n	80059a8 <_malloc_r+0x48>
 8005a08:	6025      	str	r5, [r4, #0]
 8005a0a:	e7db      	b.n	80059c4 <_malloc_r+0x64>
 8005a0c:	200002d8 	.word	0x200002d8
 8005a10:	200002dc 	.word	0x200002dc

08005a14 <_realloc_r>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	4607      	mov	r7, r0
 8005a18:	4614      	mov	r4, r2
 8005a1a:	460e      	mov	r6, r1
 8005a1c:	b921      	cbnz	r1, 8005a28 <_realloc_r+0x14>
 8005a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a22:	4611      	mov	r1, r2
 8005a24:	f7ff bf9c 	b.w	8005960 <_malloc_r>
 8005a28:	b922      	cbnz	r2, 8005a34 <_realloc_r+0x20>
 8005a2a:	f7ff ff4d 	bl	80058c8 <_free_r>
 8005a2e:	4625      	mov	r5, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a34:	f000 f826 	bl	8005a84 <_malloc_usable_size_r>
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d20f      	bcs.n	8005a5c <_realloc_r+0x48>
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4638      	mov	r0, r7
 8005a40:	f7ff ff8e 	bl	8005960 <_malloc_r>
 8005a44:	4605      	mov	r5, r0
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d0f2      	beq.n	8005a30 <_realloc_r+0x1c>
 8005a4a:	4631      	mov	r1, r6
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	f7ff ff17 	bl	8005880 <memcpy>
 8005a52:	4631      	mov	r1, r6
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff ff37 	bl	80058c8 <_free_r>
 8005a5a:	e7e9      	b.n	8005a30 <_realloc_r+0x1c>
 8005a5c:	4635      	mov	r5, r6
 8005a5e:	e7e7      	b.n	8005a30 <_realloc_r+0x1c>

08005a60 <_sbrk_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	2300      	movs	r3, #0
 8005a64:	4c05      	ldr	r4, [pc, #20]	; (8005a7c <_sbrk_r+0x1c>)
 8005a66:	4605      	mov	r5, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	6023      	str	r3, [r4, #0]
 8005a6c:	f7fb fc8a 	bl	8001384 <_sbrk>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_sbrk_r+0x1a>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_sbrk_r+0x1a>
 8005a78:	602b      	str	r3, [r5, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20000714 	.word	0x20000714

08005a80 <__malloc_lock>:
 8005a80:	4770      	bx	lr

08005a82 <__malloc_unlock>:
 8005a82:	4770      	bx	lr

08005a84 <_malloc_usable_size_r>:
 8005a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a88:	1f18      	subs	r0, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bfbc      	itt	lt
 8005a8e:	580b      	ldrlt	r3, [r1, r0]
 8005a90:	18c0      	addlt	r0, r0, r3
 8005a92:	4770      	bx	lr

08005a94 <_init>:
 8005a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a96:	bf00      	nop
 8005a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9a:	bc08      	pop	{r3}
 8005a9c:	469e      	mov	lr, r3
 8005a9e:	4770      	bx	lr

08005aa0 <_fini>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr
